1
00:00:01,120 --> 00:00:06,870
So here's the code for the stack and you can
see it fits easily in a couple lines it really

2
00:00:06,870 --> 00:00:09,090
doesn't take up a lot of space.

3
00:00:09,090 --> 00:00:13,889
We have as a private data member we have this
data member called data which were storing

4
00:00:13,889 --> 00:00:16,100
a linked list of T objects.

5
00:00:16,100 --> 00:00:22,620
So we've included the STL list here and you
can see that we're just using that underlying

6
00:00:22,620 --> 00:00:25,960
storage just as a mechanism to create the
stack.

7
00:00:25,960 --> 00:00:30,020
The push function like we said it's just going
to do a push front the pop function is just

8
00:00:30,020 --> 00:00:31,520
going to do a pop front.

9
00:00:31,520 --> 00:00:35,420
So we can push items onto the front of the
linked list and we can remove items from the

10
00:00:35,420 --> 00:00:36,870
from the linked list.

11
00:00:36,870 --> 00:00:40,059
Top just returns the top elements of the linked
list.

12
00:00:40,059 --> 00:00:44,399
Remember the data dot begin is actually an
iterator so we have to dereference it and

13
00:00:44,399 --> 00:00:46,690
that's the first element on the list.

14
00:00:46,690 --> 00:00:50,620
We can assume that there's something on the
list if somebody asked for the top element.

15
00:00:50,620 --> 00:00:53,960
We can assume that there's something on the
list already so we hope that this isn't going

16
00:00:53,960 --> 00:00:56,949
to deref null or cause any problems there.

17
00:00:56,949 --> 00:01:03,379
For is empty we're just telling C++ to return
the size whether the size is equal to zero

18
00:01:03,379 --> 00:01:05,180
and for the size which return the size.

19
00:01:05,180 --> 00:01:09,890
When it comes time to clear we just simply
call clear on the underlying data structure.

20
00:01:09,890 --> 00:01:14,550
So you can see that the code doesn't really
have a lot of beef to it it's very relatively

21
00:01:14,550 --> 00:01:15,550
easy.

22
00:01:15,550 --> 00:01:19,140
All we're doing is inserting elements on to
the front of the list and we're removing elements

23
00:01:19,140 --> 00:01:20,690
from the front of the list.

24
00:01:20,690 --> 00:01:26,670
We know that both of those functions are constant
time function so insertions on to this stack

25
00:01:26,670 --> 00:01:28,500
are only going to take constant time.

26
00:01:28,500 --> 00:01:32,160
Of course accessing the top element of the
stack is only and it's a constant time in

27
00:01:32,160 --> 00:01:36,000
fact if we take a look very carefully the
only one that's not going to be constant time

28
00:01:36,000 --> 00:01:39,170
is that clear function which will be linear.

29
00:01:39,170 --> 00:01:43,770
But we aren't too concerned about that because
we know that that's not going to happen terribly

30
00:01:43,770 --> 00:01:44,770
often.

31
00:01:44,770 --> 00:01:48,860
So the code is relatively easy to understand
relatively easy to go through.

32
00:01:48,860 --> 00:01:53,050
Take your time taking a look at it and if
we wanted to use this we would understand

33
00:01:53,050 --> 00:01:56,570
that we just have to create a stack and call
push and pop as we see fit.

