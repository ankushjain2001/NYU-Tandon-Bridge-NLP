0:00:00.610,0:00:06.210
Ok so we already know how to initialize concatenate
read a string.

0:00:06.210,0:00:10.980
Let’s see some more stuff we can do with
strings.

0:00:10.980,0:00:18.490
So strings are basically a sequence of characters
just like arrays can be a sequence of array

0:00:18.490,0:00:20.580
of integers is a sequence of integers.

0:00:20.580,0:00:23.830
Array of double is a sequence of doubles and
so on.

0:00:23.830,0:00:32.250
So it would be natural to wonder if we can
use this collection or sequence of characters

0:00:32.250,0:00:34.990
just as we use arrays.

0:00:34.990,0:00:43.550
Basically indexing separating single elements
from this collection.

0:00:43.550,0:00:46.100
And apparently we can do that.

0:00:46.100,0:00:54.000
The syntax for indexing with strings is very
similar to what we are doing with arrays.

0:00:54.000,0:01:01.300
Basically we are just having str and then
in a square brackets the index of the character

0:01:01.300,0:01:05.010
we’re we want to access.

0:01:05.010,0:01:14.650
For example if we have a string str one initialized
to ABCDEFG we can then access str one at the

0:01:14.650,0:01:21.270
index zero that would be A. Str one index
one that would be B. Str one index two that

0:01:21.270,0:01:22.270
would be C.

0:01:22.270,0:01:29.030
If we print them with a space between them
we’d get A space B space C. Basically each

0:01:29.030,0:01:33.960
element in this string is of type char.

0:01:33.960,0:01:43.299
So we can for example set ch which is char
variable to str one index three.

0:01:43.299,0:01:46.340
So in this case ch would be D.