1
00:00:00,669 --> 00:00:03,090
Files all contain a name and we know that.

2
00:00:03,090 --> 00:00:07,460
But what you might not realize is that files
also contain what's called an extension.

3
00:00:07,460 --> 00:00:13,190
And the extension tells the operating system
whether it's Windows or MacOS or Linux or

4
00:00:13,190 --> 00:00:19,520
you, what might be inside that file and what
program might be useful to look at the information

5
00:00:19,520 --> 00:00:20,650
in that file.

6
00:00:20,650 --> 00:00:26,011
So I'm sure your experience with Doc, DOC,
which is often opened in Microsoft Word, or

7
00:00:26,011 --> 00:00:28,910
DocX which certainly is open in Microsoft
Word.

8
00:00:28,910 --> 00:00:33,589
You might also be familiar with TXT which
is a plain text file that contains no formatting,

9
00:00:33,589 --> 00:00:37,519
it contains no extra information; it's simply
text.

10
00:00:37,519 --> 00:00:39,559
There might be an XLS file.

11
00:00:39,559 --> 00:00:45,519
And all these file extensions serve the purpose
of telling us what program we want to use

12
00:00:45,519 --> 00:00:47,299
to open that file.

13
00:00:47,299 --> 00:00:50,820
So to open the file, you have to know its
complete name.

14
00:00:50,820 --> 00:00:55,510
So we're not going to have a nice graphical
user interface for our programs, at least

15
00:00:55,510 --> 00:00:58,569
not initially, that allows us to select the
file.

16
00:00:58,569 --> 00:01:04,199
Instead we're going to ask you or the user
at the console, to specify the file name;

17
00:01:04,199 --> 00:01:07,479
and the filename includes the extension.

18
00:01:07,479 --> 00:01:13,431
So whereas in Windows you might look at the
files and see file without an extension, in

19
00:01:13,431 --> 00:01:17,920
reality there's probably an extension that
Windows is hiding for you.

20
00:01:17,920 --> 00:01:22,009
So the real filename would be something like
file dot TXT.

21
00:01:22,009 --> 00:01:26,770
In addition we know that the file system is
organized in directories and you might know

22
00:01:26,770 --> 00:01:30,880
these as folders on your operating system.

23
00:01:30,880 --> 00:01:36,649
In reality it's simply a list of files that
are contained inside that directory.

24
00:01:36,649 --> 00:01:41,340
And for simple purposes at least for now until
we get into complex operating systems concerns,

25
00:01:41,340 --> 00:01:43,729
the file exists in just one directory.

26
00:01:43,729 --> 00:01:47,950
And a directory can exist inside of another
directory and so on and so forth; we call

27
00:01:47,950 --> 00:01:51,640
this a hierarchical database, which we'll
talk about later.

28
00:01:51,640 --> 00:01:58,030
If you don't specify a directory when you're
opening a file, then the operating system

29
00:01:58,030 --> 00:02:01,310
assumes that you mean the current directory.

30
00:02:01,310 --> 00:02:04,859
Now the question then becomes what is the
current directory.

31
00:02:04,859 --> 00:02:08,819
And if we're working in Visual Studio and
we try and open up a file then the current

32
00:02:08,819 --> 00:02:12,890
directory is wherever we have stored our dot
CPP file.

33
00:02:12,890 --> 00:02:18,310
If we're running an executable program then
the current directory is most likely where

34
00:02:18,310 --> 00:02:20,530
that executable program is.

35
00:02:20,530 --> 00:02:23,340
So this brings up a little bit of diversity.

36
00:02:23,340 --> 00:02:28,390
If we run the program inside Visual Studio,
it's going to look in the current directory

37
00:02:28,390 --> 00:02:33,430
for any files you want to open and that current
directory is the dot CPP file.

38
00:02:33,430 --> 00:02:39,660
But if we then produce the EXE the executable
program and run it manually through windows

39
00:02:39,660 --> 00:02:42,240
explorer,
it's going to be looking in a different directory

40
00:02:42,240 --> 00:02:45,980
because the EXE and the CPP files are not
in the same place.

41
00:02:45,980 --> 00:02:50,670
So you kind of have to keep track of where
you expect your programs to look for these

42
00:02:50,670 --> 00:02:53,340
files and you have to put them in the right
place.

43
00:02:53,340 --> 00:02:57,209
Now of course if you don't want to do that,
you can specify another directory at least

44
00:02:57,209 --> 00:03:00,459
on Windows you can specify using a backslash.

45
00:03:00,459 --> 00:03:07,560
So you can start at the top of your C drive
and do backslash users backslash your name

46
00:03:07,560 --> 00:03:11,590
backslash so on and so forth and so on and
so forth and you can specify the entire full

47
00:03:11,590 --> 00:03:14,650
path name for that file and then it will open
appropriately.

48
00:03:14,650 --> 00:03:17,980
Most of the time we're not going to be worried
about doing that so we're going to be looking

49
00:03:17,980 --> 00:03:19,010
at the current directory.

50
00:03:19,010 --> 00:03:24,060
And this holds true for Windows it holds true
for MacOS, Linux whatever you're using.

51
00:03:24,060 --> 00:03:27,910
Now the other problem about this is that files
can be locked.

52
00:03:27,910 --> 00:03:34,469
So if a file is in use by one program, it
can't be used by another program at the same

53
00:03:34,469 --> 00:03:39,540
time; and this is to protect the consistency
of the data inside that file.

54
00:03:39,540 --> 00:03:44,209
Now the only exception to that rule is that
if both programs want to read the file as

55
00:03:44,209 --> 00:03:47,570
input, both programs can have access to that
file.

56
00:03:47,570 --> 00:03:52,900
So we have what's called a locking system:
there's a lock to prohibit reading of a file

57
00:03:52,900 --> 00:03:54,849
that's being written to, and that's really
what it amounts to.

