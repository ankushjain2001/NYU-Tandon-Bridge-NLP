1
00:00:00,070 --> 00:00:03,699
Alright, now I’d like to show what we can
do with something a little bit more complex;

2
00:00:03,699 --> 00:00:09,010
maybe for an input file. We can take a look
at this input file and it has some student

3
00:00:09,010 --> 00:00:15,559
IDs and test scores and names associated with
each other and tab characters in there. And,

4
00:00:15,559 --> 00:00:19,820
let’s imagine that we were given this file
and you can imagine it’s a much bigger file

5
00:00:19,820 --> 00:00:26,359
than it is, but we have guaranteed in column
one student IDs and in column two we have

6
00:00:26,359 --> 00:00:29,660
student test scores and in column three we
have the students name. And what we’d like

7
00:00:29,660 --> 00:00:35,570
to do maybe is order these by test score or
we like to find out all the students who had

8
00:00:35,570 --> 00:00:43,020
a test score higher than 90. So, lets load
this data into a vector inside C++, and then

9
00:00:43,020 --> 00:00:48,199
we can start to work on it. So just keep that
format in mind: student ID on the first column,

10
00:00:48,199 --> 00:00:52,180
test score on the second column, and student
name on the third column. And what I’m gonna

11
00:00:52,180 --> 00:00:57,379
do is create an object; so, now we have the
ability to create an object and I’ll do

12
00:00:57,379 --> 00:01:03,329
this easily, I’ll just do it as a struct.
And here we go: Student and we’ll say that

13
00:01:03,329 --> 00:01:09,590
the integer; we have an ID that’s an integer
we have test score and we have a string that’s

14
00:01:09,590 --> 00:01:12,670
the students name.
So that’s the format of the file and I can

15
00:01:12,670 --> 00:01:18,880
create a vector of students, call that VS.
S now I've got a vector of students and I’m

16
00:01:18,880 --> 00:01:22,829
gonna create one student, again, so this is
going to be my temporary student. Now when

17
00:01:22,829 --> 00:01:27,080
I go to read in, I’ve already opened the
input file using my open input file function

18
00:01:27,080 --> 00:01:34,189
that you saw previously. And I’ll go ahead
and read in into the temp dot ID, and I know

19
00:01:34,189 --> 00:01:39,510
that I’m going to have to do that inside
of a while loop because this is going to happen

20
00:01:39,510 --> 00:01:43,729
over and over and over again. Now once I’ve
done that, I’ve guaranteed that I’ve got

21
00:01:43,729 --> 00:01:48,270
a student. And I know that some of you might
ask the question of what happens if the file

22
00:01:48,270 --> 00:01:52,050
is corrupt; my answer is that if the file
is corrupt you really can’t do anything.

23
00:01:52,050 --> 00:01:57,460
So we’re assuming that the file is complete
and that on every line we have a student ID,

24
00:01:57,460 --> 00:02:02,830
a test score, and a student’s name. So,
if we read in into the ID, we then still have

25
00:02:02,830 --> 00:02:08,140
the additional problem of reading in the student’s
test score and then we have the problem of

26
00:02:08,140 --> 00:02:10,800
the name.
So, now I’ve filled in the temp ID and I’ve

27
00:02:10,800 --> 00:02:15,510
filled in the temp test score, but the problem
is going to be that this name contains multiple

28
00:02:15,510 --> 00:02:20,800
breaks. Now we remember that in a read-in
operation, we read in valid characters and

29
00:02:20,800 --> 00:02:26,760
we stop when we reach trailing white space,
like tab character, or we reach an invalid

30
00:02:26,760 --> 00:02:30,100
character and we’re gonna say that we’re
not gonna reach any invalid characters anywhere

31
00:02:30,100 --> 00:02:36,440
on this file. But how do we go about reading
in an entire name? So we’ve read in, let’s

32
00:02:36,440 --> 00:02:41,430
say, the first student ID, and we’ve read
in the first test score. And the file pointer

33
00:02:41,430 --> 00:02:45,590
is now sitting at this point because it stopped
when it reached trailing white space, and

34
00:02:45,590 --> 00:02:50,570
what we’d like to do is read in this. And
that looks simple; it looks like two names.

35
00:02:50,570 --> 00:02:55,400
The only problem is that if you look carefully
at some of these lines, it’s not two names,

36
00:02:55,400 --> 00:02:59,570
its three or perhaps even more names. But
the problem is that we’re going to have

37
00:02:59,570 --> 00:03:04,130
to read in basically the rest of the line.
So, what I want to do is go ahead and read

38
00:03:04,130 --> 00:03:09,640
in the whole line, starting from the point
where we left of, which was the end of the

39
00:03:09,640 --> 00:03:14,290
test score and going to the end of that line.
And I have a function for doing that; it’s

40
00:03:14,290 --> 00:03:19,780
called getLine. And I can give it the in file
and I can give it temp dot name and it will

41
00:03:19,780 --> 00:03:25,970
read in the rest of the line.
Now I know that getLine seems to describe

42
00:03:25,970 --> 00:03:31,160
that it gets the entire line but in fact getLine
begins reading from the point where you left

43
00:03:31,160 --> 00:03:36,270
off. And that might include that tab character
there; in fact, it probably will include that

44
00:03:36,270 --> 00:03:41,570
tab character. So what we might do instead
is before we do that we can either get the

45
00:03:41,570 --> 00:03:45,640
one character, which is the tab character,
or what we can do is that if we know they’re

46
00:03:45,640 --> 00:03:51,380
tab characters, we can tell it to skip the
tab character by saying inFile dot ignore.

47
00:03:51,380 --> 00:03:56,740
And inFile dot ignore needs first a number
of characters that we’re gonna skip and

48
00:03:56,740 --> 00:04:00,770
we know this is just going to be one character,
but we’ll put in nine thousand nine hundred

49
00:04:00,770 --> 00:04:04,200
and ninety-nine, just for the sake of putting
it in. And it’ll stop when it reaches that

50
00:04:04,200 --> 00:04:09,040
first character that it should ignore. So,
it’ll stop either at ten thousand characters,

51
00:04:09,040 --> 00:04:12,880
nine thousand nine hundred ninety-nine characters,
or it’ll stop when it reaches the first

52
00:04:12,880 --> 00:04:17,420
tab character. And what that’ll do is that
it’ll skip over this tab character and then

53
00:04:17,420 --> 00:04:21,610
getLine will read in the rest of the line.
Of course, I’ve only read into temp and

54
00:04:21,610 --> 00:04:26,650
now it’s necessary to go in and push back
everything onto the vector.

55
00:04:26,650 --> 00:04:31,980
So I’m gonna have push back temp onto the
vector, and when I finish with that I should

56
00:04:31,980 --> 00:04:39,880
be able to write a simple for loop that gets
the student and we can test to see if S test

57
00:04:39,880 --> 00:04:44,960
score, we said greater than 90, and if it
is then we can output the students name. I’m

58
00:04:44,960 --> 00:04:50,160
gonna go ahead and put in a little description
here, and let’s go ahead and run that. Okay.

59
00:04:50,160 --> 00:04:55,250
Looks good. Input two dot TXT. And you can
see that students with test scores over 90

60
00:04:55,250 --> 00:04:59,950
are Daniel Katz, George Washington, and E.
F. Johnson. And if we take a look, that is

61
00:04:59,950 --> 00:05:05,990
correct; it looks correct. We did not have
John H. Jones because John H. Jones was not

62
00:05:05,990 --> 00:05:11,020
over 90, he was 90. But that’s perfect;
that’s exactly what we expected. So, what

63
00:05:11,020 --> 00:05:15,560
we’re doing is we’re reading in the individual
items; so, we’re saying we’ve seen an

64
00:05:15,560 --> 00:05:19,390
ID, once we’ve seen the id we know there
will be a test score, and we know that there

65
00:05:19,390 --> 00:05:22,850
will be a tab character, and we know that
there will be a name. And we don’t know

66
00:05:22,850 --> 00:05:27,280
how many items there are in the name but we’ll
go ahead and grab that and push it back onto

67
00:05:27,280 --> 00:05:30,449
the vector and then once it’s in the vector
we can start working with it. So that’s

68
00:05:30,449 --> 00:05:34,820
an easy way to start working with a lot of
files; files with a lot of data in them. If

69
00:05:34,820 --> 00:05:39,650
you don’t need the getLine, you can just
read in straight into temp ID, temp dot test

70
00:05:39,650 --> 00:05:44,730
score, and stuff like that. You can keep read
in operations, you can tie the read in operations

71
00:05:44,730 --> 00:05:49,110
together. So, you might do something a little
bit more insightful like that; that would

72
00:05:49,110 --> 00:05:54,000
work as well. Okay, you don’t have to but
you could; I like to do it just this way but

73
00:05:54,000 --> 00:05:58,380
whatever works for you, works. So that’s
the way we can read in a large amount of input

74
00:05:58,380 --> 00:05:59,841
information and begin processing it.

