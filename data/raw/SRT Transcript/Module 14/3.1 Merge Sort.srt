1
00:00:00,590 --> 00:00:06,220
The second sorting algorithm we're going to
talk about is called merge-sort; it is a recursive

2
00:00:06,220 --> 00:00:08,620
algorithm, a recursive sorting algorithm.

3
00:00:08,620 --> 00:00:16,060
We can think of, again a few approaches to
recursively sort a sequence of numbers, but

4
00:00:16,060 --> 00:00:18,060
let me show you how merge-sort works.

5
00:00:18,060 --> 00:00:23,880
So for example we have this array of numbers:
fourteen, five, eight, ten, thirteen, one,

6
00:00:23,880 --> 00:00:27,380
eighteen, and three, and we want to sort it.

7
00:00:27,380 --> 00:00:33,780
One way of doing it is to have a three step
process.

8
00:00:33,780 --> 00:00:40,170
First step, would be, would say let's store,
let's sort, recursively the first half of

9
00:00:40,170 --> 00:00:44,329
the numbers: fourteen, five, eight, and ten.

10
00:00:44,329 --> 00:00:50,469
Again it’s recursively, so our assumption
is that when we are trying to sort it, it

11
00:00:50,469 --> 00:00:55,789
would just do the job basically sort the elements
so it would reorder the elements in a sorted

12
00:00:55,789 --> 00:00:56,789
order.

13
00:00:56,789 --> 00:01:01,420
So, first step would reorder the first half
of the numbers to be sorted; kind of a magic,

14
00:01:01,420 --> 00:01:03,610
but okay, that's one part of the job.

15
00:01:03,610 --> 00:01:09,799
Step two, you can probably guess would say
sorts recursively the second half of the numbers,

16
00:01:09,799 --> 00:01:16,679
in this case: thirteen, one, eighteen, and
three, should be sorted in an increasing order.

17
00:01:16,679 --> 00:01:21,130
That would reorder them to be: one, three,
thirteen, eighteen.

18
00:01:21,130 --> 00:01:28,950
Now that we have two halves that each one
is sorted on its own, we would need to merge

19
00:01:28,950 --> 00:01:31,889
these two halves into one sorted sequence.

20
00:01:31,889 --> 00:01:37,020
So step three would say you merge these two
halves together into one sorted sequence.

21
00:01:37,020 --> 00:01:43,819
So after doing step three, we would have the
numbers all sorted together: one, three, five,

22
00:01:43,819 --> 00:01:45,729
eight, ten, thirteen, fourteen, eighteen.

23
00:01:45,729 --> 00:01:47,679
Let's do it one more time.

24
00:01:47,679 --> 00:01:50,539
Step one: sort the first half of the numbers.

25
00:01:50,539 --> 00:01:54,619
Step two: sort the second half of the numbers.

26
00:01:54,619 --> 00:02:01,819
And step three: combine these two sorted halves
into one sorted sequence.

27
00:02:01,819 --> 00:02:05,139
Cool; not very intuitive.

28
00:02:05,139 --> 00:02:09,319
But yeah, actually that that's a recursive
algorithm.

29
00:02:09,319 --> 00:02:15,969
We’ll implement it first and after that
we'll try to trace the execution and see how

30
00:02:15,969 --> 00:02:20,540
the recursion here unfolds into sorting the
entire array.

31
00:02:20,540 --> 00:02:22,559
Let's go ahead and implement.

