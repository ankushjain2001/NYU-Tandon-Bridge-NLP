1
00:00:00,420 --> 00:00:07,270
I recognize that if we're using virtual memory
and/or paging, then we can understand that

2
00:00:07,270 --> 00:00:13,070
we can share structures; we can share portions
of a process.

3
00:00:13,070 --> 00:00:18,110
And the way that we can do that is quite simple:
we can just have duplicate entries, duplicate

4
00:00:18,110 --> 00:00:20,970
frame number entries in a page map table.

5
00:00:20,970 --> 00:00:27,160
So, since the code doesn't change, for example,
if we opened up five copies of Chrome would

6
00:00:27,160 --> 00:00:32,050
we need five different copies of the code
for Chrome.

7
00:00:32,050 --> 00:00:34,179
The answer is no, not necessarily.

8
00:00:34,179 --> 00:00:39,469
The operating system may be smart enough,
may be capable, of recognizing that multiple

9
00:00:39,469 --> 00:00:44,980
copies of the same program are running and
it will share the code pages, not the data

10
00:00:44,980 --> 00:00:51,569
pages, not the context, just the code pages
of that process because the code is not going

11
00:00:51,569 --> 00:00:57,789
to change from one process to the next process
as long as they are the same program.

12
00:00:57,789 --> 00:01:03,639
So, if we're running Chrome twice, we should
probably only load it's code once; it will,

13
00:01:03,639 --> 00:01:09,530
each copy will have a different data section
but who cares because at least we're saving

14
00:01:09,530 --> 00:01:11,920
the memory for the code.

15
00:01:11,920 --> 00:01:19,590
Now there's also the possibility that a process
will want to share data pages, but unfortunately

16
00:01:19,590 --> 00:01:25,840
if we're going to share data pages any changes
to those data pages have to result in a duplications

17
00:01:25,840 --> 00:01:31,329
of those pages of data; not necessarily the
entire portion of data but just those pages

18
00:01:31,329 --> 00:01:32,329
that are going to change.

19
00:01:32,329 --> 00:01:36,960
So, even if you're just changing one byte
inside a page, we have to make an entire copy

20
00:01:36,960 --> 00:01:38,179
of the page.

21
00:01:38,179 --> 00:01:43,619
Now this is what's called copy on write, or
cow, and it allows the sharing of the pages.

22
00:01:43,619 --> 00:01:49,890
The page table is now extended to the to have
a read only attribute and if the page is marked

23
00:01:49,890 --> 00:01:54,600
as read only any attempt to change that page
is going to result in a call to the operating

24
00:01:54,600 --> 00:01:55,600
system.

25
00:01:55,600 --> 00:02:00,109
And the operating system can then say this
process is trying to change a page which has

26
00:02:00,109 --> 00:02:01,969
COW enabled.

27
00:02:01,969 --> 00:02:07,950
And when we change that page the operating
system will make a duplications of just that

28
00:02:07,950 --> 00:02:14,230
page, update the appropriate page map tables,
unsetting the read only bit and then re running

29
00:02:14,230 --> 00:02:15,230
the instruction.

30
00:02:15,230 --> 00:02:20,950
So, that the the operating system can intervene
only of course when necessary, make the copy

31
00:02:20,950 --> 00:02:27,010
of the page, and then the processes can run
again not realizing that the pages are now

32
00:02:27,010 --> 00:02:27,650
separate and different.

