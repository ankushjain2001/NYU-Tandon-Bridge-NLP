1
00:00:00,690 --> 00:00:03,400
Now that we understand how we can overload
these operators.

2
00:00:03,400 --> 00:00:07,420
we have to take a look into what the operator
returns, so what's it going to do when it's

3
00:00:07,420 --> 00:00:13,559
done the value that's returned really depends
on what the operator is going to do.

4
00:00:13,559 --> 00:00:20,050
So the plus operator for example is going
to return back the sum of the two operands;

5
00:00:20,050 --> 00:00:24,880
it doesn't change either operand we said that
before, we're not going to change A or B.

6
00:00:24,880 --> 00:00:30,230
If we do A plus B, but instead we're going
to return back a new value which is the sum

7
00:00:30,230 --> 00:00:35,820
of A and B, whatever that means because we
haven't defined what data types A and B are.

8
00:00:35,820 --> 00:00:42,409
Here we have a little bit of a rule in that
we the return data type, really depends on

9
00:00:42,409 --> 00:00:43,910
what's being returned of course.

10
00:00:43,910 --> 00:00:50,030
If the item that's being returned was created
inside the function, then the return has to

11
00:00:50,030 --> 00:00:51,409
be by value.

12
00:00:51,409 --> 00:00:58,700
So in the plus operator we add together two
operands A and B. In order to do that we have

13
00:00:58,700 --> 00:01:02,819
to in the plus function, in the operator plus
function, we're going to have to create a

14
00:01:02,819 --> 00:01:08,010
temporary object, store the value that's in
A and add the value that's in B, and then

15
00:01:08,010 --> 00:01:10,610
return that temporary object.

16
00:01:10,610 --> 00:01:15,530
So we've created an item; we've created something
inside the function and now we want to return

17
00:01:15,530 --> 00:01:16,530
it.

18
00:01:16,530 --> 00:01:19,520
The only choice we have is to return by value.

19
00:01:19,520 --> 00:01:23,340
But if we're returning something that was
passed in as a parameter.

20
00:01:23,340 --> 00:01:29,580
So for example, we have the plus equal operator;
the plus equal operator instead of returning

21
00:01:29,580 --> 00:01:35,690
the just the sum of the two items, now we're
expecting that we're returning the left hand

22
00:01:35,690 --> 00:01:36,870
side item.

23
00:01:36,870 --> 00:01:43,330
So A plus equal B would return A, and that's
something that existed prior to the function

24
00:01:43,330 --> 00:01:44,330
call.

25
00:01:44,330 --> 00:01:47,170
We didn't create it; it existed prior to the
function call.

26
00:01:47,170 --> 00:01:51,210
So the return line is probably going to look
something like return star this, thereâ€™s

27
00:01:51,210 --> 00:01:53,260
another use for this.

28
00:01:53,260 --> 00:01:58,650
And in doing so we recognize that we could
create another copy of this object, but the

29
00:01:58,650 --> 00:02:03,920
time it takes to create the other copy and
the duplications of the data uses more memory

30
00:02:03,920 --> 00:02:06,050
is a waste of time and memory.

31
00:02:06,050 --> 00:02:11,600
So what we'd rather do is return by reference,
because now we don't have to do the copy and

32
00:02:11,600 --> 00:02:15,370
do use up the extra memory instead we can
just return by reference.

33
00:02:15,370 --> 00:02:19,230
Returning by reference is really the preferred
mechanism.

34
00:02:19,230 --> 00:02:24,320
But in order to do that the object that we
are returning has to have existed prior otherwise

35
00:02:24,320 --> 00:02:29,030
or returning a reference to something that
will no longer exist at the end of the function

36
00:02:29,030 --> 00:02:31,780
because it was created inside the function.

37
00:02:31,780 --> 00:02:37,150
So if we created it, returned by value; if
it was passed into us or existed before, return

38
00:02:37,150 --> 00:02:38,240
by reference.

39
00:02:38,240 --> 00:02:38,900
And that's what to return.

