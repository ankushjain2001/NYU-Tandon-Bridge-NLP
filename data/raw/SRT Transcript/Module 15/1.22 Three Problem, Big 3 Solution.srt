1
00:00:00,690 --> 00:00:03,390
Now that we’ve seen the problem, let's take
a look at the solution.

2
00:00:03,390 --> 00:00:07,480
Well we're going to need to overload; we're
going to need to change copy operations.

3
00:00:07,480 --> 00:00:13,450
The copy operations need to copy the data
and not the pointers, and that's what is really

4
00:00:13,450 --> 00:00:15,700
the solution to this problem.

5
00:00:15,700 --> 00:00:20,790
Since we're creating memory in the constructor,
we're going to need to also destroy that memory

6
00:00:20,790 --> 00:00:21,790
at some point.

7
00:00:21,790 --> 00:00:26,700
Now we haven't talked about this yet but if
you look back at the code when main ends,

8
00:00:26,700 --> 00:00:32,570
the data that was created on the heap isn't
ever released; we never call delete for that

9
00:00:32,570 --> 00:00:33,570
data.

10
00:00:33,570 --> 00:00:38,519
So really what we've got are a couple of problems
and the solution to that is what we call the

11
00:00:38,519 --> 00:00:39,519
Big Three.

12
00:00:39,519 --> 00:00:43,210
And the Big Three is a set of functions that
if we need any one of them were going to need

13
00:00:43,210 --> 00:00:47,739
them all, and that's almost with one hundred
percent certainty.

14
00:00:47,739 --> 00:00:53,699
There are very, very rare situations where
we might need one copy constructor, for example,

15
00:00:53,699 --> 00:00:58,949
we wanted one copy constructor and not need
the other two but it's very, very rare.

16
00:00:58,949 --> 00:01:02,120
So we call them the big three because if you're
going to, if you realize you need any one

17
00:01:02,120 --> 00:01:04,659
of them you better create all three of them.

18
00:01:04,659 --> 00:01:09,910
The destructor is just like a constructor
but the exact opposite; the destructor is

19
00:01:09,910 --> 00:01:13,560
called automatically when the object falls
out of scope.

20
00:01:13,560 --> 00:01:17,600
So at the end of a function call when the
object is no longer going to be used, the

21
00:01:17,600 --> 00:01:18,930
destructor is called automatically.

22
00:01:18,930 --> 00:01:23,920
In the same way that the constructor was called
when you created this thing, the destructor

23
00:01:23,920 --> 00:01:26,890
is going to be called when it's no longer
in use.

24
00:01:26,890 --> 00:01:31,670
We also have the copy constructor, which is
useful if we want to create an object based

25
00:01:31,670 --> 00:01:36,510
on another object; so we might have a copy
constructor for the date class that takes

26
00:01:36,510 --> 00:01:38,130
in an existing date.

27
00:01:38,130 --> 00:01:43,200
And the assignment operators, the third one,
it copies one object to another copy and it

28
00:01:43,200 --> 00:01:45,600
does that sort of deep copy.

29
00:01:45,600 --> 00:01:50,082
So here we have to be very careful because
in a lot of situations that we're going to

30
00:01:50,082 --> 00:01:55,430
run across, what we have to do first is clear
out the left hand side object.

31
00:01:55,430 --> 00:01:59,270
So we might have to empty everything out the
left hand side object.

32
00:01:59,270 --> 00:02:04,011
And there is one situation that the assignment
operator has to take into account and that

33
00:02:04,011 --> 00:02:06,140
is self-assignment.

34
00:02:06,140 --> 00:02:11,090
If the user is doing something very, very
silly and ends up writing something like X

35
00:02:11,090 --> 00:02:16,760
equals X, then clearing out the left hand
side object will accidentally clear out the

36
00:02:16,760 --> 00:02:19,650
right hand side that we're about to make a
copy of.

37
00:02:19,650 --> 00:02:24,460
And so that we've lost that information that
we had intended to make a copy of.

38
00:02:24,460 --> 00:02:29,650
To protect against that the code that we like
to use is just a simple if statement it’s:

39
00:02:29,650 --> 00:02:33,770
if this equal equal the address of RHS.

40
00:02:33,770 --> 00:02:38,500
And in doing that what we're doing is testing
to see if the this pointer is the same as

41
00:02:38,500 --> 00:02:42,130
the thing that we're about to copy, the pointer
to the thing that we're about to copy, and

42
00:02:42,130 --> 00:02:46,650
if those two are the same pointer then really
the pointing at the same object which means

43
00:02:46,650 --> 00:02:50,970
we really don't need to do any work we can
just return star this.

44
00:02:50,970 --> 00:02:58,020
So the big three is the solution to the problem
of dynamic memory, and I'll give you the code

45
00:02:58,020 --> 00:02:59,640
here to take a look at it.

46
00:02:59,640 --> 00:03:04,920
You can see the big three: the destructor,
the copy constructor and the assignment operator,

47
00:03:04,920 --> 00:03:10,170
are really just a couple of pieces of simple
code to take care of what has to be done in

48
00:03:10,170 --> 00:03:12,630
terms of a deep copy and in terms of destruction
of the object.

