0:00:00.060,0:00:06.100
If we take a minute to compare these two implementations
of the counting up program.

0:00:06.100,0:00:11.150
One using the while loop the other using the
for loop weâ€™ll see ok so obviously they

0:00:11.150,0:00:13.720
both read an n from the user.

0:00:13.720,0:00:19.080
But we see that they both implemented the
same idea of maintaining a counter initialize

0:00:19.080,0:00:25.460
to one and repeating print statement of the
current value of counter and increasing it

0:00:25.460,0:00:27.490
over and over four times.

0:00:27.490,0:00:34.110
The difference as you can see is the location
or the way this counter is basically managed

0:00:34.110,0:00:35.770
in each program.

0:00:35.770,0:00:42.600
So they both initialized counter they both
go up to when counter is less or equal to

0:00:42.600,0:00:43.600
four.

0:00:43.600,0:00:47.120
They both repeat printing the value of counter
and incrementing it.

0:00:47.120,0:00:55.780
In the while loop the management of this counter
is split into three locations one for initializing

0:00:55.780,0:00:59.960
one for checking the condition and another
for the increment.

0:00:59.960,0:01:06.710
Where in the for loop they are all kind of
binded together in the for loop header where

0:01:06.710,0:01:11.960
we do all the management of counter in a single
location in a single place.

0:01:11.960,0:01:18.670
We initialize we check the condition and we
increment all at the same place.

0:01:18.670,0:01:27.140
That is one of the advantages of a for loop
over a while that it is in that way more readable

0:01:27.140,0:01:34.079
to a programmer that you can easily see how
this loop is basically managed.