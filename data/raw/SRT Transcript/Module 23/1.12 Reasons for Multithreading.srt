1
00:00:00,570 --> 00:00:04,670
I'd like to take a look at some reasons why
we would use multithreading, and some of these

2
00:00:04,670 --> 00:00:09,719
are rather obvious and you're to see them
in in your regular day to day use of your

3
00:00:09,719 --> 00:00:11,009
computer.

4
00:00:11,009 --> 00:00:14,950
Sometimes you might have foreground and background
activity; the perfect example I love to use

5
00:00:14,950 --> 00:00:19,539
is Microsoft Word, because it's one that we've
all used a million times.

6
00:00:19,539 --> 00:00:24,619
And Microsoft Word is broken down into a really
large number of threads, but just the few

7
00:00:24,619 --> 00:00:29,019
that we might pay attention to are that we
might have a thread that's taking in input

8
00:00:29,019 --> 00:00:34,070
from the keyboard, and it takes in whatever
the user types and it stores it in main memory

9
00:00:34,070 --> 00:00:36,989
in what we would call a document.

10
00:00:36,989 --> 00:00:41,300
And there's another thread that takes the
that main memory from the document and puts

11
00:00:41,300 --> 00:00:45,539
it onto the screen; print it in the appropriate
way, formats it, makes it look nice based

12
00:00:45,539 --> 00:00:46,880
on the font.

13
00:00:46,880 --> 00:00:50,860
And then there might be another thread that
goes through and checks the document and underlines

14
00:00:50,860 --> 00:00:55,899
everything in green or red according to whether
or not it's spelled correctly.

15
00:00:55,899 --> 00:00:58,890
And then another thread that goes through
and checks the grammar.

16
00:00:58,890 --> 00:01:03,720
And then we might have another thread that
sits in the background and waits for ten minutes,

17
00:01:03,720 --> 00:01:08,670
and when that ten minute timer is up that
thread will save the document in some temporary

18
00:01:08,670 --> 00:01:11,810
location just in case your computer loses
power.

19
00:01:11,810 --> 00:01:16,540
So, there's a lot of foreground and background
activity that's happening inside something

20
00:01:16,540 --> 00:01:18,420
like Microsoft Word.

21
00:01:18,420 --> 00:01:23,740
We might also look at Microsoft Excel, because
it's another one that we've used quite frequently.

22
00:01:23,740 --> 00:01:32,150
And the act of changing one cell inside Microsoft
Excel can cause a cascading change throughout

23
00:01:32,150 --> 00:01:38,030
the entire spreadsheet when that one cell
changes there's threads that go out and change

24
00:01:38,030 --> 00:01:42,340
all the other threads that are related to,
all the other cells, that are related to that

25
00:01:42,340 --> 00:01:43,340
one cell.

26
00:01:43,340 --> 00:01:46,020
So, then again there's a lot of foreground
background activity.

27
00:01:46,020 --> 00:01:48,869
There's asynchronous in synchronous processing.

28
00:01:48,869 --> 00:01:55,579
So, if processing has to be done or if processing
can be done synchronously we can create multiple

29
00:01:55,579 --> 00:01:58,320
threads to deal with the synchronous processing.

30
00:01:58,320 --> 00:02:03,580
So, if we have a very large data set and we'd
like to process portions of it separately,

31
00:02:03,580 --> 00:02:08,850
we can process those portions separately using
multiple threads.

32
00:02:08,850 --> 00:02:15,020
And a block that happens in one thread will
not obscure the other thread from running.

33
00:02:15,020 --> 00:02:19,330
We might also have asynchronous processing,
where the threads need to do some sort of

34
00:02:19,330 --> 00:02:24,550
work cohesively so that when one thread ends
the next thread begins.

35
00:02:24,550 --> 00:02:30,930
We might have infrequent tasks, where one
thread doesn't run very often; as my example

36
00:02:30,930 --> 00:02:36,890
of Microsoft Word and the saving every ten
minutes is an example of infrequent tasks.

37
00:02:36,890 --> 00:02:44,150
Speed reading, here we have a problem where
each thread that does a read operation on

38
00:02:44,150 --> 00:02:48,930
the file system is going to be blocked because
that's going to take a very long time, so

39
00:02:48,930 --> 00:02:51,350
the operating system is going to block that
thread.

40
00:02:51,350 --> 00:02:55,760
Now the interesting part about threads is
that blocking one thread, doesn't block the

41
00:02:55,760 --> 00:02:58,030
rest of the threads in the same process.

42
00:02:58,030 --> 00:03:03,560
So, we can have one thread whose responsibility
it is to read all the data from the file system

43
00:03:03,560 --> 00:03:08,680
and bring it into main memory, and another
thread whose responsibility it is to process

44
00:03:08,680 --> 00:03:10,940
that data, and this is called Speed Reading.

45
00:03:10,940 --> 00:03:17,350
So, we're pausing only to deal with the IO
operation but at the same time when the IO

46
00:03:17,350 --> 00:03:23,140
operation is causing us to pause, we're continuing
to process data that's already been brought

47
00:03:23,140 --> 00:03:24,140
in.

48
00:03:24,140 --> 00:03:29,340
And then it also creates a more modular program
structure where we can break down a larger

49
00:03:29,340 --> 00:03:35,970
program into smaller portions and we can deal
with each of the portions independently, as

50
00:03:35,970 --> 00:03:38,390
if they were basically their own program.

51
00:03:38,390 --> 00:03:42,600
But they're still working on one goal which
is to deal with this memory or to deal with

52
00:03:42,600 --> 00:03:44,190
this process as a whole.

