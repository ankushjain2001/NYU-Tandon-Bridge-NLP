1
00:00:00,610 --> 00:00:05,420
We will now show how to execute this MIPS
code in table representative of the components

2
00:00:05,420 --> 00:00:06,800
of the CPU.

3
00:00:06,800 --> 00:00:11,400
So the table has the following columns: an
instruction column that lists the instructions

4
00:00:11,400 --> 00:00:16,139
in MIPS mnemonic format; a PC column, where
PC stands for program counter.

5
00:00:16,139 --> 00:00:20,540
The Program Counter is a special register
in the CPU that holds the address of the next

6
00:00:20,540 --> 00:00:21,990
instruction to execute.

7
00:00:21,990 --> 00:00:26,550
Then, there is a column for each register
used in the MIPS mnemonic code.

8
00:00:26,550 --> 00:00:32,500
Since our example uses registers R8, R9, and
R10, there is a column for each.

9
00:00:32,500 --> 00:00:35,650
There is also a column for each data in the
data segment.

10
00:00:35,650 --> 00:00:39,360
Since there are 3 pieces of data in the data
segment, there are three columns and we use

11
00:00:39,360 --> 00:00:41,670
their addresses to label each.

12
00:00:41,670 --> 00:00:46,810
The last column is a memory access column
to indicate what kinds of memory accesses

13
00:00:46,810 --> 00:00:48,820
the associated instruction makes.

14
00:00:48,820 --> 00:00:52,770
Since we are using the MIPS mnemonic format
for the table, the content of the table will

15
00:00:52,770 --> 00:00:57,850
be in hexadecimal, unless stated otherwise
using the subscript notation.

16
00:00:57,850 --> 00:01:01,510
The first column of the table is ALWAYS the
Initial column.

17
00:01:01,510 --> 00:01:06,950
This column illustrates the state of the CPU
before execution of our code.

18
00:01:06,950 --> 00:01:11,530
At the initial state, the data segment has
the original data of the variables in the

19
00:01:11,530 --> 00:01:12,530
code.

20
00:01:12,530 --> 00:01:17,310
So we write those values in their respective
columns in the table.

21
00:01:17,310 --> 00:01:23,180
In addition, during initialization the CPU
writes the address of first instruction in

22
00:01:23,180 --> 00:01:28,200
the Program Counter and writes the base address
of the data segment in the R8 register.

23
00:01:28,200 --> 00:01:33,240
Remember that the Program Counter stores the
address of the next instruction to execute.

24
00:01:33,240 --> 00:01:37,980
So since the next instruction to execute is
the first one, it make sense that PC has that

25
00:01:37,980 --> 00:01:41,160
address before any instruction is executed.

26
00:01:41,160 --> 00:01:46,330
Since we donâ€™t initialize the values of
the other registers, we set them as question

27
00:01:46,330 --> 00:01:47,690
marks.

28
00:01:47,690 --> 00:01:52,360
For each instruction, the first thing the
CPU does is it reads the instruction from

29
00:01:52,360 --> 00:01:57,170
the code segment; that is known as an instruction
fetch or instruction read.

30
00:01:57,170 --> 00:02:02,480
We concatenate it as INS read in the memory
access column.

31
00:02:02,480 --> 00:02:07,170
The CPU uses PC to get the address of the
instruction to fetch

32
00:02:07,170 --> 00:02:11,780
Since the Program Counter points to the address
of the next instruction, once an instruction

33
00:02:11,780 --> 00:02:15,880
is fetched, the Program Counter has to be
updated to point to the next instruction.

34
00:02:15,880 --> 00:02:21,250
Generally, this update is done by simply incrementing
the Program Counter by 4, because instructions

35
00:02:21,250 --> 00:02:22,920
are 4 bytes long.

36
00:02:22,920 --> 00:02:26,940
Later in this course, we will when Program
Counter is not always incremented by 4 due

37
00:02:26,940 --> 00:02:30,110
to branch and jump instructions.

38
00:02:30,110 --> 00:02:35,180
We then analyze the instruction to see what
it does and update the columns of the table

39
00:02:35,180 --> 00:02:36,650
accordingly.

40
00:02:36,650 --> 00:02:41,760
In our example, the instruction is a load
double instruction, where the base address

41
00:02:41,760 --> 00:02:47,070
of the data segment is in register R8, the
offset is 0, and the destination register

42
00:02:47,070 --> 00:02:48,070
is R9.

43
00:02:48,070 --> 00:02:52,069
So, the CPU first calculates the address of
the data in memory.

44
00:02:52,069 --> 00:02:55,720
This is done by adding the content of the
base register to the offset.

45
00:02:55,720 --> 00:03:00,970
Once the address is obtained, the CPU reads
the memory at that address to get the data.

46
00:03:00,970 --> 00:03:06,180
Since this is a memory access, we update the
memory access column to indicate a data read.

47
00:03:06,180 --> 00:03:12,030
Once the value data is obtained from memory,
the CPU writes it in the destination register.

48
00:03:12,030 --> 00:03:16,300
For all registers and memory locations that
are not modified by this instruction, we put

49
00:03:16,300 --> 00:03:19,069
an NS label to indicate Not Stored.

50
00:03:19,069 --> 00:03:23,510
In other words, this instruction does not
store anything in those registers and data

51
00:03:23,510 --> 00:03:26,639
locations and their values remain the same
as before.

