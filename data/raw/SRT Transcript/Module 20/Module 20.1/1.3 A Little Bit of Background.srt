1
00:00:00,520 --> 00:00:04,330
So, let’s cover a little bit of the background
on computer organization.

2
00:00:04,330 --> 00:00:08,040
This is just for us to get a flavor of what’s
inside of a CPU so we can get a better feel

3
00:00:08,040 --> 00:00:11,860
for how it executes the code that we write
in a language like C or C++.

4
00:00:11,860 --> 00:00:17,600
So, at a high-level, there are three main
hardware components inside of a CPU: the functional

5
00:00:17,600 --> 00:00:20,450
units, the registers, and the memory hierarchy.

6
00:00:20,450 --> 00:00:25,570
The functional units are hardware components
that perform logic, arithmetic, and other

7
00:00:25,570 --> 00:00:26,570
operations.

8
00:00:26,570 --> 00:00:31,380
Examples of functional units we may find are:
the Arithmetic Logic Unit , or ALU, which

9
00:00:31,380 --> 00:00:37,340
performs integer addition, subtraction and
logic operations such as AND, OR, XOR, etc;

10
00:00:37,340 --> 00:00:43,200
the floating Point Unit, or FPU, which performs
the same operations as the ALU, but for floating

11
00:00:43,200 --> 00:00:48,960
point data; the integer multiplication unit,
or IMUL, which performs integer multiplication

12
00:00:48,960 --> 00:00:53,070
and division; then there is the floating point
multiplication unit, of FMUL, which performs

13
00:00:53,070 --> 00:00:54,270
floating point multiplications and divisions.

14
00:00:54,270 --> 00:01:00,570
The General purpose registers or GPRS, are
components inside the CPU that hold the data

15
00:01:00,570 --> 00:01:02,390
for the functional units.

16
00:01:02,390 --> 00:01:06,780
So every data that a functional unit operates
on must first be located in a general purpose

17
00:01:06,780 --> 00:01:07,820
register.

18
00:01:07,820 --> 00:01:11,899
Similarly, once a functional unit finishes
an operation, it puts the result back in a

19
00:01:11,899 --> 00:01:13,979
general purpose register.

20
00:01:13,979 --> 00:01:17,220
The other important component in the CPU is
the memory hierarchy.

21
00:01:17,220 --> 00:01:22,179
This hierarchy includes the hard disk, your
main memory or RAM, and several other storage

22
00:01:22,179 --> 00:01:24,329
components known as caches.

23
00:01:24,329 --> 00:01:29,579
The memory hierarchy stores both the software
and the data of a given program and different

24
00:01:29,579 --> 00:01:32,840
levels of the hierarchy are used for different
purposes.

25
00:01:32,840 --> 00:01:38,439
For example, the hard disk is used for permanent
storage, the RAM and caches are used for temporary

26
00:01:38,439 --> 00:01:39,439
storage.

27
00:01:39,439 --> 00:01:43,520
We will cover specific aspects of the memory
hierarchy towards the end of the computer

28
00:01:43,520 --> 00:01:44,520
architecture section

29
00:01:44,520 --> 00:01:50,569
So, let us go through a simple example to
illustrate how these three main components

30
00:01:50,569 --> 00:01:52,320
work in concert.

31
00:01:52,320 --> 00:01:57,349
Let’s say we have a simple program, written
in C or C++, such as the one we have next

32
00:01:57,349 --> 00:01:58,500
to the Memory block.

33
00:01:58,500 --> 00:02:03,439
The crux of the code is to perform the addition
B+C and to put the result back in memory location

34
00:02:03,439 --> 00:02:09,399
of A. Since B and C are integer values 3 and
4 respectively, the ALU functional unit will

35
00:02:09,399 --> 00:02:10,399
be used.

36
00:02:10,399 --> 00:02:14,200
Remember that each data used by a functional
unit must first be available in a general

37
00:02:14,200 --> 00:02:15,200
purpose register.

38
00:02:15,200 --> 00:02:20,940
So the first operations of the CPU are to
move the data for B and C to general purpose

39
00:02:20,940 --> 00:02:21,940
registers.

40
00:02:21,940 --> 00:02:28,100
So, for the first operation to implement A
= B+C is to copy the value of B into a general

41
00:02:28,100 --> 00:02:29,580
purpose register.

42
00:02:29,580 --> 00:02:34,630
The second operation copies the value of C
into another general purpose register.

43
00:02:34,630 --> 00:02:39,880
At this point, both values are in registers
so the ALU can use them to do the addition.

44
00:02:39,880 --> 00:02:44,950
As we see here, in the operation, the ALU
performs the addition of 3+4 and puts the

45
00:02:44,950 --> 00:02:47,970
result back into a general purpose register.

46
00:02:47,970 --> 00:02:54,180
The last operation for this code is to copy
the value of the result register back into

47
00:02:54,180 --> 00:03:00,720
the memory location for A. So in total, we
have four operation to perform A = B+C. The

48
00:03:00,720 --> 00:03:06,000
first two operations copied the values of
B and C into the registers, because the functional

49
00:03:06,000 --> 00:03:09,610
units only operate on data that are in those
general purpose registers.

50
00:03:09,610 --> 00:03:15,170
The next operation performs the addition and
puts the result into a general purpose register,

51
00:03:15,170 --> 00:03:19,890
and the last operation copies the value of
the result from its register to memory.

52
00:03:19,890 --> 00:03:23,040
Later in this section, we will cover this
example in more intricate details

