[
    {
        "module_number": 1,
        "module_name": "Fundaments of System Hardware",
        "file_name": "1 - Fundaments of System Hardware.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Fundamentals of System Hardware",
                "slide_text": [
                    "Fundamentals of System Hardware",
                    ""
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Overview",
                "slide_text": [
                    "Overview",
                    "Definition of a computer\nTypes of computers\nWhat\u2019s inside a computer (macro view)\nWhat each component does\nCommonalities between components\nHow components communicate \nHow the CPU works\nThe memory hierarchy\nHard disks\nNetworking\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Definition",
                "slide_text": [
                    "Definition",
                    "The computer is an electromechanical device which takes input, does processing and produces output.\n"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Types of computers",
                "slide_text": [
                    "Types of computers",
                    "Mainframe\nServer\nDesktop\nLaptop\nTablet\nPortable phone"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Inside a computer",
                "slide_text": [
                    "Inside a computer"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "What\u2019s common between them?",
                "slide_text": [
                    "What\u2019s common between them?",
                    "All computers have:\nat least one Central Processing Unit (CPU) which is the \u201cbrain\u201d of the computer.\nMain memory where code and data is stored temporarily\nSecondary storage where information is stored permanently\nMost computers will have:\nA video graphic controller where images can be rendered for display on a screen\nA network interface for communications\nPeripheral interfaces (USB, Thunderbolt, Firewire, SCSI, etc)\n\n"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Communications between the devices",
                "slide_text": [
                    "Communications between the devices",
                    "Internal communications in a machine is done via a \u201cbus.\u201d\nA bus is a physical pathway for communication between two or more devices\nThe system bus is the main pathway between the CPU and main memory, but also carries data to and from Input and Output (IO) devices.\n"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "The CPU",
                "slide_text": [
                    "The CPU",
                    "The CPU is the \u201cbrain\u201d of the computer\nIt is a single piece of silicon in the form of a chip.\nThis is the only location where code is actually executed in the system.\nThe CPU only runs \u201cmachine language\u201d code.\nThe CPU operates on a \u201cfetch-decode-execute\u201d cycle.\nEach type of CPU has its own set of \u201cinstructions\u201d which is understands.\nEach CPU has a small amount of memory, call \u201cregisters\u201d which it uses to perform operations and store results.\nA CPU ay have a \u201ccache\u201d memory to perform more quickly.\n"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Machine-Language",
                "slide_text": [
                    "Machine-Language",
                    "Computers can only understand very basic commands like \nMove\nAdd\nSubtract\nMultiply\nCompare\nJump\netc\n The designer of the CPU puts the capability to perform these operations in the physical chip."
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Instruction set",
                "slide_text": [
                    "Instruction set",
                    "The designers of the CPU create a set of instructions that the CPU can perform.\nThis set of instructions, usually as small as 100, can each be represented by a numeric value.\nWhen the CPU receives a particular instruction, it performs that task.\n"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Fetch-Execute Cycle",
                "slide_text": [
                    "Fetch-Execute Cycle",
                    "The CPU performs a fetch to move the instruction from main memory into the CPU (specifically into an instruction register).\nIt then decodes the instruction, also moving in any additional data that might be necessary with that instruction\nIt then executes that instruction\nThis process repeats with the next instruction in the sequence\nThis whole process can take as little as about 0.00000001 seconds or about 10 nanoseconds. Meaning the CPU can process millions of instructions per second."
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Memory",
                "slide_text": [
                    "Memory",
                    "The Instruction, and all the data, has to come from somewhere.\nIn order for code to be executed, it has to be in a register built into the CPU\nWhy not just store everything in registers?  They are EXPENSIVE!\nAs memory gets faster, it tends to get more expensive. So we have a hierarchy\n\n\n\n"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 13,
                "slide_title": "The hierarchy",
                "slide_text": [
                    "The hierarchy",
                    "Registers (Nanosecond access time, but size measured in bytes)\nInstructions can be executed only here\nCache (Nanosecond access time, size measured in megabytes)\nUseful for the processor designers, not terribly useful for programmers\nRAM (10+ nanosecond access time, size measured in gigabytes)\nThis is where all of your code and data will be stored temporarily\nThis is known as volatile memory because it is all lost when the computer is off\nSecondary Storage(10 millisecond access time, size measured in terabytes)\nPermanent storage, your hard drive.\nTierterary storage (offline, size measured only by your imagination)\nUsed for backup or other information that doesn\u2019t need to be immediately accessible\n"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "RAM",
                "slide_text": [
                    "RAM",
                    "Known as RANDOM Access Memory because any  place in it can be accessed in the same amount of time (which is not necessarily true for older secondary storage).\nThis areas of memory is broken down into bytes, with each byte being able to be accessed independently of the others\nWhen the computer is turned off, everything in RAM is lost.\nWhen running a program, all the machine language instructions are brought into RAM and, one-by-one, pulled into the CPU by the fetch and execute cycle."
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "",
                "slide_text": [
                    ""
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Secondary Storage",
                "slide_text": [
                    "Secondary Storage",
                    "Secondary storage can usually be broken down into two types\nHard disk drive (HDD) also known as \u201cspinning\u201d drives.\nContain multiple magnetic material discs which rotate together at a constant velocity\nContain read heads which move to different radii on the disk\nAllow the system to access any position via it\u2019s three dimensional polar coordinates\nAccessing first the innermost radius then the outermost radius takes significantly longer than two adjacent radii.\nSize is usually measured in terabytes\nSolid State Disks\nContain a number of chips like USB flash drives.\nData is stored, electrically, in these chips\nAll data can be access in the same amount of time\nDue to cost, these drives a smaller than HDDs but perform much faster."
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "HDD vs. SSD",
                "slide_text": [
                    "HDD vs. SSD",
                    ""
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Networking",
                "slide_text": [
                    "Networking",
                    "The world is now globally connected\nData can come from anywhere as long as the data and we are connected to the same network.\nNetworks are interconnected via the Internet\n"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "Physical connections",
                "slide_text": [
                    "Physical connections",
                    "Types of connections\nCopper\nFiber\nWireless\nProtocols\nHow do we know when to start sending data?\nHow do we know who its from?\nHow do we know who its going to?\nTypes of physical connections\nEthernet \nWifi (802.11)\nATM\n\n"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "Packets",
                "slide_text": [
                    "Packets",
                    "Unlike a telephone, true connections on a network are rare.\nData is sent from a program to another program indirectly by using multiple protocols.\nGenerally there will be protocols for:\nEach application\nEach logical network\nEach physical network\nIn order to send data it is encapsulated into a packet and given to the application protocol, which then adds a header for information for the receiver to understand what\u2019s being sent.\nWhen the packet moves to the logical protocol, it too adds a header on top of the application layer\u2019s header.",
                    "Data-link Network Application DATA "
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "Layers we commonly use",
                "slide_text": [
                    "Layers we commonly use",
                    "Application\nHTTP \u2013 Hyper Text Transport Protocol\nSMTP \u2013 Simple Mail Transport Protocol\nIMAP \u2013 Internet Mail Access Protocol\nLogical (more formally called Network)\nUsually broken down into two layers\nConnection oriented vs. Connection less deals with the ordering and guarantee of delivery of packets\nUDP\nTCP\nGlobal delivery of packets\nInternet Protocol \u2013 IP\nPhysical\nOften adds a header and footer (to indicate the end)\nMostly concerned with local addressing and how to deal with eccentricities of the physical medium\nEthernet\n802.11\n"
                ]
            }
        ]
    },
    {
        "module_number": 2,
        "module_name": "Number Systems",
        "file_name": "2 - Number Systems.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Positional Number Systems",
                "slide_text": [
                    "Positional Number Systems"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText\nImages",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText\nImages",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n\n"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n\n",
                    ""
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n\n",
                    ""
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n72  101  108  108  111  32  87  111  114  108  100  33\n\n",
                    ""
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n72  101  108  108  111  32  87  111  114  108  100  33\n\n",
                    ""
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n72  101  108  108  111  32  87  111  114  108  100  33\n\n",
                    ""
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n72  101  108  108  111  32  87  111  114  108  100  33\n\n",
                    ""
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n72  101  108  108  111  32  87  111  114  108  100  33\n\n",
                    ""
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "Hello World!\t\t\t\n\n\n72  101  108  108  111  32  87  111  114  108  100  33\n\n"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number:\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number:\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "(120, 100, 200)"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "(120, 100, 200)",
                    "(255, 0, 210)"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "Digital Data",
                "slide_text": [
                    "Digital Data",
                    "(120, 100, 200)",
                    "(255, 0, 210)",
                    "(0, 130, 0)"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number:\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number:\nImages Images: matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo\nAudio",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number:\nImages: Matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels\nVideo\nAudio",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number:\nImages: Matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels\nVideo\nAudio",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages: Matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo: Sequence of images\nAudio",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages: Matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo: Sequence of images\nAudio",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages: Matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo: Sequence of images\nAudio: Sampled voltage levels",
                "slide_text": [
                    "Data in the computer\u2019s memory is represented using units that can each be in one of 2-states (0 or 1).\u000b\nData is represented digitally, using binary numbers \u000b\nKinds of data:\nNumbers: Represented in binary\nText: Each character is mapped to a number\nImages: Matrix of pixels\u2019 colors. Each \u000bcolor is represented as (R,G,B) levels \nVideo: Sequence of images\nAudio: Sampled voltage levels",
                    "Digital Data"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "Lets Count \u000bDecimal (base 10)",
                "slide_text": [
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "Lets Count \u000bDecimal (base 10)",
                "slide_text": [
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "  0  \n  ",
                "slide_text": [
                    "  0  \n  ",
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "  0  \n  1  \n  ",
                "slide_text": [
                    "  0  \n  1  \n  ",
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "  0  \n  1  \n  2  \n  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  ",
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  ",
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n  ",
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)",
                    "  11  \n  12  \n \u2026  \n  19  \n  "
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)",
                    "  11  \n  12  \n \u2026  \n  19  \n  20  \n  "
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)",
                    "  11  \n  12  \n \u2026  \n  19  \n  20  \n  21\n \u2026 "
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)",
                    "  11  \n  12  \n \u2026  \n  19  \n  20  \n  21\n \u2026 \n  99  "
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)",
                    "  11  \n  12  \n \u2026  \n  19  \n  20  \n  21\n \u2026 \n  99  \n100  "
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)",
                    "  11  \n  12  \n \u2026  \n  19  \n  20  \n  21\n \u2026 \n  99  \n100  \n101\n\u2026"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n  5  \n  6  \n  7  \n  8  \n  9  \n10  ",
                    "Lets Count \u000bDecimal (base 10)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9",
                    "  11  \n  12  \n \u2026  \n  19  \n  20  \n  21\n \u2026 \n  99  \n100  \n101\n\u2026"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "Lets Count \u000bbase 5",
                "slide_text": [
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "  0  ",
                "slide_text": [
                    "  0  ",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "  0  \n  1  ",
                "slide_text": [
                    "  0  \n  1  ",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "  0  \n  1  \n  2  ",
                "slide_text": [
                    "  0  \n  1  \n  2  ",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "  0  \n  1  \n  2  \n  3 ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 ",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  ",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                    "Lets Count \u000bbase 5"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                    "Lets Count \u000bbase 5",
                    "  21  \n  22  \n \u2026  \n  44  \n"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                    "Lets Count \u000bbase 5",
                    "  21  \n  22  \n \u2026  \n  44  \n100  "
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                    "Lets Count \u000bbase 5",
                    "  21  \n  22  \n \u2026  \n  44  \n100  "
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                    "Lets Count \u000bbase 5",
                    "  21  \n  22  \n \u2026  \n  44  \n100  \n101\n \u2026"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4  \n10\n11\n12\n13\n14\n20",
                    "Lets Count \u000bbase 5",
                    "Digits: 0, 1, 2, 3, 4",
                    "  21  \n  22  \n \u2026  \n  44  \n100  \n101\n \u2026"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "Lets Count \u000bOctal (base 8)",
                "slide_text": [
                    "Lets Count \u000bOctal (base 8)"
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "Lets Count \u000bOctal (base 8)",
                "slide_text": [
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7"
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "  0  \n    ",
                "slide_text": [
                    "  0  \n    ",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7"
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "  0  \n  1  ",
                "slide_text": [
                    "  0  \n  1  ",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7"
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  ",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  ",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7"
                ]
            },
            {
                "slide_number": 66,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7"
                ]
            },
            {
                "slide_number": 67,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7",
                    "  13\n  14\n  15\n  16\n  17\n  \n  \n \n  77  \n\n "
                ]
            },
            {
                "slide_number": 68,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7",
                    "  13\n  14\n  15\n  16\n  17\n  20\n  \n \n  77  \n\n "
                ]
            },
            {
                "slide_number": 69,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7",
                    "  13\n  14\n  15\n  16\n  17\n  20\n  21   \n \u2026  \n  77  \n\n "
                ]
            },
            {
                "slide_number": 70,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7",
                    "  13\n  14\n  15\n  16\n  17\n  20\n  21   \n \u2026  \n  77  \n100  \n "
                ]
            },
            {
                "slide_number": 71,
                "slide_title": "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                "slide_text": [
                    "  0  \n  1  \n  2  \n  3 \n  4\n  5\n  6\n  7  \n10\n11\n12",
                    "Lets Count \u000bOctal (base 8)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7",
                    "  13\n  14\n  15\n  16\n  17\n  20\n  21   \n \u2026  \n  77  \n100  \n \u2026"
                ]
            },
            {
                "slide_number": 72,
                "slide_title": "Lets Count \u000bBinary (base 2)",
                "slide_text": [
                    "Lets Count \u000bBinary (base 2)"
                ]
            },
            {
                "slide_number": 73,
                "slide_title": "Lets Count \u000bBinary (base 2)",
                "slide_text": [
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 74,
                "slide_title": "      0  \n      \n    \n    \n  \n  \n  \n  \n\n\n\n",
                "slide_text": [
                    "      0  \n      \n    \n    \n  \n  \n  \n  \n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 75,
                "slide_title": "      0  \n      1  \n    \n    \n  \n  \n  \n  \n\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    \n    \n  \n  \n  \n  \n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 76,
                "slide_title": "      0  \n      1  \n    10\n    \n  \n  \n  \n  \n\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    \n  \n  \n  \n  \n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 77,
                "slide_title": "      0  \n      1  \n    10\n    11\n  \n  \n  \n  \n\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  \n  \n  \n  \n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 78,
                "slide_title": "      0  \n      1  \n    10\n    11\n  100\n  \n  \n  \n\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  100\n  \n  \n  \n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 79,
                "slide_title": "      0  \n      1  \n    10\n    11\n  100\n  101\n  \n  \n\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  100\n  101\n  \n  \n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 80,
                "slide_title": "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  \n\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  \n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 81,
                "slide_title": "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 82,
                "slide_title": "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n1000\n\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n1000\n\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 83,
                "slide_title": "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n1000\n1001\n\n",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n1000\n1001\n\n",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 84,
                "slide_title": "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n1000\n1001\n1010\n\u2026",
                "slide_text": [
                    "      0  \n      1  \n    10\n    11\n  100\n  101\n  110\n  111\n1000\n1001\n1010\n\u2026",
                    "Lets Count \u000bBinary (base 2)",
                    "Digits: 0, 1"
                ]
            },
            {
                "slide_number": 85,
                "slide_title": "Lets Count \u000bHexadecimal (base 16)",
                "slide_text": [
                    "Lets Count \u000bHexadecimal (base 16)"
                ]
            },
            {
                "slide_number": 86,
                "slide_title": "0  \n  ",
                "slide_text": [
                    "0  \n  ",
                    "Lets Count \u000bHexadecimal (base 16)"
                ]
            },
            {
                "slide_number": 87,
                "slide_title": "0  \n1  ",
                "slide_text": [
                    "0  \n1  ",
                    "Lets Count \u000bHexadecimal (base 16)"
                ]
            },
            {
                "slide_number": 88,
                "slide_title": "0  \n1  \n2  ",
                "slide_text": [
                    "0  \n1  \n2  ",
                    "Lets Count \u000bHexadecimal (base 16)"
                ]
            },
            {
                "slide_number": 89,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "  9\n  \n  \n"
                ]
            },
            {
                "slide_number": 90,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  \n  \n"
                ]
            },
            {
                "slide_number": 91,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  \n"
                ]
            },
            {
                "slide_number": 92,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n\n"
                ]
            },
            {
                "slide_number": 93,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n\n"
                ]
            },
            {
                "slide_number": 94,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n"
                ]
            },
            {
                "slide_number": 95,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n"
                ]
            },
            {
                "slide_number": 96,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n1a\n"
                ]
            },
            {
                "slide_number": 97,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n1a\n1b\n\u2026\n1f\n"
                ]
            },
            {
                "slide_number": 98,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n1a\n1b\n\u2026\n1f\n20"
                ]
            },
            {
                "slide_number": 99,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n1a\n1b\n\u2026\n1f\n20",
                    "  21\n  22\n \u2026\n  2f\n  \n\n "
                ]
            },
            {
                "slide_number": 100,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n1a\n1b\n\u2026\n1f\n20",
                    "  21\n  22\n \u2026\n  2f\n  30\n\n "
                ]
            },
            {
                "slide_number": 101,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n1a\n1b\n\u2026\n1f\n20",
                    "  21\n  22\n \u2026\n  2f\n  30\n \u2026\n   ff\n100\n "
                ]
            },
            {
                "slide_number": 102,
                "slide_title": "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                "slide_text": [
                    "0  \n1  \n2  \n3 \n4  \n5  \n6  \n7  \n8  ",
                    "Lets Count \u000bHexadecimal (base 16)",
                    "Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f",
                    "  9\n  a\n  b\n  c\n  d\n  e\n  f\n10\n11",
                    "12\n13\n\u2026\n19\n1a\n1b\n\u2026\n1f\n20",
                    "  21\n  22\n \u2026\n  2f\n  30\n \u2026\n   ff\n100\n \u2026"
                ]
            },
            {
                "slide_number": 103,
                "slide_title": "Equivalent Representations",
                "slide_text": [
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 104,
                "slide_title": "(13",
                "slide_text": [
                    "(13",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 105,
                "slide_title": "(13)10",
                "slide_text": [
                    "(13)10",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 106,
                "slide_title": "(13)10 = (15)8",
                "slide_text": [
                    "(13)10 = (15)8",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 107,
                "slide_title": "(13)10 = (15)8",
                "slide_text": [
                    "(13)10 = (15)8",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 108,
                "slide_title": "(13)10 = (15)8 = (23)5",
                "slide_text": [
                    "(13)10 = (15)8 = (23)5",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 109,
                "slide_title": "(13)10 = (15)8 = (23)5",
                "slide_text": [
                    "(13)10 = (15)8 = (23)5",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 110,
                "slide_title": "(13)10 = (15)8 = (23)5 = (1101)2\n",
                "slide_text": [
                    "(13)10 = (15)8 = (23)5 = (1101)2\n",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 111,
                "slide_title": "(13)10 = (15)8 = (23)5 = (1101)2\n",
                "slide_text": [
                    "(13)10 = (15)8 = (23)5 = (1101)2\n",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 112,
                "slide_title": "(13)10 = (15)8 = (23)5 = (1101)2 = (d)16\n\n",
                "slide_text": [
                    "(13)10 = (15)8 = (23)5 = (1101)2 = (d)16\n\n",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 113,
                "slide_title": "(13)10 = (15)8 = (23)5 = (1101)2 = (d)16\n\n",
                "slide_text": [
                    "(13)10 = (15)8 = (23)5 = (1101)2 = (d)16\n\n",
                    "Equivalent Representations"
                ]
            },
            {
                "slide_number": 114,
                "slide_title": "(13)10 = (15)8 = (23)5 = (1101)2 = (d)16\n\n",
                "slide_text": [
                    "(13)10 = (15)8 = (23)5 = (1101)2 = (d)16\n\n",
                    "Equivalent Representations",
                    "Representation of\u000bnumber N in base b1\n",
                    "Representation of\u000bnumber N in base b2\n"
                ]
            },
            {
                "slide_number": 115,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions"
                ]
            },
            {
                "slide_number": 116,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions",
                    "N in base b\n",
                    "N in decimal\n",
                    "(i)"
                ]
            },
            {
                "slide_number": 117,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions",
                    "N in base b\n",
                    "N in decimal\n",
                    "(i)",
                    "N in decimal\n",
                    "N in base b\n",
                    "(ii)"
                ]
            },
            {
                "slide_number": 118,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions",
                    "N in base b\n",
                    "N in decimal\n",
                    "(i)",
                    "N in decimal\n",
                    "N in base b\n",
                    "(ii)"
                ]
            },
            {
                "slide_number": 119,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal"
                ]
            },
            {
                "slide_number": 120,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n"
                ]
            },
            {
                "slide_number": 121,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    ""
                ]
            },
            {
                "slide_number": 122,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 123,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 124,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "1",
                    "10"
                ]
            },
            {
                "slide_number": 125,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "",
                    "1",
                    "10"
                ]
            },
            {
                "slide_number": 126,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "",
                    "1",
                    "10",
                    "100"
                ]
            },
            {
                "slide_number": 127,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "",
                    "1",
                    "10",
                    "100\n||102"
                ]
            },
            {
                "slide_number": 128,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "",
                    "1",
                    "10\n||101",
                    "100\n||102"
                ]
            },
            {
                "slide_number": 129,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102"
                ]
            },
            {
                "slide_number": 130,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102"
                ]
            },
            {
                "slide_number": 131,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102"
                ]
            },
            {
                "slide_number": 132,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102"
                ]
            },
            {
                "slide_number": 133,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102"
                ]
            },
            {
                "slide_number": 134,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n"
                ]
            },
            {
                "slide_number": 135,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    ""
                ]
            },
            {
                "slide_number": 136,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 137,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 138,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "1",
                    "8"
                ]
            },
            {
                "slide_number": 139,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1",
                    "8"
                ]
            },
            {
                "slide_number": 140,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1",
                    "8",
                    "64"
                ]
            },
            {
                "slide_number": 141,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1",
                    "8",
                    "64\n||\n82"
                ]
            },
            {
                "slide_number": 142,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82"
                ]
            },
            {
                "slide_number": 143,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82"
                ]
            },
            {
                "slide_number": 144,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82"
                ]
            },
            {
                "slide_number": 145,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n"
                ]
            },
            {
                "slide_number": 146,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 147,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 148,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 149,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 150,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 151,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20"
                ]
            },
            {
                "slide_number": 152,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20"
                ]
            },
            {
                "slide_number": 153,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20"
                ]
            },
            {
                "slide_number": 154,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20",
                    "(3 b 2)16 = 2.160 + 11.161 + 3.162 = 946\n\n"
                ]
            },
            {
                "slide_number": 155,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20",
                    "(3 b 2)16 = 2.160 + 11.161 + 3.162 = 946\n\n",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 156,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20",
                    "(3 b 2)16 = 2.160 + 11.161 + 3.162 = 946\n\n",
                    "",
                    "",
                    "",
                    "160",
                    "161",
                    "162"
                ]
            },
            {
                "slide_number": 157,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20",
                    "(3 b 2)16 = 2.160 + 11.161 + 3.162 = 946\n\n",
                    "",
                    "",
                    "",
                    "160",
                    "161",
                    "162"
                ]
            },
            {
                "slide_number": 158,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20",
                    "(3 b 2)16 = 2.160 + 11.161 + 3.162 = 946\n\n",
                    "",
                    "",
                    "",
                    "160",
                    "161",
                    "162"
                ]
            },
            {
                "slide_number": 159,
                "slide_title": "(i) base b \uf0e0 decimal",
                "slide_text": [
                    "(i) base b \uf0e0 decimal",
                    "(3 7 5)10 = 5.100 + 7.101 + 3.102 = 375\n\n",
                    "",
                    "",
                    "",
                    "1\n||100",
                    "10\n||101",
                    "100\n||102",
                    "(1 2 5)8  = 5.80 + 2.81 + 1.82 = 85\n\n",
                    "",
                    "",
                    "",
                    "1\n||\n80",
                    "8\n||\n81",
                    "64\n||\n82",
                    "(1 0 1 1)2 = 1.20 + 1.21 + 0.22 + 1.23 = 11\n\n",
                    "",
                    "",
                    "",
                    "2\n||\n21",
                    "4\n||\n22",
                    "8\n||\n23",
                    "",
                    "1\n||\n20",
                    "(3 b 2)16 = 2.160 + 11.161 + 3.162 = 946\n\n",
                    "",
                    "",
                    "",
                    "160",
                    "161",
                    "162",
                    "(an \u2026 a2a1a0)b = a0.b0 + a1.b1 + a2.b2 +...+ an.bn\n\n"
                ]
            },
            {
                "slide_number": 160,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions",
                    "N in base b\n",
                    "N in decimal\n",
                    "(i)",
                    "N in decimal\n",
                    "N in base b\n",
                    "(ii)"
                ]
            },
            {
                "slide_number": 161,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions",
                    "N in base b\n",
                    "N in decimal\n",
                    "(i)",
                    "N in decimal\n",
                    "N in base b\n",
                    "(ii)"
                ]
            },
            {
                "slide_number": 162,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)"
                ]
            },
            {
                "slide_number": 163,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n"
                ]
            },
            {
                "slide_number": 164,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        "
                ]
            },
            {
                "slide_number": 165,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20"
                ]
            },
            {
                "slide_number": 166,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20",
                    "21"
                ]
            },
            {
                "slide_number": 167,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20",
                    "21",
                    "22"
                ]
            },
            {
                "slide_number": 168,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 169,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 170,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 171,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 172,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 173,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 174,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 175,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 176,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28",
                    "29"
                ]
            },
            {
                "slide_number": 177,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29"
                ]
            },
            {
                "slide_number": 178,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512"
                ]
            },
            {
                "slide_number": 179,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    " 0     ?"
                ]
            },
            {
                "slide_number": 180,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    " 0     1"
                ]
            },
            {
                "slide_number": 181,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    " 0     ?"
                ]
            },
            {
                "slide_number": 182,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    " 0     0"
                ]
            },
            {
                "slide_number": 183,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0"
                ]
            },
            {
                "slide_number": 184,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 185,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     ?",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 186,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     0",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 187,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     0        1        1        1        1       1        1",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 188,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     0        1        1        1        1       1        1",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 189,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     0        1        1        1        1       1        1",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = ",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 190,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     0        1        1        1        1       1        1",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 191,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     ?",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 192,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 193,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "75"
                ]
            },
            {
                "slide_number": 194,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 195,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 196,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 197,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     ?",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 198,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0      0",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 199,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0      0       1        1        1",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 200,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     ?",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 201,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1",
                    "  75\n- 64\n  11",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 202,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1",
                    "  75\n- 64\n  11",
                    "  11\n-   8\n    3",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "11"
                ]
            },
            {
                "slide_number": 203,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1",
                    "  75\n- 64\n  11",
                    "  11\n-   8\n    3",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "3"
                ]
            },
            {
                "slide_number": 204,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1     0",
                    "  75\n- 64\n  11",
                    "  11\n-   8\n    3",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "3"
                ]
            },
            {
                "slide_number": 205,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1     0     1",
                    "  75\n- 64\n  11",
                    "  11\n-   8\n    3",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "3"
                ]
            },
            {
                "slide_number": 206,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1     0     1",
                    "  75\n- 64\n  11",
                    "  11\n-   8\n    3",
                    "    3\n-   2\n    1",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "3"
                ]
            },
            {
                "slide_number": 207,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1     0     1",
                    "  75\n- 64\n  11",
                    "  11\n-   8\n    3",
                    "    3\n-   2\n    1",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 208,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1     0     1     1",
                    "  75\n- 64\n  11",
                    "  11\n-   8\n    3",
                    "    3\n-   2\n    1",
                    "1 + 2 + 4 + 8 + 16 + 32 = 63",
                    "1 + 2 + 4 + 8 +\u2026 + 2k = 2k+1-1",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 209,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    "",
                    " 0     0     0     1     0     0     1     0     1     1"
                ]
            },
            {
                "slide_number": 210,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    " 0     0     0     1     0     0     1     0     1     1",
                    ""
                ]
            },
            {
                "slide_number": 211,
                "slide_title": "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                "slide_text": [
                    "(ii) decimal \uf0e0 base b (demonstrated on b=2)",
                    "(75)10 = (1001011)2\n",
                    "\u2026                                                                        ",
                    "20\n||\n1",
                    "21\n||\n2",
                    "22\n||\n4",
                    "23\n||\n8",
                    "24\n||\n16",
                    "25\n||\n32",
                    "26\n||\n64",
                    "27\n||\n128",
                    "28\n||\n256",
                    "29\n||\n512",
                    " 0     0     0     1     0     0     1     0     1     1",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 212,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions",
                    "N in base b\n",
                    "N in decimal\n",
                    "(i)",
                    "N in decimal\n",
                    "N in base b\n",
                    "(ii)"
                ]
            },
            {
                "slide_number": 213,
                "slide_title": "Base Conversions",
                "slide_text": [
                    "Base Conversions",
                    "N in base b\n",
                    "N in decimal\n",
                    "(i)",
                    "N in binary",
                    "N in hexadecimal",
                    "(iii)",
                    "N in decimal\n",
                    "N in base b\n",
                    "(ii)"
                ]
            },
            {
                "slide_number": 214,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 215,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 216,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 217,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 218,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 219,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 220,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 221,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 222,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n"
                ]
            },
            {
                "slide_number": 223,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "9"
                ]
            },
            {
                "slide_number": 224,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "9",
                    "b"
                ]
            },
            {
                "slide_number": 225,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3"
                ]
            },
            {
                "slide_number": 226,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n"
                ]
            },
            {
                "slide_number": 227,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    ""
                ]
            },
            {
                "slide_number": 228,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 229,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 230,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 231,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    "",
                    "",
                    "",
                    "3"
                ]
            },
            {
                "slide_number": 232,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    "",
                    "",
                    "",
                    "3",
                    "d"
                ]
            },
            {
                "slide_number": 233,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    "",
                    "",
                    "",
                    "3",
                    "d",
                    "6"
                ]
            },
            {
                "slide_number": 234,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(3b9)16 = (001110111001)2\n",
                    "",
                    "",
                    "",
                    "9",
                    "b",
                    "3",
                    "(011011010011)2 = (6d3)16 \n",
                    "",
                    "",
                    "",
                    "3",
                    "d",
                    "6"
                ]
            },
            {
                "slide_number": 235,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 \n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n "
                ]
            },
            {
                "slide_number": 236,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n "
                ]
            },
            {
                "slide_number": 237,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n "
                ]
            },
            {
                "slide_number": 238,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n "
                ]
            },
            {
                "slide_number": 239,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n "
                ]
            },
            {
                "slide_number": 240,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 241,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 242,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).1+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 243,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 244,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 245,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 246,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 247,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 248,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 249,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 250,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 251,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 252,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 253,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 254,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 255,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 256,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 257,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 258,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 259,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 260,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n                           \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "3 "
                ]
            },
            {
                "slide_number": 261,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                               \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 262,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                               \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 263,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 264,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 265,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 266,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 267,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                               \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 268,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                               \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "13 "
                ]
            },
            {
                "slide_number": 269,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24              \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 270,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24              \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 271,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 272,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 273,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 274,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal"
                ]
            },
            {
                "slide_number": 275,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24              \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 276,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24              \n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "6 "
                ]
            },
            {
                "slide_number": 277,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 278,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "20",
                    ""
                ]
            },
            {
                "slide_number": 279,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "20 = 1",
                    ""
                ]
            },
            {
                "slide_number": 280,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "20 = 1 = 160",
                    ""
                ]
            },
            {
                "slide_number": 281,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 282,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "24",
                    ""
                ]
            },
            {
                "slide_number": 283,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "24 = 16",
                    ""
                ]
            },
            {
                "slide_number": 284,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "24 = 16 = 161 ",
                    ""
                ]
            },
            {
                "slide_number": 285,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160                    +                  (13).161\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 286,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160                    +                  (13).161\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "28 ",
                    ""
                ]
            },
            {
                "slide_number": 287,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160                    +                  (13).161\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "28 = (24)2 ",
                    ""
                ]
            },
            {
                "slide_number": 288,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160                    +                  (13).161\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "28 = (24)2 = (16)2",
                    ""
                ]
            },
            {
                "slide_number": 289,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160                    +                  (13).161            +               (6).162 \u000b\n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 290,
                "slide_title": "(iii) binary     hexadecimal",
                "slide_text": [
                    "(iii) binary     hexadecimal",
                    "(011011010011)2 =\u000b\n= 1.20+1.21+0.22+0.23+1.24+0.25+1.26+1.27+0.28+1.29+1.210+0.211\n\n= (1.20+1.21+0.22+0.23).20+(1.20+0.21+1.22+1.23).24+(0.20+1.21+1.22+0.23).28\n\n=                 (3).20                       +                  (13).24                +               (6).28\n\n=                 (3).160                    +                  (13).161            +               (6).162 \u000b\n= (6d3)16\n\n\n \n ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 291,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition"
                ]
            },
            {
                "slide_number": 292,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1"
                ]
            },
            {
                "slide_number": 293,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1"
                ]
            },
            {
                "slide_number": 294,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1"
                ]
            },
            {
                "slide_number": 295,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1"
                ]
            },
            {
                "slide_number": 296,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1"
                ]
            },
            {
                "slide_number": 297,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1"
                ]
            },
            {
                "slide_number": 298,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1"
                ]
            },
            {
                "slide_number": 299,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1"
                ]
            },
            {
                "slide_number": 300,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1"
                ]
            },
            {
                "slide_number": 301,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1"
                ]
            },
            {
                "slide_number": 302,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1"
                ]
            },
            {
                "slide_number": 303,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 304,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 305,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 306,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 307,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 308,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 309,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 310,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 311,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 312,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 313,
                "slide_title": "Addition",
                "slide_text": [
                    "Addition",
                    "32510",
                    "  69210",
                    "+",
                    "101710",
                    "1  1",
                    "3658",
                    "  2438",
                    "+",
                    "6308",
                    "1   1",
                    "100111002",
                    "  110110012",
                    "+",
                    "1011101012",
                    "1            1   1"
                ]
            },
            {
                "slide_number": 314,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction"
                ]
            },
            {
                "slide_number": 315,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12"
                ]
            },
            {
                "slide_number": 316,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12"
                ]
            },
            {
                "slide_number": 317,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12"
                ]
            },
            {
                "slide_number": 318,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12"
                ]
            },
            {
                "slide_number": 319,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12"
                ]
            },
            {
                "slide_number": 320,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12"
                ]
            },
            {
                "slide_number": 321,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12"
                ]
            },
            {
                "slide_number": 322,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12",
                    "5368",
                    "  3518",
                    "-",
                    "1658",
                    "4  138"
                ]
            },
            {
                "slide_number": 323,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12",
                    "5368",
                    "  3518",
                    "-",
                    "1658",
                    "4  138"
                ]
            },
            {
                "slide_number": 324,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12",
                    "5368",
                    "  3518",
                    "-",
                    "1658",
                    "4  138"
                ]
            },
            {
                "slide_number": 325,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12",
                    "5368",
                    "  3518",
                    "-",
                    "1658",
                    "4  138"
                ]
            },
            {
                "slide_number": 326,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12",
                    "5368",
                    "  3518",
                    "-",
                    "1658",
                    "4  138"
                ]
            },
            {
                "slide_number": 327,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12",
                    "5368",
                    "  3518",
                    "-",
                    "1658",
                    "4  138"
                ]
            },
            {
                "slide_number": 328,
                "slide_title": "Subtraction",
                "slide_text": [
                    "Subtraction",
                    "42710",
                    "  19210",
                    "-",
                    "23510",
                    "3  12",
                    "5368",
                    "  3518",
                    "-",
                    "1658",
                    "4  138"
                ]
            },
            {
                "slide_number": 329,
                "slide_title": "Signed Numbers",
                "slide_text": [
                    "Signed Numbers"
                ]
            },
            {
                "slide_number": 330,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers"
                ]
            },
            {
                "slide_number": 331,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16"
                ]
            },
            {
                "slide_number": 332,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10\n"
                ]
            },
            {
                "slide_number": 333,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10 = (-11010)2\n\n"
                ]
            },
            {
                "slide_number": 334,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10 = (-11010)2\n\n",
                    "Approaches to represent signed numbers using only 0s and 1s:\n\t\t\t\t\t\t\t\t"
                ]
            },
            {
                "slide_number": 335,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10 = (-11010)2\n\n",
                    "Approaches to represent signed numbers using only 0s and 1s:\nSign and Magnitude\u000b\t\t\t\t\t\t\t\t"
                ]
            },
            {
                "slide_number": 336,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10 = (-11010)2\n\n",
                    "Approaches to represent signed numbers using only 0s and 1s:\nSign and Magnitude\u000b\t\t\t\t\t\t\t\t1000\u2026011010\n",
                    "",
                    "",
                    "sign",
                    "magnitude"
                ]
            },
            {
                "slide_number": 337,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10 = (-11010)2\n\n",
                    "Approaches to represent signed numbers using only 0s and 1s:\nSign and Magnitude\u000b\t\t\t\t\t\t\t\t1000\u2026011010\n",
                    "",
                    "",
                    "sign",
                    "magnitude"
                ]
            },
            {
                "slide_number": 338,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10 = (-11010)2\n\n",
                    "Approaches to represent signed numbers using only 0s and 1s:\nSign and Magnitude\u000b\t\t\t\t\t\t\t\t1000\u2026011010\n",
                    "",
                    "",
                    "sign",
                    "magnitude"
                ]
            },
            {
                "slide_number": 339,
                "slide_title": "(26)10 = (11010)2\n\n",
                "slide_text": [
                    "(26)10 = (11010)2\n\n",
                    "Signed Numbers",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "(-26)10 = (-11010)2\n\n",
                    "Approaches to represent signed numbers using only 0s and 1s:\nSign and Magnitude\u000b\t\t\t\t\t\t\t\t1000\u2026011010\n\nTwo\u2019s Complement",
                    "",
                    "",
                    "sign",
                    "magnitude"
                ]
            },
            {
                "slide_number": 340,
                "slide_title": "Two\u2019s Complement",
                "slide_text": [
                    "Two\u2019s Complement"
                ]
            },
            {
                "slide_number": 341,
                "slide_title": "Two\u2019s Complement",
                "slide_text": [
                    "Two\u2019s Complement",
                    "In a k-bit two\u2019s complement representation of a number:\n"
                ]
            },
            {
                "slide_number": 342,
                "slide_title": "Two\u2019s Complement",
                "slide_text": [
                    "Two\u2019s Complement",
                    "In a k-bit two\u2019s complement representation of a number:\nA positive integer is represented in its (k-1)-bit unsigned binary representation, padded with a 0 to its left\n"
                ]
            },
            {
                "slide_number": 343,
                "slide_title": "Two\u2019s Complement",
                "slide_text": [
                    "Two\u2019s Complement",
                    "In a k-bit two\u2019s complement representation of a number:\nA positive integer is represented in its (k-1)-bit unsigned binary representation, padded with a 0 to its left\nThe sum of a number and its additive inverse is 2k\n"
                ]
            },
            {
                "slide_number": 344,
                "slide_title": "(26)10\n",
                "slide_text": [
                    "(26)10\n",
                    "Two\u2019s Complement"
                ]
            },
            {
                "slide_number": 345,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement"
                ]
            },
            {
                "slide_number": 346,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "Two\u2019s Complement",
                    "7 bits"
                ]
            },
            {
                "slide_number": 347,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "Two\u2019s Complement",
                    "7 bits"
                ]
            },
            {
                "slide_number": 348,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "Two\u2019s Complement",
                    "7 bits"
                ]
            },
            {
                "slide_number": 349,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10\n\n",
                    "Two\u2019s Complement",
                    "7 bits"
                ]
            },
            {
                "slide_number": 350,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "7 bits"
                ]
            },
            {
                "slide_number": 351,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 352,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 353,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 354,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 355,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 356,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 357,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 358,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 359,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 360,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 361,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits",
                    ""
                ]
            },
            {
                "slide_number": 362,
                "slide_title": "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                "slide_text": [
                    "(26)10 = (00011010)8 bit 2\u2019s complement\n\n",
                    "",
                    "(-26)10 = (11100110)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "0 0 0 1 1 0 1 0",
                    "  1 1 1 0 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "26",
                    "-26",
                    "28",
                    "7 bits"
                ]
            },
            {
                "slide_number": 363,
                "slide_title": "Two\u2019s Complement",
                "slide_text": [
                    "Two\u2019s Complement"
                ]
            },
            {
                "slide_number": 364,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "Two\u2019s Complement"
                ]
            },
            {
                "slide_number": 365,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "Two\u2019s Complement"
                ]
            },
            {
                "slide_number": 366,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "Two\u2019s Complement",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 367,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "Two\u2019s Complement",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 368,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement\n\n",
                    "Two\u2019s Complement",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 369,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 370,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 371,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 372,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 373,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 374,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 375,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 376,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 377,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 378,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 379,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "+x",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 380,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "-x",
                    "22",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32"
                ]
            },
            {
                "slide_number": 381,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "22",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32",
                    "-22"
                ]
            },
            {
                "slide_number": 382,
                "slide_title": "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                "slide_text": [
                    "(00101101)8 bit 2\u2019s complement = (45)10\n\n",
                    "(11101010)8 bit 2\u2019s complement = (-22)10 \n\n",
                    "Two\u2019s Complement",
                    "1 1 1 0 1 0 1 0",
                    "  0 0 0 1 0 1 1 0",
                    "+",
                    "1 0 0 0 0 0 0 0 0",
                    "1     1      1      1     1      1       1",
                    "22",
                    "28",
                    "",
                    "",
                    "",
                    "2",
                    "4",
                    "8",
                    "",
                    "1",
                    "",
                    "16",
                    "",
                    "",
                    "64",
                    "32",
                    "-22"
                ]
            }
        ]
    },
    {
        "module_number": 4,
        "module_name": "Branching Statements",
        "file_name": "4 - Branching Statements.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Branching Statements",
                "slide_text": [
                    "Branching Statements"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n",
                    "Computing The Absolute Value"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:",
                    "Computing The Absolute Value"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:\n-7 ",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:\n-7 ",
                    "Computing The Absolute Value"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:\n-7 \n|-7| = 7",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:\n-7 \n|-7| = 7",
                    "Computing The Absolute Value"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching "
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "If Statements\nOne-way if statements",
                "slide_text": [
                    "If Statements\nOne-way if statements",
                    "\t\u2026\n\t\u2026\n\tif(condition)\n\t\t\u2026\n\t\u2026\n\t\u2026\n"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:\n-7 \n|-7| = 7",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer, and prints it\u2019s absolute value.\n\nExample\nPlease enter an integer:\n-7 \n|-7| = 7",
                    "Computing The Absolute Value"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "int main(){\n\tint userInput, absVal;\t\t\t\n\n\tcout<<\u201cPlease enter an integer\u201d<<endl;\n\tcin>>userInput;\n\n\tabsVal = userInput;\n\tif(userInput < 0){\n\t\tabsVal = absVal*(-1);\n\t}\n\n\tcout<<\u201c|\u201c<<userInput<<\u201c| = \u201d<<absVal<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint userInput, absVal;\t\t\t\n\n\tcout<<\u201cPlease enter an integer\u201d<<endl;\n\tcin>>userInput;\n\n\tabsVal = userInput;\n\tif(userInput < 0){\n\t\tabsVal = absVal*(-1);\n\t}\n\n\tcout<<\u201c|\u201c<<userInput<<\u201c| = \u201d<<absVal<<endl;\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "If Statements\nOne-way if statements",
                "slide_text": [
                    "If Statements\nOne-way if statements",
                    "\t\u2026\n\t\u2026\n\tif(condition)\n\t\t\u2026\n\t\u2026\n\t\u2026\n"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "If Statements\nOne-way if statements",
                "slide_text": [
                    "If Statements\nOne-way if statements",
                    "\t\u2026\n\t\u2026\n\tif(condition)\n\t\t\u2026\n\t\u2026\n\t\u2026\n",
                    "\t\u2026\n\t\u2026\n\tif(condition){\n\t\t\u2026\n\t\t\u2026\n\t\t\u2026\n\t}\n\t\u2026\n\t\u2026\n"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n",
                    "Determining Parity"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:",
                    "Determining Parity"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:\n7 ",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:\n7 ",
                    "Determining Parity"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:\n7 \n7 is odd",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:\n7 \n7 is odd",
                    "Determining Parity"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif\nif-else"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "If Statements\nTwo-way if statements",
                "slide_text": [
                    "If Statements\nTwo-way if statements",
                    "\t\u2026\n\tif(condition)\n\t\t\u2026\n\telse\n\t\t\u2026\n\t\u2026\n"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "If Statements\nTwo-way if statements",
                "slide_text": [
                    "If Statements\nTwo-way if statements",
                    "\t\u2026\n\tif(condition)\n\t\t\u2026\n\telse\n\t\t\u2026\n\t\u2026\n",
                    "\t\u2026\n\tif(condition){\n\t\t\u2026\n\t\t\u2026\n\t}\n\telse{\n\t\t\u2026\n\t\t\u2026\n\t}\n\t\u2026\n"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:\n7 \n7 is odd",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a positive integer, and determines it\u2019s parity (even or odd).\n\nExample\nPlease enter a positive integer:\n7 \n7 is odd",
                    "Determining Parity"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "int main(){\n\tint userInput;\t\t\t\n\n\tcout<<\u201cPlease enter a positive integer\u201d<<endl;\n\tcin>>userInput;\n\n\tif(userInput % 2 == 0){\n\t\tcout<<userInput<<\u201c is even\u201d<<endl;\n\t}\n\telse{\n\t\tcout<<userInput<<\u201c is odd\u201d<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint userInput;\t\t\t\n\n\tcout<<\u201cPlease enter a positive integer\u201d<<endl;\n\tcin>>userInput;\n\n\tif(userInput % 2 == 0){\n\t\tcout<<userInput<<\u201c is even\u201d<<endl;\n\t}\n\telse{\n\t\tcout<<userInput<<\u201c is odd\u201d<<endl;\n\t}\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "int main(){\n\tint userInput;\t\t\t\n\n\tcout<<\u201cPlease enter a positive integer\u201d<<endl;\n\tcin>>userInput;\n\n\tif(userInput % 2 == 0){\n\t\tcout<<userInput<<\u201c is even\u201d<<endl;\n\t}\n\tif(userInput % 2 == 1){\n\t\tcout<<userInput<<\u201c is odd\u201d<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint userInput;\t\t\t\n\n\tcout<<\u201cPlease enter a positive integer\u201d<<endl;\n\tcin>>userInput;\n\n\tif(userInput % 2 == 0){\n\t\tcout<<userInput<<\u201c is even\u201d<<endl;\n\t}\n\tif(userInput % 2 == 1){\n\t\tcout<<userInput<<\u201c is odd\u201d<<endl;\n\t}\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "int main(){\n\tint val = 0;\t\t\t\n\n\tif(val = 0)\n\t\tcout<<\u201dval is 0\u201d<<endl;\n\telse\n\t\tcout<<\u201dval is not 0\u201d<<endl;\n\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint val = 0;\t\t\t\n\n\tif(val = 0)\n\t\tcout<<\u201dval is 0\u201d<<endl;\n\telse\n\t\tcout<<\u201dval is not 0\u201d<<endl;\n\n\treturn 0;\n}",
                    "Boolean Interpretation"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Problem\nWrite a program that reads from the user a grade, and prints the corresponding letter grade.\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a grade, and prints the corresponding letter grade.\n",
                    "Letter Grade",
                    "Example\nPlease enter a grade:\n86 \nB"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201cF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201cF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201cF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201cF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201cD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201cC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201cB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201dB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201dB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201cA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201dB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201dA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201dB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201dA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201cIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201dB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201dA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201dIllegal grade\u201d<<endl;\n   return 0;\n}",
                "slide_text": [
                    "int main(){\n   int grade;\n   cout<<\"Please enter a grade:\u201d<<endl;\n   cin>>grade;\n   if(grade>=0 && grade<=59)\n      cout<<\u201dF\u201d<<endl;\n   else\n      if(grade>=60 && grade<=69)\n         cout<<\u201dD\u201d<<endl;\n      else\n         if(grade>=70 && grade<=79)\n            cout<<\u201dC\u201d<<endl;\n         else\n            if(grade>=80 && grade<=89)\n               cout<<\u201dB\u201d<<endl; \n            else\n               if(grade>=90 && grade<=100)\n                  cout<<\u201dA\u201d<<endl;\n               else  //(grade<0 || grade>100)\n                  cout<<\u201dIllegal grade\u201d<<endl;\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif\nif-else"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif\nif-else\nif-else if-else"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "If Statements\nMulti-way if statements",
                "slide_text": [
                    "If Statements\nMulti-way if statements",
                    "\t\u2026\n\t\u2026\n\tif(condition1)\n\t\t\u2026\n\telse if(condition2)\n\t\t\u2026\n\telse if(condition3)\n\t\t\u2026\n\t.\n\t.\n\t.\n\telse if(conditionn)\n\t\t\u2026\n\telse\n\t\t\u2026\n\t\u2026\n\t\u2026\n"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n",
                    "Classifying a Character"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n\nExample\nPlease enter a character:",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n\nExample\nPlease enter a character:",
                    "Classifying a Character"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n\nExample\nPlease enter a character:\nD",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n\nExample\nPlease enter a character:\nD",
                    "Classifying a Character"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n\nExample\nPlease enter a character:\nD\nD is an upper case letter",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a character, and classifies it to one of the following:\nLower case letter\nUpper case letter\nDigit\nNot alpha-numeric character\n\nExample\nPlease enter a character:\nD\nD is an upper case letter",
                    "Classifying a Character"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n",
                    "Convert 24-hour to 12-hour"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n\nExample\nPlease enter a time in a 24-hour format:",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n\nExample\nPlease enter a time in a 24-hour format:",
                    "Convert 24-hour to 12-hour"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n\nExample\nPlease enter a time in a 24-hour format:\n15:37",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n\nExample\nPlease enter a time in a 24-hour format:\n15:37",
                    "Convert 24-hour to 12-hour"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n\nExample\nPlease enter a time in a 24-hour format:\n15:37\n15:37 is 3:37 pm",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a time entered in a 24-hour format, and prints the equivalent time in a 12-hour format\n\nExample\nPlease enter a time in a 24-hour format:\n15:37\n15:37 is 3:37 pm",
                    "Convert 24-hour to 12-hour"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 48,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 49,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 50,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 51,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 52,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 53,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 54,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif\nif-else\nif-else if-else"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif\nif-else\nif-else if-else\nswitch"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "Switch Statements",
                "slide_text": [
                    "Switch Statements",
                    "\u2026\nswitch(numeric-expression){\n    case constant1:\n        \u2026\n        \u2026\n        break;\n    case constant2:\n        \u2026\n        \u2026\n        break;\n    .\n    .\n    default:\n        \u2026\n        \u2026\n        break;\n}\n\u2026\n\n"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n",
                    "Computing Value Of A Simple Expression"
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n\nExample\nPlease enter an expression of the form \u000bargument op argument:",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n\nExample\nPlease enter an expression of the form \u000bargument op argument:",
                    "Computing Value Of A Simple Expression"
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n\nExample\nPlease enter an expression of the form \u000bargument op argument:\n5.2 * 4 ",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n\nExample\nPlease enter an expression of the form \u000bargument op argument:\n5.2 * 4 ",
                    "Computing Value Of A Simple Expression"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n\nExample\nPlease enter an expression of the form \u000bargument op argument:\n5.2 * 4 \n20.8",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user a simple mathematical expression (operators allowed: +, -, /, *), and prints it\u2019s value.\n\nExample\nPlease enter an expression of the form \u000bargument op argument:\n5.2 * 4 \n20.8",
                    "Computing Value Of A Simple Expression"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "void main(){\n\tdouble arg1, arg2;\n\tchar op;\n   cout<<\"Please enter an expression of the form \";\n\tcout<<\"argument op argument:\"<<endl;\n   cin>>arg1>>op>>arg2;\n   switch(op){\n   \t\tcase \u2018+\u2018:\n\t\t\tcout<<arg1+arg2<<endl;\n\t\t\tbreak;\n\t\tcase \u2018-\u2018:\n\t\t\tcout<<arg1-arg2<<endl;\n\t\t\tbreak;\n\t\tcase \u2018*\u2018:\n\t\t\tcout<<arg1*arg2<<endl;\n\t\t\tbreak;\n\t\tcase \u2018/\u2018:\n\t\t\tcout<<arg1/arg2<<endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout<<\"Illegal Expression\"<<endl;\n\t\t\tbreak; \n\t}\n}",
                "slide_text": [
                    "void main(){\n\tdouble arg1, arg2;\n\tchar op;\n   cout<<\"Please enter an expression of the form \";\n\tcout<<\"argument op argument:\"<<endl;\n   cin>>arg1>>op>>arg2;\n   switch(op){\n   \t\tcase \u2018+\u2018:\n\t\t\tcout<<arg1+arg2<<endl;\n\t\t\tbreak;\n\t\tcase \u2018-\u2018:\n\t\t\tcout<<arg1-arg2<<endl;\n\t\t\tbreak;\n\t\tcase \u2018*\u2018:\n\t\t\tcout<<arg1*arg2<<endl;\n\t\t\tbreak;\n\t\tcase \u2018/\u2018:\n\t\t\tcout<<arg1/arg2<<endl;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcout<<\"Illegal Expression\"<<endl;\n\t\t\tbreak; \n\t}\n}"
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "Switch Statement \u2013 Syntactic Notes",
                "slide_text": [
                    "Switch Statement \u2013 Syntactic Notes"
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "The numeric-expression must be of type int (short int, int, or long int) ,char or bool",
                "slide_text": [
                    "The numeric-expression must be of type int (short int, int, or long int) ,char or bool",
                    "Switch Statement \u2013 Syntactic Notes"
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "The numeric-expression must be of type int (short int, int, or long int) ,char or bool\nThe case labels must be constants (literals or named constants). \n ",
                "slide_text": [
                    "The numeric-expression must be of type int (short int, int, or long int) ,char or bool\nThe case labels must be constants (literals or named constants). \n ",
                    "Switch Statement \u2013 Syntactic Notes"
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "The numeric-expression must be of type int (short int, int, or long int) ,char or bool\nThe case labels must be constants (literals or named constants). \nIf no case label matches the value of numeric-expression, control branches to the default label (If there is no default label than control passes to the statement following the entire switch statement) ",
                "slide_text": [
                    "The numeric-expression must be of type int (short int, int, or long int) ,char or bool\nThe case labels must be constants (literals or named constants). \nIf no case label matches the value of numeric-expression, control branches to the default label (If there is no default label than control passes to the statement following the entire switch statement) ",
                    "Switch Statement \u2013 Syntactic Notes"
                ]
            },
            {
                "slide_number": 66,
                "slide_title": "The numeric-expression must be of type int (short int, int, or long int) ,char or bool\nThe case labels must be constants (literals or named constants). \nIf no case label matches the value of numeric-expression, control branches to the default label (If there is no default label than control passes to the statement following the entire switch statement) \nAfter a branch is taken, control proceeds  sequentially until either break or the end of the switch statement occurs. That\u2019s why there is usually a break at the end of each branch",
                "slide_text": [
                    "The numeric-expression must be of type int (short int, int, or long int) ,char or bool\nThe case labels must be constants (literals or named constants). \nIf no case label matches the value of numeric-expression, control branches to the default label (If there is no default label than control passes to the statement following the entire switch statement) \nAfter a branch is taken, control proceeds  sequentially until either break or the end of the switch statement occurs. That\u2019s why there is usually a break at the end of each branch",
                    "Switch Statement \u2013 Syntactic Notes"
                ]
            }
        ]
    },
    {
        "module_number": 6,
        "module_name": "Algorithms Analysis",
        "file_name": "6 - Algorithms Analysis.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Algorithms Analysis",
                "slide_text": [
                    "Algorithms Analysis"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "\t\t\t\t\t",
                "slide_text": [
                    "\t\t\t\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Definition\t\t\t\t\t",
                "slide_text": [
                    "Definition\t\t\t\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Definition: Let num\u22652 be an integer. \t\t\t\t\t",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. \t\t\t\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\t\t\t\t\t",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\t\t\t\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition:",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition:",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. \t\t",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. \t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num\n\t\t",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num\n\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num, if d\uf09fk=num\n\t\t",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num, if d\uf09fk=num\n\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num, if d\uf09fk=num\n\tExamples:\n\t\t4 and 25 are complementary divisors of 100\n\t\t",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num, if d\uf09fk=num\n\tExamples:\n\t\t4 and 25 are complementary divisors of 100\n\t\t",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num, if d\uf09fk=num\n\tExamples:\n\t\t4 and 25 are complementary divisors of 100\n\t\t5 and 20 are complementary divisors of 100\n",
                "slide_text": [
                    "Definition: Let num\u22652 be an integer. We say that num is prime, if its only divisors are 1 and num\u000b\tExamples:\n\t\t13 is prime\t\t\t\t12 is not prime\n\nDefinition: Let num\u22652 be an integer, and let d and k be two divisors of num. We say that k and d are complementary divisors of num, if d\uf09fk=num\n\tExamples:\n\t\t4 and 25 are complementary divisors of 100\n\t\t5 and 20 are complementary divisors of 100\n",
                    " ",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\n",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\nExample\nPlease enter an integer, greater or equal to 2:\n\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\nExample\nPlease enter an integer, greater or equal to 2:\n\n",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\nExample\nPlease enter an integer, greater or equal to 2:\n911\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\nExample\nPlease enter an integer, greater or equal to 2:\n911\n",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\nExample\nPlease enter an integer, greater or equal to 2:\n911\n911 is prime",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user an integer greater or equal to 2, and decides if it is a prime number or not\n\nExample\nPlease enter an integer, greater or equal to 2:\n911\n911 is prime",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "num = 100:"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "1    2    4    5    10    20    25    50    100",
                    "num = 100:"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "1    2    4    5    10    20    25    50    100",
                    "num = 100:"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "",
                "slide_text": [
                    "",
                    "k",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. ",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. ",
                    "",
                    "k",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, ",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, ",
                    "",
                    "k",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor",
                    "",
                    "k",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "We have:",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "We have:",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "We have:",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "We have:",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "We have:",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "We have:",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "We have:",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. \t\t",
                    "We have:",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. Since d is a divisor\t\t",
                    "We have:",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. Since d is a divisor\t\t",
                    "We have:",
                    "Primality Testing",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. Since d is a divisor, we get that d=1.\n\t\t",
                    "We have:",
                    "Primality Testing",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. Since d is a divisor, we get that d=1. \t\t",
                    "We have:",
                    "Primality Testing",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. Since d is a divisor, we get that d=1.\nSo: \t\t",
                    "We have:",
                    "Primality Testing",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. Since d is a divisor, we get that d=1.\nSo: \t\t , therefore k = num. ",
                    "We have:",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                "slide_text": [
                    "Let k be a divisor of num in the second \u000bhalf of the range. That is, \nLet d be k\u2019s complementary divisor, therefore",
                    "",
                    "k",
                    "Therefore d<2. Since d is a divisor, we get that d=1.\nSo: \t\t , therefore k = num. \nThis shows that the only divisor in the second half of the range is num itself.",
                    "We have:",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1"
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "Version III:"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "Version III:"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "Version III:",
                    "1    2    4    5    10    20    25    50    100",
                    "num = 100:"
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "Version III:",
                    "1    2    4    5    10    20    25    50    100",
                    "num = 100:"
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "Version III:",
                    "1    2    4    5    10    20    25    50    100",
                    "num = 100:"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "1    2    4    5    10    20    25    50    100"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "1    2    4    5    10    20    25    50    100"
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "1    2    4    5    10    20    25    50    100",
                    ""
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "1    2    4    5    10    20    25    50    100",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "1    2    4    5    10    20    25    50    100",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 66,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 67,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 68,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num\u000b"
                ]
            },
            {
                "slide_number": 69,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000b"
                ]
            },
            {
                "slide_number": 70,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:"
                ]
            },
            {
                "slide_number": 71,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:"
                ]
            },
            {
                "slide_number": 72,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:"
                ]
            },
            {
                "slide_number": 73,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:"
                ]
            },
            {
                "slide_number": 74,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:\nThis implies that num > num"
                ]
            },
            {
                "slide_number": 75,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:\nThis implies that num > num, which is a contradiction.\n\u000b"
                ]
            },
            {
                "slide_number": 76,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:\nThis implies that num > num, which is a contradiction.\n\u000b",
                    ""
                ]
            },
            {
                "slide_number": 77,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Let k and d be complementary divisors of num, and assume that they are both greater than\n\u000bWe therefore have:\nThis implies that num > num, which is a contradiction.\n\u000bThis shows that at least one in each pair of complementary divisors is less than or equal to",
                    ""
                ]
            },
            {
                "slide_number": 78,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1"
                ]
            },
            {
                "slide_number": 79,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1"
                ]
            },
            {
                "slide_number": 80,
                "slide_title": "Primality Testing",
                "slide_text": [
                    "Primality Testing",
                    "Version I:",
                    "Version II:",
                    "Version III:"
                ]
            },
            {
                "slide_number": 81,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis"
                ]
            },
            {
                "slide_number": 82,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis"
                ]
            },
            {
                "slide_number": 83,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis"
                ]
            },
            {
                "slide_number": 84,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis"
                ]
            },
            {
                "slide_number": 85,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\n\n"
                ]
            },
            {
                "slide_number": 86,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\nParameterize running time by the size of the input \n\n"
                ]
            },
            {
                "slide_number": 87,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis"
                ]
            },
            {
                "slide_number": 88,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 89,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 90,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\nParameterize running time by the size of the input "
                ]
            },
            {
                "slide_number": 91,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\nParameterize running time by the size of the input \n\nThe running time depends on the operators we use, and on the types of the data they are applied on\n"
                ]
            },
            {
                "slide_number": 92,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\nParameterize running time by the size of the input \n\nThe running time depends on the operators we use, and on the types of the data they are applied on\nIgnore machine-dependent constants. We count each primitive operation as 1\n"
                ]
            },
            {
                "slide_number": 93,
                "slide_title": "Runtime Analysis\nInformal Criteria",
                "slide_text": [
                    "Runtime Analysis\nInformal Criteria",
                    "We compare the number of primitive operations executed by a process, as a function of its input size"
                ]
            },
            {
                "slide_number": 94,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 95,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 96,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    ""
                ]
            },
            {
                "slide_number": 97,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 98,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 99,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 100,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 101,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing"
                ]
            },
            {
                "slide_number": 102,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 103,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 104,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1"
                ]
            },
            {
                "slide_number": 105,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1",
                    ""
                ]
            },
            {
                "slide_number": 106,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1",
                    ""
                ]
            },
            {
                "slide_number": 107,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 108,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 109,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 110,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 111,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "1"
                ]
            },
            {
                "slide_number": 112,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 113,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 114,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1"
                ]
            },
            {
                "slide_number": 115,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1",
                    ""
                ]
            },
            {
                "slide_number": 116,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1",
                    ""
                ]
            },
            {
                "slide_number": 117,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 118,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 119,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 120,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 121,
                "slide_title": "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                "slide_text": [
                    "bool isPrime(int num){\n\tint countDivs;\t\t\t\n\n\tcountDivs = 0;\n\tfor(int i=1; i <= num; i++){\n\t\tif(num % i == 0)\n\t\t\tcountDivs++;\n\t}\n\n\tif(countDivs == 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
                    "Primality Testing",
                    "num / 2",
                    "sqrt(num)",
                    "1",
                    "1"
                ]
            },
            {
                "slide_number": 122,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 123,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 124,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)",
                    ">",
                    ">"
                ]
            },
            {
                "slide_number": 125,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\nParameterize running time by the size of the input \n\nThe running time depends on the operators we use, and on the types of the data they are applied on\nIgnore machine-dependent constants. We count each primitive operation as 1"
                ]
            },
            {
                "slide_number": 126,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\nParameterize running time by the size of the input \n\nThe running time depends on the operators we use, and on the types of the data they are applied on\nIgnore machine-dependent constants. We count each primitive operation as 1\n\nThe running time depends on the machine\u2019s hardware technology"
                ]
            },
            {
                "slide_number": 127,
                "slide_title": "Runtime Analysis",
                "slide_text": [
                    "Runtime Analysis",
                    "The running time depends on the size of the input\nParameterize running time by the size of the input \n\nThe running time depends on the operators we use, and on the types of the data they are applied on\nIgnore machine-dependent constants. We count each primitive operation as 1\n\nThe running time depends on the machine\u2019s hardware technology\nMake asymptotic analysis: look at the order of growth of T(n)"
                ]
            },
            {
                "slide_number": 128,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria"
                ]
            },
            {
                "slide_number": 129,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria",
                    ""
                ]
            },
            {
                "slide_number": 130,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria",
                    "",
                    "asymptotic order of the "
                ]
            },
            {
                "slide_number": 131,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria",
                    "T(n) = 3n2 + 6n -15",
                    "",
                    "asymptotic order of the "
                ]
            },
            {
                "slide_number": 132,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria",
                    "T(n) = 3n2 + 6n -15 = \u03b8(n2) ",
                    "",
                    "asymptotic order of the "
                ]
            },
            {
                "slide_number": 133,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria",
                    "Rule of thumb to get the order of growth:",
                    "T(n) = 3n2 + 6n -15 = \u03b8(n2) ",
                    "",
                    "asymptotic order of the "
                ]
            },
            {
                "slide_number": 134,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria",
                    "Rule of thumb to get the order of growth:\nDrop low-order terms",
                    "T(n) = 3n2 + 6n -15 = \u03b8(n2) ",
                    "",
                    "asymptotic order of the "
                ]
            },
            {
                "slide_number": 135,
                "slide_title": "We compare the number of primitive operations executed by a process, as a function of its input size",
                "slide_text": [
                    "We compare the number of primitive operations executed by a process, as a function of its input size",
                    "Runtime Analysis\nInformal Criteria",
                    "Rule of thumb to get the order of growth:\nDrop low-order terms\nIgnore leading constants",
                    "T(n) = 3n2 + 6n -15 = \u03b8(n2) ",
                    "",
                    "asymptotic order of the "
                ]
            },
            {
                "slide_number": 136,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 137,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 138,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 139,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 140,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "\n",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 141,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "\n",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 142,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Conclusions:\nT1(n) and T2(n) are asymptotically equivalent\n",
                    "=",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 143,
                "slide_title": "Primality Testing - Runtime Analysis",
                "slide_text": [
                    "Primality Testing - Runtime Analysis",
                    "Conclusions:\nT1(n) and T2(n) are asymptotically equivalent\nT3(n) is asymptotically better than T1(n) and T2(n) ",
                    "=",
                    ">",
                    "Let n be the size of the input (n = num)"
                ]
            },
            {
                "slide_number": 144,
                "slide_title": "Runtime Analysis\nInformal Criteria",
                "slide_text": [
                    "Runtime Analysis\nInformal Criteria",
                    "Rule of thumb to get the order of growth:\nDrop low-order terms\nIgnore leading constants",
                    "T(n) = 3n2 + 6n -15 = \u03b8(n2) ",
                    "We compare the asymptotic order of the number of primitive operations executed by a process, as a function of its input size"
                ]
            },
            {
                "slide_number": 145,
                "slide_title": "Runtime Analysis\nInformal Criteria",
                "slide_text": [
                    "Runtime Analysis\nInformal Criteria",
                    "Rule of thumb to get the order of growth:\nDrop low-order terms\nIgnore leading constants",
                    "T(n) = 3n2 + 6n -15 = \u03b8(n2) ",
                    "We compare the asymptotic order of the number of primitive operations executed by a process, as a function of its input size",
                    "More Formally . . ."
                ]
            },
            {
                "slide_number": 146,
                "slide_title": "Asymptotic Analysis\n\u0398 definition",
                "slide_text": [
                    "Asymptotic Analysis\n\u0398 definition"
                ]
            },
            {
                "slide_number": 147,
                "slide_title": "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. ",
                "slide_text": [
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. ",
                    "Asymptotic Analysis\n\u0398 definition"
                ]
            },
            {
                "slide_number": 148,
                "slide_title": "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n))",
                "slide_text": [
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n))",
                    "Asymptotic Analysis\n\u0398 definition"
                ]
            },
            {
                "slide_number": 149,
                "slide_title": "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2",
                "slide_text": [
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2",
                    "Asymptotic Analysis\n\u0398 definition"
                ]
            },
            {
                "slide_number": 150,
                "slide_title": "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0",
                "slide_text": [
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0",
                    "Asymptotic Analysis\n\u0398 definition"
                ]
            },
            {
                "slide_number": 151,
                "slide_title": "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n",
                "slide_text": [
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n",
                    "Asymptotic Analysis\n\u0398 definition"
                ]
            },
            {
                "slide_number": 152,
                "slide_title": "Asymptotic Analysis\n\u0398 definition",
                "slide_text": [
                    "Asymptotic Analysis\n\u0398 definition",
                    "size of input",
                    "running time",
                    "",
                    "f(n)",
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n"
                ]
            },
            {
                "slide_number": 153,
                "slide_title": "Asymptotic Analysis\n\u0398 definition",
                "slide_text": [
                    "Asymptotic Analysis\n\u0398 definition",
                    "size of input",
                    "running time",
                    "",
                    "f(n)",
                    "",
                    "4\uf09fg(n)",
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n"
                ]
            },
            {
                "slide_number": 154,
                "slide_title": "Asymptotic Analysis\n\u0398 definition",
                "slide_text": [
                    "Asymptotic Analysis\n\u0398 definition",
                    "size of input",
                    "running time",
                    "",
                    "f(n)",
                    "",
                    "",
                    "4\uf09fg(n)",
                    "\u2153\uf09fg(n)",
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n"
                ]
            },
            {
                "slide_number": 155,
                "slide_title": "Asymptotic Analysis\n\u0398 definition",
                "slide_text": [
                    "Asymptotic Analysis\n\u0398 definition",
                    "size of input",
                    "running time",
                    "",
                    "f(n)",
                    "",
                    "",
                    "4\uf09fg(n)",
                    "\u2153\uf09fg(n)",
                    "8",
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n"
                ]
            },
            {
                "slide_number": 156,
                "slide_title": "Asymptotic Analysis\n\u0398 definition",
                "slide_text": [
                    "Asymptotic Analysis\n\u0398 definition",
                    "size of input",
                    "running time",
                    "",
                    "f(n)",
                    "",
                    "",
                    "4\uf09fg(n)",
                    "\u2153\uf09fg(n)",
                    "8",
                    "n0 = 8\nc1 = 4\nc2 = \u2153",
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n"
                ]
            },
            {
                "slide_number": 157,
                "slide_title": "Asymptotic Analysis\n\u0398 definition",
                "slide_text": [
                    "Asymptotic Analysis\n\u0398 definition",
                    "size of input",
                    "running time",
                    "",
                    "f(n)",
                    "",
                    "",
                    "4\uf09fg(n)",
                    "\u2153\uf09fg(n)",
                    "8",
                    "n0 = 8\nc1 = 4\nc2 = \u2153",
                    "f(n) = \u03b8(g(n))",
                    "\uf0f1",
                    "Definition\nLet f(n) and g(n) be two functions mapping positive integers to positive real numbers. \nWe say that f(n)=\u03b8(g(n)) if there exist positive real constants c1, c2 and a positive integer constant n0 such that c2g(n) \u2264 f(n) \u2264 c1g(n) for all n\u2265n0 \n"
                ]
            },
            {
                "slide_number": 158,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition"
                ]
            },
            {
                "slide_number": 159,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 160,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \n\t\t\t3n2 \u2264 \t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \n\t\t\t3n2 \u2264 \t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 161,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 162,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 \t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 163,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 164,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 165,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 166,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 167,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "9",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 168,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "9",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 169,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "9",
                    "6n \u2013 15 \u2265 0\n\n  \n\n     ",
                    "",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 170,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "9",
                    "6n \u2013 15 \u2265 0\n\n  6n  \u2265 15\n\n     ",
                    "",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 171,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "9",
                    "6n \u2013 15 \u2265 0\n\n  6n  \u2265 15\n\n     n \u2265 2.5",
                    "",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 172,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "9",
                    "3",
                    "6n \u2013 15 \u2265 0\n\n  6n  \u2265 15\n\n     n \u2265 2.5",
                    "",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 173,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "9",
                    "3",
                    "3",
                    "6n \u2013 15 \u2265 0\n\n  6n  \u2265 15\n\n     n \u2265 2.5",
                    "",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 174,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\t3n2 \u2264 3n2 + 6n \u2013 15 \u2264 9n2\n\n\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\t3n2 \u2264 3n2 + 6n \u2013 15 \u2264 9n2\n\n\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "\uf0f1",
                    "9",
                    "3",
                    "3",
                    "6n \u2013 15 \u2265 0\n\n  6n  \u2265 15\n\n     n \u2265 2.5",
                    "",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 175,
                "slide_title": "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\t3n2 \u2264 3n2 + 6n \u2013 15 \u2264 9n2\n\nTherefore: 3n2 + 6n \u2013 15 = \u03b8(n2)\t",
                "slide_text": [
                    "Show that:\t\t3n2 + 6n -15 = \u03b8(n2 )\nProof: \nif we take\t\tc1 = ____\n\t\t\t\t\tc2 = ____\n\t\t\t\t\tn0 = ____\nThen for all n \u2265 n0 we have:\n\t\t\t3n2 \u2264 3n2 + 6n - 15 \u2264 3n2 + 6n \u2264 3n2 + 6n2 = 9n2\n\n\t\t\t3n2 \u2264 3n2 + 6n \u2013 15 \u2264 9n2\n\nTherefore: 3n2 + 6n \u2013 15 = \u03b8(n2)\t",
                    "Asymptotic Analysis\n\u0398 definition",
                    "\uf0f1",
                    "9",
                    "3",
                    "3",
                    "6n \u2013 15 \u2265 0\n\n  6n  \u2265 15\n\n     n \u2265 2.5",
                    "",
                    "",
                    "f(n)",
                    "",
                    "g(n)"
                ]
            },
            {
                "slide_number": 176,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 177,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* * * *\n* * * *\n* * * *\n* * * *"
                ]
            },
            {
                "slide_number": 178,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* * * *\n* * * *\n* * * *\n* * * *",
                    "T(n) ="
                ]
            },
            {
                "slide_number": 179,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "",
                    "* * * *\n* * * *\n* * * *\n* * * *",
                    "T(n) ="
                ]
            },
            {
                "slide_number": 180,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "",
                    "n",
                    "* * * *\n* * * *\n* * * *\n* * * *",
                    "T(n) ="
                ]
            },
            {
                "slide_number": 181,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "",
                    "",
                    "n",
                    "* * * *\n* * * *\n* * * *\n* * * *",
                    "T(n) ="
                ]
            },
            {
                "slide_number": 182,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "",
                    "",
                    "n",
                    "n\uf09fn",
                    "* * * *\n* * * *\n* * * *\n* * * *",
                    "T(n) ="
                ]
            },
            {
                "slide_number": 183,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "",
                    "",
                    "n",
                    "n\uf09fn",
                    "* * * *\n* * * *\n* * * *\n* * * *",
                    "T(n) = \u03b8(n2)"
                ]
            },
            {
                "slide_number": 184,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "",
                    "",
                    "n",
                    "n\uf09fn",
                    "T(n) = \u03b8(n2)"
                ]
            },
            {
                "slide_number": 185,
                "slide_title": "Runtime Analysis\nExample I",
                "slide_text": [
                    "Runtime Analysis\nExample I",
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 186,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 187,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 188,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 189,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 190,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 191,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 192,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 193,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 194,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 195,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 196,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II",
                    ""
                ]
            },
            {
                "slide_number": 197,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 198,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 199,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "* \n* *\n* * *\n* * * *",
                    "",
                    "",
                    "i",
                    "T(n) = \u03b8(n2)",
                    "\uf0f1",
                    "Runtime Analysis\nExample II"
                ]
            },
            {
                "slide_number": 200,
                "slide_title": "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, i, j;\t\t\t\n\tcout<<\u201dPlease enter n:\u201d<<endl;\n\tcin>>n;\n\tfor(i = 1; i <= n; i++){\n\t\tfor(j = 1; j <= i; j++)\n\t\t\tcout<<\u2018*\u2018;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}",
                    "",
                    "",
                    "i",
                    "",
                    "Runtime Analysis\nExample II",
                    "T(n) = \u03b8(n2)",
                    "\uf0f1"
                ]
            }
        ]
    },
    {
        "module_number": 7,
        "module_name": "Functions",
        "file_name": "7 - Functions.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Functions",
                "slide_text": [
                    "Functions"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition:"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. "
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. \t"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. \t",
                    "n = 5",
                    "k = 3"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. \t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "k = 3"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. \t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "",
                    "",
                    "",
                    "k = 3"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. \t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. \t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. \t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3",
                    "\u2026",
                    "",
                    "3-combinations"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. k-combinations is denoted by \t   \t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3",
                    "\u2026",
                    "",
                    "3-combinations"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. k-combinations is denoted by \t   and is also called \u000bn choose k\t\t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3",
                    "\u2026",
                    "",
                    "3-combinations"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. k-combinations is denoted by \t   and is also called \u000bn choose k\t\t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "Theorem: Let n and k be two nonnegative integers, such that k \u2264 n. ",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3",
                    "\u2026",
                    "",
                    "3-combinations"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. k-combinations is denoted by \t   and is also called \u000bn choose k\t\t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "Theorem: Let n and k be two nonnegative integers, such that k \u2264 n. The number of k-combinations of a set with n elements equals:",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3",
                    "\u2026",
                    "",
                    "3-combinations"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "k-combinations",
                "slide_text": [
                    "k-combinations",
                    "Definition: Let n and k be two nonnegative integers, such that k \u2264 n. We define k-combinations as the number of unordered selections of k distinct elements from the set of size n. k-combinations is denoted by \t   and is also called \u000bn choose k\t\t",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "n = 5",
                    "Theorem: Let n and k be two nonnegative integers, such that k \u2264 n. The number of k-combinations of a set with n elements equals:",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "k = 3",
                    "\u2026",
                    "",
                    "3-combinations"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b",
                    "k-combinations"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b\nExample\nPlease enter n and k (k <= n):",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b\nExample\nPlease enter n and k (k <= n):",
                    "k-combinations"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b\nExample\nPlease enter n and k (k <= n):\n5   3 ",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b\nExample\nPlease enter n and k (k <= n):\n5   3 ",
                    "k-combinations"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b\nExample\nPlease enter n and k (k <= n):\n5   3 \n5 choose 3 is 10",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user two positive integers n, k (n\u2265k), and prints the value of n choose k. \u000b\nExample\nPlease enter n and k (k <= n):\n5   3 \n5 choose 3 is 10",
                    "k-combinations"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    ""
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\tnFact = 1;\n\tfor (i=1; i<=n; i++)\n\t\tnFact *= i;\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\n\tnFact = factorial(n);\n\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\n\tnFact = factorial(n);\n\n\tkFact = 1;\n\tfor (i=1; i<=k; i++)\n\t\tkFact *= i;\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\n\tnFact = factorial(n);\n\n\t\n\tkFact = factorial(k);\n\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\n\tnFact = factorial(n);\n\n\t\n\tkFact = factorial(k);\n\n\tn_kFact = 1;\n\tfor (i=1; i<=n-k; i++)\n\t\tn_kFact *= i;\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\t\n\tnFact = factorial(n);\n\n\t\n\tkFact = factorial(k);\n\n\n\tn_kFact = factorial(n-k);\n\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tint n, k, i, nFact, kFact, n_kFact, k_comb;inations;\t\t\t\n\tcout<<\u201dPlease enter n and k (n>=k):\u201d<<endl;\n\tcin>>n>>k;\n\n\t\n\tnFact = factorial(n);\n\n\t\n\tkFact = factorial(k);\n\n\n\tn_kFact = factorial(n-k);\n\n\t\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d<<k_comb<<endl;\n\treturn 0;\n}",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "",
                "slide_text": [
                    "",
                    "factorial"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "",
                "slide_text": [
                    "",
                    "factorial",
                    "int num"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "",
                "slide_text": [
                    "",
                    "factorial",
                    "int num",
                    "int",
                    "(num!)"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                "slide_text": [
                    "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                    "",
                    "factorial",
                    "int num",
                    "int",
                    "(num!)"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                "slide_text": [
                    "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                    "",
                    "factorial",
                    "int num",
                    "int",
                    "",
                    "(num!)"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                "slide_text": [
                    "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                    "",
                    "factorial",
                    "int num",
                    "int",
                    "",
                    "(num!)"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                "slide_text": [
                    "int factorial(int num){\n\tint factRes, i;\t\n\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\n\treturn factRes;\n}",
                    "",
                    "factorial",
                    "int num",
                    "int",
                    "",
                    "(num!)"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                    ""
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                    ""
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                    ""
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                "slide_text": [
                    "int main(){\n\tint n, k, k_comb;\n\tint nFact, kFact, n_kFact;\t\t\t\n\tcout<<\u201dPlease enter n and k \u201d<<endl;\n\tcin>>n>>k;\n\tnFact = factorial(n);\n\tkFact = factorial(k);\n\tn_kFact = factorial(n-k);\n\tk_comb = nFact / (kFact*n_kFact);\n\tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n\tcout<<k_comb<<endl;\n\treturn 0;\n}\n\nint factorial(int num){\n\tint factRes, i;\t\n\tfactRes = 1;\n\tfor (i=1; i<=num; i++)\n\t\tfactRes *= i;\n\treturn factRes;\n}\n",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool ",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool ",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif\nif-else\nif-else if-else\nswitch\nIterative\nwhile\nfor"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "Data \nint\nfloat\ndouble\nchar\nstring\nbool ",
                "slide_text": [
                    "Data \nint\nfloat\ndouble\nchar\nstring\nbool ",
                    "Expressions\nI/O expressions\nArithmetic expressions \nBoolean expressions\n",
                    "Control Flow\nSequential\nBranching \nif\nif-else\nif-else if-else\nswitch\nIterative\nwhile\nfor\nFunction call"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n"
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    ""
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "",
                    "factorial",
                    "",
                    "num:",
                    "factRes:",
                    "i:"
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "",
                    "factorial",
                    "",
                    "num:",
                    "factRes:",
                    "i:",
                    "return adrs:"
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes:",
                    "i:",
                    "return adrs:"
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes:",
                    "i:",
                    "return adrs:  6"
                ]
            },
            {
                "slide_number": 66,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes:",
                    "i:",
                    "return adrs:  6"
                ]
            },
            {
                "slide_number": 67,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "i:",
                    "return adrs:  6",
                    "factRes: 1 "
                ]
            },
            {
                "slide_number": 68,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "i:  1",
                    "return adrs:  6",
                    "factRes: 1"
                ]
            },
            {
                "slide_number": 69,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "i:  1",
                    "return adrs:  6",
                    "factRes: 1"
                ]
            },
            {
                "slide_number": 70,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "i:  1  2",
                    "return adrs:  6",
                    "factRes: 1"
                ]
            },
            {
                "slide_number": 71,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "i:  1  2",
                    "return adrs:  6",
                    "factRes: 1 2"
                ]
            },
            {
                "slide_number": 72,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "i:  1  2  3",
                    "return adrs:  6",
                    "factRes: 1 2"
                ]
            },
            {
                "slide_number": 73,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "i:  1  2  3",
                    "return adrs:  6",
                    "factRes: 1 2 6"
                ]
            },
            {
                "slide_number": 74,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes: 1 2 6\u2026 120",
                    "i:  1  2  3 \u2026 6",
                    "return adrs:  6"
                ]
            },
            {
                "slide_number": 75,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes: 1 2 6\u2026 120",
                    "i:  1  2  3 \u2026 6",
                    "return adrs:  6"
                ]
            },
            {
                "slide_number": 76,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes: 1 2 6\u2026 120",
                    "i:  1  2  3 \u2026 6",
                    "return adrs:  6",
                    ""
                ]
            },
            {
                "slide_number": 77,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes: 1 2 6\u2026 120",
                    "i:  1  2  3 \u2026 6",
                    "return adrs:  6",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 78,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  5",
                    "factRes: 1 2 6\u2026 120",
                    "i:  1  2  3 \u2026 6",
                    "return adrs:  6",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 79,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    ""
                ]
            },
            {
                "slide_number": 80,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    ""
                ]
            },
            {
                "slide_number": 81,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 82,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 83,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:",
                    "factRes:",
                    "i:",
                    "",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 84,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:",
                    "factRes:",
                    "i:",
                    "return adrs:",
                    "",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 85,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:",
                    "i:",
                    "return adrs:",
                    "",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 86,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:",
                    "i:",
                    "return adrs:  7",
                    "",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 87,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:",
                    "i:",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 88,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1",
                    "i:",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 89,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1",
                    "i:  1",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 90,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1",
                    "i:  1",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 91,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1",
                    "i:  1  2",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 92,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1  2",
                    "i:  1  2",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 93,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1  2",
                    "i:  1  2  3",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 94,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1  2  6",
                    "i:  1  2  3",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 95,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "factRes:  1  2  6",
                    "i:  1  2  3  4",
                    "return adrs:  7",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 96,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "return adrs:  7",
                    "nFact:  120",
                    "factRes:  1  2  6",
                    "i:  1  2  3  4"
                ]
            },
            {
                "slide_number": 97,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "return adrs:  7",
                    "",
                    "nFact:  120",
                    "factRes:  1  2  6",
                    "i:  1  2  3  4"
                ]
            },
            {
                "slide_number": 98,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "return adrs:  7",
                    "",
                    "",
                    "nFact:  120",
                    "factRes:  1  2  6",
                    "i:  1  2  3  4"
                ]
            },
            {
                "slide_number": 99,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  3",
                    "return adrs:  7",
                    "",
                    "",
                    "nFact:  120",
                    "factRes:  1  2  6",
                    "i:  1  2  3  4"
                ]
            },
            {
                "slide_number": 100,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "nFact:  120"
                ]
            },
            {
                "slide_number": 101,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    ""
                ]
            },
            {
                "slide_number": 102,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 103,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 104,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:",
                    "factRes:",
                    "i:",
                    "nFact:  120",
                    "",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 105,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:",
                    "factRes:",
                    "i:",
                    "return adrs:",
                    "nFact:  120",
                    "",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 106,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:",
                    "i:",
                    "return adrs:",
                    "nFact:  120",
                    "",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 107,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:",
                    "i:",
                    "return adrs:  8",
                    "nFact:  120",
                    "",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 108,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:",
                    "i:",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 109,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:  1",
                    "i:",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 110,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:  1",
                    "i:  1",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 111,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:  1",
                    "i:  1",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 112,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:  1",
                    "i:  1  2",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 113,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:  1  2",
                    "i:  1  2",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 114,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "factRes:  1  2",
                    "i:  1  2  3",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 115,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "return adrs:  8",
                    "nFact:  120",
                    "kFact:  6",
                    "factRes:  1  2",
                    "i:  1  2  3"
                ]
            },
            {
                "slide_number": 116,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "return adrs:  8",
                    "",
                    "nFact:  120",
                    "kFact:  6",
                    "factRes:  1  2",
                    "i:  1  2  3"
                ]
            },
            {
                "slide_number": 117,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "return adrs:  8",
                    "",
                    "",
                    "nFact:  120",
                    "kFact:  6",
                    "factRes:  1  2",
                    "i:  1  2  3"
                ]
            },
            {
                "slide_number": 118,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "factorial",
                    "",
                    "num:  2",
                    "return adrs:  8",
                    "",
                    "",
                    "nFact:  120",
                    "kFact:  6",
                    "factRes:  1  2",
                    "i:  1  2  3"
                ]
            },
            {
                "slide_number": 119,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    "",
                    "nFact:  120",
                    "kFact:  6"
                ]
            },
            {
                "slide_number": 120,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main",
                    ""
                ]
            },
            {
                "slide_number": 121,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 122,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 123,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 124,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 125,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 126,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 127,
                "slide_title": "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n, k, k_comb;\n3.  \tint nFact, kFact, n_kFact;\t\t\t\n4.  \tcout<<\u201dPlease enter n and k \u201d<<endl;\n5.  \tcin>>n>>k;\n6.  \tnFact = factorial(n);\n7.  \tkFact = factorial(k);\n8.  \tn_kFact = factorial(n-k);\n9.  \tk_comb = nFact / (kFact*n_kFact);\n10. \tcout<<n<<\u201d choose \u201d<<k<<\u201d is \u201d;\n11. \tcout<<k_comb<<endl;\n12. \treturn 0;\n13. }\n14.\n15. int factorial(int num){\n16.  \tint factRes, i;\t\n17. \tfactRes = 1;\n18. \tfor (i=1; i<=num; i++)\n19. \t\tfactRes *= i;\n20. \treturn factRes;\n21. }\n"
                ]
            },
            {
                "slide_number": 128,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 129,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n"
                ]
            },
            {
                "slide_number": 130,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n"
                ]
            },
            {
                "slide_number": 131,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "Before func: 3"
                ]
            },
            {
                "slide_number": 132,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "Before func: 3",
                    ""
                ]
            },
            {
                "slide_number": 133,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "Before func: 3\nInside func: 4",
                    ""
                ]
            },
            {
                "slide_number": 134,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "Before func: 3\nInside func: 4",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 135,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "Before func: 3\nInside func: 4\nAfter func: ",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 136,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "Before func: 3\nInside func: 4\nAfter func: ??",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 137,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n"
                ]
            },
            {
                "slide_number": 138,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  ",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 139,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  ",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 140,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 141,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main"
                ]
            },
            {
                "slide_number": 142,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3"
                ]
            },
            {
                "slide_number": 143,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3"
                ]
            },
            {
                "slide_number": 144,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3",
                    "n:",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 145,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3",
                    "n:",
                    "return adrs:",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 146,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3",
                    "n:   3",
                    "return adrs:",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 147,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3",
                    "n:   3",
                    "return adrs:   5",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 148,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3",
                    "n:   3",
                    "return adrs:   5",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 149,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3",
                    "n:   3  4",
                    "return adrs:   5",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 150,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3",
                    "n:   3  4",
                    "return adrs:   5",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 151,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3\nInside func: 4",
                    "n:   3  4",
                    "return adrs:   5",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 152,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3\nInside func: 4",
                    "n:   3  4",
                    "return adrs:   5",
                    "",
                    "",
                    "func"
                ]
            },
            {
                "slide_number": 153,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3\nInside func: 4"
                ]
            },
            {
                "slide_number": 154,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3\nInside func: 4\nAfter func: 3"
                ]
            },
            {
                "slide_number": 155,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3\nInside func: 4\nAfter func: 3"
                ]
            },
            {
                "slide_number": 156,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "",
                    "n:  3  ",
                    "",
                    "main",
                    "Before func: 3\nInside func: 4\nAfter func: 3"
                ]
            },
            {
                "slide_number": 157,
                "slide_title": "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint n = 3;\t\t\n3.  \tcout<<\u201dBefore func:\u201d<<n<<<endl;\n4.  \tfunc(n);\n5.  \tcout<<\u201dAfter func:\u201d<<n<<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void func(int n){\n10.  \tn = 4;\t\n11. \tcout<<\u201dInside func:\u201d<<n<<<endl;\n12. }\n",
                    "Before func: 3\nInside func: 4\nAfter func: 3"
                ]
            },
            {
                "slide_number": 158,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 159,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n"
                ]
            },
            {
                "slide_number": 160,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 161,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 162,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  ",
                    "b:",
                    "main"
                ]
            },
            {
                "slide_number": 163,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  ",
                    "b:",
                    "main"
                ]
            },
            {
                "slide_number": 164,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main"
                ]
            },
            {
                "slide_number": 165,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main"
                ]
            },
            {
                "slide_number": 166,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4"
                ]
            },
            {
                "slide_number": 167,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4"
                ]
            },
            {
                "slide_number": 168,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 169,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "temp:",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 170,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "temp:",
                    "return adrs:",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 171,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3",
                    "b:  4",
                    "temp:",
                    "return adrs:",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 172,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3",
                    "b:  4",
                    "temp:",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 173,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3",
                    "b:  4",
                    "temp:",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 174,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3",
                    "b:  4",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 175,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3",
                    "b:  4",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 176,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3   4",
                    "b:  4",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 177,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3   4",
                    "b:  4",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 178,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3   4",
                    "b:  4   3",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 179,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  3   4",
                    "b:  4   3",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap"
                ]
            },
            {
                "slide_number": 180,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4"
                ]
            },
            {
                "slide_number": 181,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4\nAfter: a = 3   b = 4"
                ]
            },
            {
                "slide_number": 182,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4\nAfter: a = 3   b = 4"
                ]
            },
            {
                "slide_number": 183,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4\nAfter: a = 3   b = 4"
                ]
            },
            {
                "slide_number": 184,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "Before: a = 3   b = 4\nAfter: a = 3   b = 4"
                ]
            },
            {
                "slide_number": 185,
                "slide_title": "Parameter Passing",
                "slide_text": [
                    "Parameter Passing"
                ]
            },
            {
                "slide_number": 186,
                "slide_title": "Two ways to pass parameters to a function:\n\u000b",
                "slide_text": [
                    "Two ways to pass parameters to a function:\n\u000b",
                    "Parameter Passing"
                ]
            },
            {
                "slide_number": 187,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000b\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000b\u000b",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000b\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000b\u000b",
                    "Parameter Passing"
                ]
            },
            {
                "slide_number": 188,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: \u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: \u000b",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: \u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: \u000b",
                    "Parameter Passing"
                ]
            },
            {
                "slide_number": 189,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: \u000b",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: \u000b",
                    "Parameter Passing"
                ]
            },
            {
                "slide_number": 190,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000b",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000b",
                    "Parameter Passing"
                ]
            },
            {
                "slide_number": 191,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000b",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000b",
                    "Parameter Passing",
                    ""
                ]
            },
            {
                "slide_number": 192,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000bsemantics:",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000bsemantics:",
                    "Parameter Passing",
                    ""
                ]
            },
            {
                "slide_number": 193,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000bsemantics:",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000bsemantics:",
                    "Parameter Passing",
                    ""
                ]
            },
            {
                "slide_number": 194,
                "slide_title": "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000bsemantics: When passing by reference, a reference to the argument\u2019s memory location is passed",
                "slide_text": [
                    "Two ways to pass parameters to a function:\nCall-By-Value\u000bsyntax: void func(int x)\u000bsemantics: When passing by value, the argument is evaluated and its value is passed\u000b\nCall-By-Reference\u000bsyntax: void func(int& x) \u000bsemantics: When passing by reference, a reference to the argument\u2019s memory location is passed",
                    "Parameter Passing",
                    ""
                ]
            },
            {
                "slide_number": 195,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 196,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 197,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 198,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  ",
                    "b:",
                    "main",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 199,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  ",
                    "b:",
                    "main",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 200,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 201,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 202,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 203,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 204,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "",
                    "swap",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 205,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "temp:",
                    "",
                    "swap",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 206,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "temp:",
                    "return adrs:",
                    "",
                    "swap",
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n"
                ]
            },
            {
                "slide_number": 207,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "temp:",
                    "return adrs:",
                    "",
                    "swap",
                    ""
                ]
            },
            {
                "slide_number": 208,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:",
                    "b:",
                    "temp:",
                    "return adrs:",
                    "",
                    "swap",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 209,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:  ",
                    "temp:",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 210,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:  ",
                    "temp:",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 211,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:  ",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 212,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:  ",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 213,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "a:  3   4  ",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 214,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "b:  4",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:  ",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    "",
                    "a:  3   4  "
                ]
            },
            {
                "slide_number": 215,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "b:  4    3",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:  ",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    "",
                    "a:  3   4  "
                ]
            },
            {
                "slide_number": 216,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "main",
                    "Before: a = 3   b = 4",
                    "",
                    "a:  ",
                    "b:  ",
                    "temp:   3",
                    "return adrs:  5",
                    "",
                    "swap",
                    "",
                    "",
                    "b:  4    3",
                    "a:  3   4  "
                ]
            },
            {
                "slide_number": 217,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "main",
                    "Before: a = 3   b = 4",
                    "b:  4    3",
                    "a:  3   4  "
                ]
            },
            {
                "slide_number": 218,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "main",
                    "Before: a = 3   b = 4\nAfter: a = 4   b = 3",
                    "b:  4    3",
                    "a:  3   4  "
                ]
            },
            {
                "slide_number": 219,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "main",
                    "Before: a = 3   b = 4\nAfter: a = 4   b = 3",
                    "b:  4    3",
                    "a:  3   4  "
                ]
            },
            {
                "slide_number": 220,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "",
                    "",
                    "main",
                    "Before: a = 3   b = 4\nAfter: a = 4   b = 3",
                    "b:  4    3",
                    "a:  3   4  "
                ]
            },
            {
                "slide_number": 221,
                "slide_title": "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                "slide_text": [
                    "1.  int main(){\n2.   \tint a = 3, b = 4;\t\t\n3.  \tcout<<\u201dBefore: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n4.  \tswap(a, b);\n5.  \tcout<<\u201dAfter: a = \u201d<<a<<\u201d  b = \u201d<<b<<endl;\n6.  \treturn 0;\n7.  }\n8.\n9.  void swap(int& a, int& b){\n10.  \tint temp; \t\n11. \ttemp = a;\n12.\ta = b;\n13.\tb = temp;\n14. }\n",
                    "Before: a = 3   b = 4\nAfter: a = 4   b = 3"
                ]
            },
            {
                "slide_number": 222,
                "slide_title": "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n",
                "slide_text": [
                    "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n",
                    "Analyze Digits"
                ]
            },
            {
                "slide_number": 223,
                "slide_title": "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n\nExample\nPlease enter a positive integer:",
                "slide_text": [
                    "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n\nExample\nPlease enter a positive integer:",
                    "Analyze Digits"
                ]
            },
            {
                "slide_number": 224,
                "slide_title": "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n\nExample\nPlease enter a positive integer:\n375 ",
                "slide_text": [
                    "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n\nExample\nPlease enter a positive integer:\n375 ",
                    "Analyze Digits"
                ]
            },
            {
                "slide_number": 225,
                "slide_title": "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n\nExample\nPlease enter a positive integer:\n375 \n375 has 3 digits and their sum is 15",
                "slide_text": [
                    "Problem\nWrite a program that reads a positive integer num, and prints the number of digits in num and their sum.\n\nExample\nPlease enter a positive integer:\n375 \n375 has 3 digits and their sum is 15",
                    "Analyze Digits"
                ]
            },
            {
                "slide_number": 226,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 227,
                "slide_title": "",
                "slide_text": [
                    "",
                    "analyzeDigits"
                ]
            },
            {
                "slide_number": 228,
                "slide_title": "",
                "slide_text": [
                    "",
                    "analyzeDigits",
                    "int num"
                ]
            },
            {
                "slide_number": 229,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 230,
                "slide_title": "int analyzeDigits(int num, int& outSum)",
                "slide_text": [
                    "int analyzeDigits(int num, int& outSum)"
                ]
            },
            {
                "slide_number": 231,
                "slide_title": "int analyzeDigits(int num, int& outSum)",
                "slide_text": [
                    "int analyzeDigits(int num, int& outSum)"
                ]
            },
            {
                "slide_number": 232,
                "slide_title": "int analyzeDigits(int num, int& outSum)",
                "slide_text": [
                    "int analyzeDigits(int num, int& outSum)"
                ]
            },
            {
                "slide_number": 233,
                "slide_title": "int analyzeDigits(int num, int& outSum)\n\nvoid analyzeDigits(int num, int& outSum, int& outCountDigs)",
                "slide_text": [
                    "int analyzeDigits(int num, int& outSum)\n\nvoid analyzeDigits(int num, int& outSum, int& outCountDigs)"
                ]
            },
            {
                "slide_number": 234,
                "slide_title": "int analyzeDigits(int num, int& outSum)\n\nvoid analyzeDigits(int num, int& outSum, int& outCountDigs)",
                "slide_text": [
                    "int analyzeDigits(int num, int& outSum)\n\nvoid analyzeDigits(int num, int& outSum, int& outCountDigs)"
                ]
            },
            {
                "slide_number": 235,
                "slide_title": "int analyzeDigits(int num, int& outSum)\n\nvoid analyzeDigits(int num, int& outSum, int& outCountDigs)",
                "slide_text": [
                    "int analyzeDigits(int num, int& outSum)\n\nvoid analyzeDigits(int num, int& outSum, int& outCountDigs)"
                ]
            },
            {
                "slide_number": 236,
                "slide_title": "Solving Quadratic Equation",
                "slide_text": [
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 237,
                "slide_title": "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6 \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                "slide_text": [
                    "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6 \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 238,
                "slide_title": "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6 \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                "slide_text": [
                    "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6 \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 239,
                "slide_title": "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6  \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                "slide_text": [
                    "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6  \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 240,
                "slide_title": "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6  \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                "slide_text": [
                    "Problem\nWrite a program that reads 3 real numbers, representing coefficients of a quadratic equation, and prints the solutions of the equation, if there are any, or an appropriate message.\n\nExample\nPlease enter coefficients of quadratic equation:\n1   -5    6  \nThe equation: 1x^2 + -5x + 6 = 0\nSolutions: 2  3",
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 241,
                "slide_title": "Solving Quadratic Equation",
                "slide_text": [
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 242,
                "slide_title": "Solving Quadratic Equation",
                "slide_text": [
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 243,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 244,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation"
                ]
            },
            {
                "slide_number": 245,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation",
                    ""
                ]
            },
            {
                "slide_number": 246,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\t\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation",
                    ""
                ]
            },
            {
                "slide_number": 247,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 248,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\t\nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 249,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\tE.g:\t\tx2 + 1 = 0 \nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\tE.g:\t\tx2 + 1 = 0 \nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 250,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\tE.g:\t\tx2 + 1 = 0 \nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\tE.g:\t\tx2 + 1 = 0 \nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 251,
                "slide_title": "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\tE.g:\t\tx2 + 1 = 0 \nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                "slide_text": [
                    "Cases of Solutions:\nTwo Real Solutions\u000b\t\tE.g:\t\tx2 - 5x + 6 = 0\t\tx1 = 2,\t x2 = 3\nOne Real Solution\u000b\t\tE.g:\t\tx2 + 2x + 1 = 0\t\tx = -1\nNo Real Solution\u000b\t\tE.g:\t\tx2 + 1 = 0 \nNo Solution\u000b\t\tE.g:  \t0x2 + 0x + 5 = 0  \nAll Reals\u000b\t\tE.g:\t\t0x2 + 0x + 0 = 0",
                    "Solving Quadratic Equation",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 252,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 253,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 254,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 255,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 256,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 257,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 258,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned by outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 259,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions:  \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions:  \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 260,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 261,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 262,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 263,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      default:\n          cout<<\"Error\\n\"; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 264,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<\"\\n\"; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<\"\\n\"; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No solutions\\n\"; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No real solution\\n\"; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\\n\"; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 265,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<endl; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<<endl; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\u201d<<<endl; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\u201d<<<endl; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\u201d<<<endl; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<endl; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<<endl; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\u201d<<<endl; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\u201d<<<endl; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\u201d<<<endl; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 266,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<endl; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<<endl; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\u201d<<<endl; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\u201d<<<endl; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\u201d<<<endl; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<endl; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<<endl; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\u201d<<<endl; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\u201d<<<endl; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\u201d<<<endl; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 267,
                "slide_title": "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<endl; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<<endl; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\u201d<<<endl; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\u201d<<<endl; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\u201d<<<endl; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}",
                "slide_text": [
                    "//\tThis program solves a quadratic equation.\n//\tInput from user: 3 real numbers, representing coefficients of a quadratic equation\n//\tOutput to user: The solutions of the equation, if there are any, or an appropriate message\nint main(){\n   double a, b, c, x1, x2;\n\t\u000b   cout<<\"Please enter coefficients of quadratic equation:\\n\";\n   cin>>a>>b>>c;\n   cout<<\"The equation: \u201c<<a<<\"x^2 + \"<<b<<\"x + \"<<c<<\u201c = 0\u201c<<endl;\n   switch (quadratic(a,b,c,x1,x2)){\n      case TWO_REAL_SOLUTIONS:\n\t   \t\tcout<<\"Solutions: \"<<x1<<\" \"<<x2<<endl; break;\n      case ONE_REAL_SOLUTION:\n\t   \t\tcout<<\"One solution: \"<<x1<<<endl; break;\n      case NO_REAL_SOLUTION:\n\t   \t\tcout<<\"No real solution\u201d<<<endl; break;\n      case NO_SOLUTION:\n\t   \t\tcout<<\"No solutions\u201d<<<endl; break;\n      case ALL_REALS:\n\t   \t\tcout<<\u201cAll real numbers are solutions\u201d<<<endl; break;\n      default:\n          cout<<\"Error\u201d<<<endl; break;\n   }\n   return 0;\n}"
                ]
            },
            {
                "slide_number": 268,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 269,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t // the equation is a linear equation\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t // the equation is a linear equation\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 270,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 271,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 272,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta\n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta\n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta < 0)\n\t    \treturn NO_REAL_SOLUTION;\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else{\n\t    \tx1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 273,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, sqrt_delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 274,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 275,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 276,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 277,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 278,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 279,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 280,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 281,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 282,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 283,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 284,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 285,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 286,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 287,
                "slide_title": "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n",
                "slide_text": [
                    "#include <iostream>\n#include <cmath>\nusing namespace std;\n// Constants to represent type of solutions to an equation\nconst int NO_SOLUTION = 0;\nconst int ONE_REAL_SOLUTION = 1;\nconst int TWO_REAL_SOLUTIONS = 2;\nconst int ALL_REALS = 3;\nconst int NO_REAL_SOLUTION = 4;\n\n// quadratic: Solves the quadratic equation: ax^2+bx+c = 0\n// Input: a, b, c - coefficients of equation \n// Output: 1.Type of solution (return value)\n//\t \t  2. outX1, outX2    -    solutions to equation (output parameters)\n// Assumptions: 1. If equation has one solution it will be returned in outX1 \n// \t\t 2. If equation has no real solutions the values in outX1 and outX2 are not defined\nint quadratic(double a, double b, double c, \n              double& outX1, double& outX2);\n\n// linear: Solves a linear equation: ax+b = 0\n// Input: a, b - coefficients of equation \n// Output: 1. Type of solution (return value)\n//\t \t  2.  outX   -   solution to equation (output parameter)\n// Assumptions: If equation has no solutions the value returned at outX is not defined\nint linear(double a, double b, double& outX);\n"
                ]
            },
            {
                "slide_number": 288,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 289,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 290,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 291,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 292,
                "slide_title": "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}",
                "slide_text": [
                    "int quadratic(double a, double b, double c, \n              double& outX1, double& outX2){\n    double delta, x1, x2;  \n    if (a != 0.0){\t\n       delta = b*b - 4*a*c;\n       if (delta > 0){\n         x1 = (-b + sqrt(delta))/(2*a);\n\t    \tx2 = (-b - sqrt(delta))/(2*a);\n\t    \toutX1 = x1; \n\t    \toutX2 = x2;\n\t    \treturn TWO_REAL_SOLUTIONS;\n       }\n       else if (delta == 0){\n\t    \tx1 = -b/(2*a);\n\t    \toutX1 = x1;\n\t    \treturn ONE_REAL_SOLUTION;\n       }\n       else\n\t    \treturn NO_REAL_SOLUTION;       \n    }\n    else\n       return linear(b, c, outX1);     \n}"
                ]
            },
            {
                "slide_number": 293,
                "slide_title": "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}",
                "slide_text": [
                    "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}"
                ]
            },
            {
                "slide_number": 294,
                "slide_title": "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}",
                "slide_text": [
                    "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}"
                ]
            },
            {
                "slide_number": 295,
                "slide_title": "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}",
                "slide_text": [
                    "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}"
                ]
            },
            {
                "slide_number": 296,
                "slide_title": "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}",
                "slide_text": [
                    "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}"
                ]
            },
            {
                "slide_number": 297,
                "slide_title": "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}",
                "slide_text": [
                    "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}"
                ]
            },
            {
                "slide_number": 298,
                "slide_title": "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}",
                "slide_text": [
                    "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}"
                ]
            },
            {
                "slide_number": 299,
                "slide_title": "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}",
                "slide_text": [
                    "int linear(double a, double b, double& outX){\n   double x;\n   if (a != 0){\n      x = -b/a;\n      outX = x;\n      return ONE_REAL_SOLUTION;\n   }\n   else if ((a == 0) && (b == 0)){\t\n      x = 0;\n      outX = x;\n      return ALL_REALS;\n   }\n   else  // in this case a==0 && b!=0\n      return NO_SOLUTION;\n}"
                ]
            }
        ]
    },
    {
        "module_number": 9,
        "module_name": "Arrays",
        "file_name": "9 - Arrays.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Computing The Average (Revisited)",
                "slide_text": [
                    "Computing The Average (Revisited)",
                    "Example\nPlease enter the number of students in the class:\n4\nEnter the students' grades (separated by a space):\n71    86    68    94\nThe class average is  79.75",
                    "Problem\nWrite a program that reads grades of students in a class, and prints the average.\n"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Above The Average",
                "slide_text": [
                    "Above The Average",
                    "Example\nPlease enter the number of students in the class:\n4\nEnter the students' grades (separated by a space):\n71    86    68    94\nThe class average is  79.75\nThe grades above the average are  86   94",
                    "Problem\nWrite a program that reads grades of students in a class, prints the average and the grades that are above the average.\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Above The Average",
                "slide_text": [
                    "Above The Average",
                    "Example\nPlease enter the number of students in the class (no more than 60):\n4\nEnter the students' grades (separated by a space):\n71    86    68    94\nThe class average is  79.75\nThe grades above the average are  86   94",
                    "Problem\nWrite a program that reads grades of students in a class, prints the average and the grades that are above the average.\n"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Int main (  ) {",
                "slide_text": [
                    "Int main (  ) {",
                    "X = Y ; \n\nY = 7.3 ; \n\narr [2] = 10 ;\n\narr [4] = 14 ;",
                    "X",
                    "4",
                    "1028",
                    "1004",
                    "1012 ",
                    "1016",
                    "1020",
                    "1024",
                    "1000",
                    "1032",
                    "Y",
                    "7.3",
                    "0",
                    "1",
                    "2",
                    "10",
                    "3",
                    "14",
                    "4"
                ]
            }
        ]
    },
    {
        "module_number": 9,
        "module_name": "Strings",
        "file_name": "9 - Strings.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Strings",
                "slide_text": [
                    "Strings"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "#include <iostream>\n\nusing namespace std;\n\nint main(){\n\t\n\t\n\t\n\t\n\t\n\treturn 0;\n}",
                "slide_text": [
                    "#include <iostream>\n\nusing namespace std;\n\nint main(){\n\t\n\t\n\t\n\t\n\t\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\t\n\t\n\t\n\t\n\t\n\treturn 0;\n}",
                "slide_text": [
                    "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\t\n\t\n\t\n\t\n\t\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\t\n\t\n\t\n\treturn 0;\n}",
                "slide_text": [
                    "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\t\n\t\n\t\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\tstr = \u201dabc\u201d;\n\t\n\t\n\treturn 0;\n}",
                "slide_text": [
                    "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\tstr = \u201dabc\u201d;\n\t\n\t\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\tstr = \u201dabc\u201d;\n\tcout<<str + \u201ddef\u201d;\n\t\n\treturn 0;\n}",
                "slide_text": [
                    "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\tstr = \u201dabc\u201d;\n\tcout<<str + \u201ddef\u201d;\n\t\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\tstr = \u201dabc\u201d;\n\tcout<<str + \u201ddef\u201d;\n\t\n\treturn 0;\n}",
                "slide_text": [
                    "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main(){\n\tstring str;\n\t\n\tstr = \u201dabc\u201d;\n\tcout<<str + \u201ddef\u201d;\n\t\n\treturn 0;\n}",
                    "abcdef\n\n"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    ""
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t="
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \t"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\t\n\t\u000b\n\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\t\n\t\u000b\n\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\t\n\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\t\n\u000b\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\t\u000b\tcout<<str<<endl;\n\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\t\u000b\tcout<<str<<endl;\n\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\t\u000b\tcout<<str<<endl;\n\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\t\u000b\tcout<<str<<endl;\n\n\treturn 0;\n}",
                    "Please enter your name:\n\n"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "Please enter your name:\nDonald Duck\n"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\t\n\tcin>>str;\n\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "Please enter your name:\nDonald Duck\nDonald"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\t\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\t\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\t\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\t\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "Please enter your name:\n\n"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "Please enter your name:\nDonald Duck\n"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str;\n\t\n\tcout<<\u201dPlease enter your name\u201d<<endl;\n\tcin>>str;\t\n\tgetline(cin, str);\n\tcout<<str<<endl;\u000b\n\treturn 0;\n}",
                    "Please enter your name:\nDonald Duck\nDonald Duck"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \t\u000b\t\t\t\t\t\n"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\t\n"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \t"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\t\n\n\n\n\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\t\n\n\n\n\n\n\n\n \treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\n\n\n\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\n\n\n\n\n\n\n \treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\n\n\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\n\n\n\n\n\n \treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\n\n\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\n\n\n\n\n\n \treturn 0;\n}",
                    "a b c\u000b\n"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\n\n\n\n \treturn 0;\n}",
                    "a b c\u000b\n"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \t"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\n\n\n\n \treturn 0;\n}",
                    "a b c\u000b\n"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                    "a b c\u000b\n"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                    "a b c\u000b\n",
                    "substr(str1, 3, 2)"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                    "a b c\u000b\n",
                    "substr(str1, 3, 2)"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\t\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl;\n\tch = str1[3];\n\n\tcout<<str1.substr(3, 2)<<endl;\n\n\n\n \treturn 0;\n}",
                    "a b c\u000b\n"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\n\t\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\n\t\n\n \treturn 0;\n}",
                    "a b c\nde\n"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\tstr2 = str1.substr(2, 3);\n\t\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\tstr2 = str1.substr(2, 3);\n\t\n\n \treturn 0;\n}",
                    "a b c\nde\n"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\tstr2 = str1.substr(2, 3);\n\tcout<<str2<<endl;\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\tstr2 = str1.substr(2, 3);\n\tcout<<str2<<endl;\n\n \treturn 0;\n}",
                    "a b c\nde\n"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\tstr2 = str1.substr(2, 3);\n\tcout<<str2<<endl;\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\tchar ch;\n\t\n\tstr1 = \u201dabcdefg\u201d;\n\tcout<<str1[0]<<\u201c \u201c<<str1[1]<<\u201c \u201c<<str1[2]<<endl; \tch = str1[3];\u000b\n\tcout<<str1.substr(3, 2)<<endl;\n\tstr2 = str1.substr(2, 3);\n\tcout<<str2<<endl;\n\n \treturn 0;\n}",
                    "a b c\nde\ncde"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \t"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \t\n"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n"
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\n",
                "slide_text": [
                    "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\n",
                    "Printing Backwards"
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\nExample\nPlease enter your name:\n",
                "slide_text": [
                    "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\nExample\nPlease enter your name:\n",
                    "Printing Backwards"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\nExample\nPlease enter your name:\nDonald Duck\n",
                "slide_text": [
                    "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\nExample\nPlease enter your name:\nDonald Duck\n",
                    "Printing Backwards"
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\nExample\nPlease enter your name:\nDonald Duck\nkcuD dlanoD",
                "slide_text": [
                    "Problem\nWrite a program that reads the user\u2019s name and prints it in a reverse order.\n\nExample\nPlease enter your name:\nDonald Duck\nkcuD dlanoD",
                    "Printing Backwards"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\t"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t"
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t=="
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !="
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   \n      \n   \n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   \n      \n   \n\n\n \treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      \n   \n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      \n   \n\n\n \treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      cout<<str1<<\u201d is smaller than \u201d<<str2<<endl;\n   \n\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      cout<<str1<<\u201d is smaller than \u201d<<str2<<endl;\n   \n\n\n \treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      cout<<str1<<\u201d is smaller than \u201d<<str2<<endl;\n   else\n      cout<<str1<<\u201d is not smaller than \u201d<<str2<<endl;\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      cout<<str1<<\u201d is smaller than \u201d<<str2<<endl;\n   else\n      cout<<str1<<\u201d is not smaller than \u201d<<str2<<endl;\t\n \treturn 0;\n}",
                    "\n\n"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      cout<<str1<<\u201d is smaller than \u201d<<str2<<endl;\n   else\n      cout<<str1<<\u201d is not smaller than \u201d<<str2<<endl;\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str1, str2;\n\n   str1 = \u201dabc\u201d;\n   str2 = \u201dde\u201d;\n\n   if (str1 < str2)\n      cout<<str1<<\u201d is smaller than \u201d<<str2<<endl;\n   else\n      cout<<str1<<\u201d is not smaller than \u201d<<str2<<endl;\t\n \treturn 0;\n}",
                    "abc is smaller than de\n\n"
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <"
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <, >, <=, >=\n"
                ]
            },
            {
                "slide_number": 64,
                "slide_title": " \na b c d e f g\n\na b c d x y z",
                "slide_text": [
                    " \na b c d e f g\n\na b c d x y z"
                ]
            },
            {
                "slide_number": 65,
                "slide_title": " \na b c d e f g\n\na b c d x y z",
                "slide_text": [
                    " \na b c d e f g\n\na b c d x y z",
                    ""
                ]
            },
            {
                "slide_number": 66,
                "slide_title": " \na b c d e f g\n\na b c d x y z",
                "slide_text": [
                    " \na b c d e f g\n\na b c d x y z",
                    ""
                ]
            },
            {
                "slide_number": 67,
                "slide_title": " \na b c d e f g\n\na b c d x y z",
                "slide_text": [
                    " \na b c d e f g\n\na b c d x y z",
                    ""
                ]
            },
            {
                "slide_number": 68,
                "slide_title": " \na b c d e f g\n\na b c d x y z",
                "slide_text": [
                    " \na b c d e f g\n\na b c d x y z",
                    ""
                ]
            },
            {
                "slide_number": 69,
                "slide_title": " \na b c d e f g\n\na b c d x y z",
                "slide_text": [
                    " \na b c d e f g\n\na b c d x y z",
                    ""
                ]
            },
            {
                "slide_number": 70,
                "slide_title": "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n",
                    "First Word"
                ]
            },
            {
                "slide_number": 71,
                "slide_title": "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n\nExample\nPlease enter 3 words, separated by a space:",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n\nExample\nPlease enter 3 words, separated by a space:",
                    "First Word"
                ]
            },
            {
                "slide_number": 72,
                "slide_title": "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n\nExample\nPlease enter 3 words, separated by a space:\ndolphin  cat  tiger ",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n\nExample\nPlease enter 3 words, separated by a space:\ndolphin  cat  tiger ",
                    "First Word"
                ]
            },
            {
                "slide_number": 73,
                "slide_title": "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n\nExample\nPlease enter 3 words, separated by a space:\ndolphin  cat  tiger \ncat",
                "slide_text": [
                    "Problem\nWrite a program that reads from the user 3 words and prints the one that comes first in an alphabetical order.\n\nExample\nPlease enter 3 words, separated by a space:\ndolphin  cat  tiger \ncat",
                    "First Word"
                ]
            },
            {
                "slide_number": 74,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <, >, <=, >=\n \t\u000b\t\t\t\t\t\t"
                ]
            },
            {
                "slide_number": 75,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <, >, <=, >=\n Searching: \t\u000b\t\t\t\t\t\t"
                ]
            },
            {
                "slide_number": 76,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <, >, <=, >=\n Searching: \tstr.find(s)\u000b\t\t\t\t\t\t"
                ]
            },
            {
                "slide_number": 77,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   \n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   \n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "\n\n\n"
                ]
            },
            {
                "slide_number": 78,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "\n\n\n"
                ]
            },
            {
                "slide_number": 79,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "\n\n\n"
                ]
            },
            {
                "slide_number": 80,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   \n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "6\n\n\n"
                ]
            },
            {
                "slide_number": 81,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) != string::npos)\n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) != string::npos)\n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "6\n\n\n"
                ]
            },
            {
                "slide_number": 82,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) != string::npos\n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) != string::npos\n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "6\n\n\n"
                ]
            },
            {
                "slide_number": 83,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      \n   \n      \n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "6\n\n\n"
                ]
            },
            {
                "slide_number": 84,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "6\n\n\n"
                ]
            },
            {
                "slide_number": 85,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\t\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\t\n\n\t\n \treturn 0;\n}",
                    "6\nNot found\n\n"
                ]
            },
            {
                "slide_number": 86,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\n\t\n \treturn 0;\n}",
                    "6\nNot found\n\n"
                ]
            },
            {
                "slide_number": 87,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\n\t\n \treturn 0;\n}",
                    "6\nNot found\n2\n"
                ]
            },
            {
                "slide_number": 88,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <, >, <=, >=\n Searching: \tstr.find(s)\u000b\t\t\t\t\t\t"
                ]
            },
            {
                "slide_number": 89,
                "slide_title": "The string Class",
                "slide_text": [
                    "The string Class",
                    " Initializing: \t=\n Concatenating: \t+\n Reading: \tcin\u000b\t\t\t\t\tgetline(cin, str)\n Indexing: \tstr[i]\n Slicing: \tstr.substr(ind, len)\n Length: \tstr.length()\n Comparing: \t==, !=, <, >, <=, >=\n Searching: \tstr.find(s)\u000b\t\t\t\t\t\tstr.find(s, startInd)"
                ]
            },
            {
                "slide_number": 90,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\n\t\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\n\t\n \treturn 0;\n}",
                    "6\nNot found\n2\n"
                ]
            },
            {
                "slide_number": 91,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\tcout<<str.find(\u201dcd\u201d, 3);\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\tcout<<str.find(\u201dcd\u201d, 3);\n\n \treturn 0;\n}",
                    "6\nNot found\n2\n"
                ]
            },
            {
                "slide_number": 92,
                "slide_title": "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\tcout<<str.find(\u201dcd\u201d, 3);\n\n \treturn 0;\n}",
                "slide_text": [
                    "int main(){\n\tstring str = \u201dabcdbcdefg\u201d;\n\n   cout<<str.find(\u201dde\u201d)<<endl;\n\n   if (str.find(\u201dxyz\u201d) == string::npos)\n      cout<<\u201dNot found\u201d <<endl;\n   else\n      cout<<\u201dFound\u201d<<endl;\n\t\n\tcout<<str.find(\u201dcd\u201d);\n\tcout<<str.find(\u201dcd\u201d, 3);\n\n \treturn 0;\n}",
                    "6\nNot found\n2\n5"
                ]
            },
            {
                "slide_number": 93,
                "slide_title": "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n",
                "slide_text": [
                    "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n",
                    "Count Words"
                ]
            },
            {
                "slide_number": 94,
                "slide_title": "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n\nExample\nPlease enter a line of text:",
                "slide_text": [
                    "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n\nExample\nPlease enter a line of text:",
                    "Count Words"
                ]
            },
            {
                "slide_number": 95,
                "slide_title": "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n\nExample\nPlease enter a line of text:\nWe can do it",
                "slide_text": [
                    "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n\nExample\nPlease enter a line of text:\nWe can do it",
                    "Count Words"
                ]
            },
            {
                "slide_number": 96,
                "slide_title": "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n\nExample\nPlease enter a line of text:\nWe can do it\n4",
                "slide_text": [
                    "Problem\nWrite a program that reads a line of text from the user and prints the number of words in that text.\n\nExample\nPlease enter a line of text:\nWe can do it\n4",
                    "Count Words"
                ]
            }
        ]
    },
    {
        "module_number": 11,
        "module_name": "Fundamental Searching Algorithms",
        "file_name": "11 - Fundamental Searching Algorithms.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Fundamental Searching Algorithms",
                "slide_text": [
                    "Fundamental Searching Algorithms"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "The Searching Problem",
                "slide_text": [
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);",
                "slide_text": [
                    "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);",
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b",
                "slide_text": [
                    "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b",
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]",
                "slide_text": [
                    "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]",
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8)",
                "slide_text": [
                    "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8)",
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8) should return 1\n",
                "slide_text": [
                    "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8) should return 1\n",
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8) should return 1\nThe call: search(arr, 6, 4)",
                "slide_text": [
                    "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8) should return 1\nThe call: search(arr, 6, 4)",
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8) should return 1\nThe call: search(arr, 6, 4) should return -1\n",
                "slide_text": [
                    "Problem\nImplement the following function: \nint search(int arr[], int arrSize, int val);\nThe function should return an index in arr, where val appears first, or -1 if val is not one of arr\u2019s elements. \u000b\nExamples\nIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nThe call: search(arr, 6, 8) should return 1\nThe call: search(arr, 6, 4) should return -1\n",
                    "The Searching Problem"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    \n}"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "\u0398(1)",
                    "",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "\u0398(1)",
                    "\u0398(# of iterations)",
                    "",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "\u0398(1)",
                    "\u0398(# of iterations)",
                    "",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)",
                    "T(n) = \u0398(# of iterations)"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "\u0398(1)",
                    "\u0398(# of iterations)",
                    "",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)",
                    "T(n) = \u0398(# of iterations)\nIn worst-case: (# of iterations) = n"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                "slide_text": [
                    "int search(int arr[], int arrSize, int val){\n    int i;\n    \n    i = 0;\n    while (i < arrSize){\n        if (arr[i] == val)\n            return i;\n        i++;\n    }    \n    return -1;\n}",
                    "",
                    "\u0398(1)",
                    "\u0398(# of iterations)",
                    "",
                    "",
                    "\u0398(1)",
                    "",
                    "\u0398(1)",
                    "T(n) = \u0398(# of iterations)\nIn worst-case: (# of iterations) = n\n\uf0ea\nT(n) = \u0398(n)"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);",
                "slide_text": [
                    "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);",
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. ",
                "slide_text": [
                    "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. ",
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.",
                "slide_text": [
                    "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.",
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.\nExample\nIf srtArr is an array containing: [5, 7, 8, 8, 10, 12]",
                "slide_text": [
                    "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.\nExample\nIf srtArr is an array containing: [5, 7, 8, 8, 10, 12]",
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.\nExample\nIf srtArr is an array containing: [5, 7, 8, 8, 10, 12]\nThe call sortedSearch(srtArr, 6, 8)\n",
                "slide_text": [
                    "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.\nExample\nIf srtArr is an array containing: [5, 7, 8, 8, 10, 12]\nThe call sortedSearch(srtArr, 6, 8)\n",
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.\nExample\nIf srtArr is an array containing: [5, 7, 8, 8, 10, 12]\nThe call sortedSearch(srtArr, 6, 8) could return 3\n",
                "slide_text": [
                    "Problem\nImplement the following function: \nint sortedSearch(int srtArr[], int srtArrSize, \u000b                 int val);\nThe function is given a sorted array srtArr, its size, and val to search for. It should return an index, where val appears, or -1 if val is not one of srtArr\u2019s elements.\nExample\nIf srtArr is an array containing: [5, 7, 8, 8, 10, 12]\nThe call sortedSearch(srtArr, 6, 8) could return 3\n",
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "val = 79"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "val = 79"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "1",
                    "val = 79"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "1",
                    "val = 79"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "val = 79"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "val = 79"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "",
                    "3",
                    "4",
                    "val = 79"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "",
                    "3",
                    "4",
                    "val = 79"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "3",
                    "4",
                    "8",
                    "val = 79"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "3",
                    "4",
                    "8",
                    "val = 79"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "3",
                    "4",
                    "8",
                    ".  .  .",
                    "val = 79"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "3",
                    "4",
                    "8",
                    ".  .  .",
                    "T(n) = \u0398(n)",
                    "val = 79"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "val = 79"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "val = 79",
                    ""
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "val = 79",
                    ""
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "val = 79",
                    ""
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "val = 79",
                    ""
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "val = 79",
                    ""
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "val = 79",
                    ""
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    ""
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    ""
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    ""
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    ""
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    "84",
                    ""
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    "84",
                    ""
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    "84",
                    ""
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    "84",
                    ""
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    "84",
                    "79",
                    ""
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    "96",
                    "",
                    "",
                    "val = 79",
                    "28",
                    "84",
                    "79",
                    ""
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "\u0398(1)"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "",
                    "\u0398(1)",
                    "\u0398(1)"
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "",
                    "\u0398(1)",
                    "\u0398(1)",
                    ""
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "",
                    "",
                    "\u0398(1)",
                    "\u0398(1)",
                    ""
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "",
                    "",
                    "\u0398(1)",
                    "\u0398(1)",
                    "\u0398(1)",
                    ""
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "",
                    "",
                    "\u0398(1)",
                    "\u0398(1)",
                    "\u0398(1)",
                    "",
                    "\u0398(# of iterations)"
                ]
            },
            {
                "slide_number": 66,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 67,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 68,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 69,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 70,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    ""
                ]
            },
            {
                "slide_number": 71,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    ""
                ]
            },
            {
                "slide_number": 72,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 73,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 74,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 75,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 76,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 77,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 78,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 79,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 80,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 81,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    ""
                ]
            },
            {
                "slide_number": 82,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 83,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 84,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 85,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 86,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 87,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 88,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 89,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 90,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 91,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 92,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 93,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem",
                    ""
                ]
            },
            {
                "slide_number": 94,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 95,
                "slide_title": "The Sorted-Search Problem",
                "slide_text": [
                    "The Sorted-Search Problem"
                ]
            },
            {
                "slide_number": 96,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "",
                    "",
                    "\u0398(1)",
                    "\u0398(1)",
                    "\u0398(1)",
                    "",
                    "\u0398(# of iterations)"
                ]
            },
            {
                "slide_number": 97,
                "slide_title": "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                "slide_text": [
                    "int sortedSearch(int srtArr[], int srtArrSize, int val){\n    int low, high, mid;\n    int ind;\n    bool found;\n    \n    low = 0;\n    high = srtArrSize - 1;\n    found = false;\n    while((found == false) && (low <= high)){\n        mid = (low + high) / 2;\n        if (srtArr[mid] == val){\n            ind = mid;\n            found = true;\n        }\n        else if (val < srtArr[mid])\n            high = mid - 1;\n        else // val > srtArr[mid]\n            low = mid + 1;\n    }\n    \n    if(found == true)\n        return ind;\n    else\n        return -1;\n}",
                    "",
                    "",
                    "",
                    "\u0398(1)",
                    "\u0398(1)",
                    "\u0398(1)",
                    "",
                    "\u0398(# of iterations)",
                    "T(n) = \u0398(log2n)"
                ]
            },
            {
                "slide_number": 98,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 99,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 100,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 101,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 102,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 103,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 104,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 105,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 106,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 107,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 108,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 109,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 110,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 111,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 112,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 113,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 114,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 115,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 116,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 117,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic"
                ]
            },
            {
                "slide_number": 118,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic",
                    "f(n)=log(n)",
                    "f(n)= n"
                ]
            },
            {
                "slide_number": 119,
                "slide_title": "Linear vs Logarithmic",
                "slide_text": [
                    "Linear vs Logarithmic",
                    "f(n)=log(n)",
                    "f(n)= n",
                    "f(n)= n",
                    "f(n)=log(n)"
                ]
            }
        ]
    },
    {
        "module_number": 11,
        "module_name": "Fundamental Sorting Algorithms",
        "file_name": "11 - Fundamental Sorting Algorithms.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Fundamental Sorting Algorithms",
                "slide_text": [
                    "Fundamental Sorting Algorithms"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "The Sorting Problem",
                "slide_text": [
                    "The Sorting Problem"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Problem\nGiven an array arr of numbers, reorder them, so that at the end, they are in an increacing order. \u000b\u000b",
                "slide_text": [
                    "Problem\nGiven an array arr of numbers, reorder them, so that at the end, they are in an increacing order. \u000b\u000b",
                    "The Sorting Problem"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Problem\nGiven an array arr of numbers, reorder them, so that at the end, they are in an increacing order. \u000b\u000b\nExample\u000bIf arr is an array containing: [5, 8, 12, 7, 8, 10]",
                "slide_text": [
                    "Problem\nGiven an array arr of numbers, reorder them, so that at the end, they are in an increacing order. \u000b\u000b\nExample\u000bIf arr is an array containing: [5, 8, 12, 7, 8, 10]",
                    "The Sorting Problem"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Problem\nGiven an array arr of numbers, reorder them, so that at the end, they are in an increacing order. \u000b\u000b\nExample\u000bIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nAfter sorting, arr will look like: [5, 7, 8, 8, 10, 12]",
                "slide_text": [
                    "Problem\nGiven an array arr of numbers, reorder them, so that at the end, they are in an increacing order. \u000b\u000b\nExample\u000bIf arr is an array containing: [5, 8, 12, 7, 8, 10]\nAfter sorting, arr will look like: [5, 7, 8, 8, 10, 12]",
                    "The Sorting Problem"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Sorting Algorithms",
                "slide_text": [
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Selection-Sort",
                "slide_text": [
                    "Selection-Sort",
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Selection-Sort\nInsertion-Sort",
                "slide_text": [
                    "Selection-Sort\nInsertion-Sort",
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Selection-Sort\nInsertion-Sort\nBubble-Sort",
                "slide_text": [
                    "Selection-Sort\nInsertion-Sort\nBubble-Sort",
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort",
                "slide_text": [
                    "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort",
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort",
                "slide_text": [
                    "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort",
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort\nHeap-Sort",
                "slide_text": [
                    "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort\nHeap-Sort",
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort\nHeap-Sort\n\u2026",
                "slide_text": [
                    "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort\nHeap-Sort\n\u2026",
                    "Sorting Algorithms"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort\nHeap-Sort\n\u2026",
                "slide_text": [
                    "Selection-Sort\nInsertion-Sort\nBubble-Sort\nMerge-Sort\nQuick-Sort\nHeap-Sort\n\u2026",
                    "Sorting Algorithms",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12",
                    ""
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12",
                    "1",
                    "5"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "2",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "14",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12",
                    "2",
                    "14"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "3",
                    "4",
                    "8",
                    "10",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12",
                    "3",
                    "10"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "10",
                    "4",
                    "8",
                    "3",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "10",
                    "4",
                    "8",
                    "3",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "10",
                    "4",
                    "8",
                    "3",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "3",
                    "10",
                    "4",
                    "8",
                    "3",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12",
                    "3",
                    "8"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "Selection Sort",
                "slide_text": [
                    "Selection Sort",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5",
                    "14",
                    "8",
                    "10",
                    "4",
                    "3",
                    "3",
                    "4",
                    "13",
                    "2",
                    "18",
                    "19",
                    "",
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "9",
                    "8",
                    "7",
                    "10",
                    "11",
                    "12"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int currInd\n   \n   for(currInd = 0; currInd < arrSize; currInd++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int currInd\n   \n   for(currInd = 0; currInd < arrSize; currInd++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, _, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      \n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      \n   }\n}\n"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high);\n\nvoid selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "Let:\t n = high \u2013 low + 1\n"
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "Let:\t n = high \u2013 low + 1\n\nT(n) = "
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(1)",
                    "Let:\t n = high \u2013 low + 1\n\nT(n) = "
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(1)",
                    "Let:\t n = high \u2013 low + 1\n\nT(n) = "
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "",
                    "",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(1)",
                    "Let:\t n = high \u2013 low + 1\n\nT(n) = "
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "",
                    "\u03b8(1)",
                    "",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(1)",
                    "Let:\t n = high \u2013 low + 1\n\nT(n) = "
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "Let:\t n = high \u2013 low + 1\n\nT(n) = ",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(n)",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(1)"
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                "slide_text": [
                    "int findIndexOfMin(int arr[], int low, int high){\n    int min, minInd;\n    int i; \n\n    min = arr[low];\n    minInd = low;\n    for (i = low+1; i <= high; i++){\n        if (arr[i] < min){\n            min = arr[i];\n            minInd = i;\n        }\n    }\n\n    return minInd;\n}",
                    "Let:\t n = high \u2013 low + 1\n\nT(n) = \u03b8(n)",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(n)",
                    "",
                    "\u03b8(1)",
                    "",
                    "\u03b8(1)"
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n"
                ]
            },
            {
                "slide_number": 66,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize"
                ]
            },
            {
                "slide_number": 67,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) ="
                ]
            },
            {
                "slide_number": 68,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) =",
                    ""
                ]
            },
            {
                "slide_number": 69,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) =",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 70,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) =",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 71,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) = n",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 72,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) = n + (n-1)",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 73,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) = n + (n-1) + (n-2)",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 74,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "Let:\t n = arrSize\n\nT(n) = n + (n-1) + (n-2) + \u2026 + 2 + 1",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 75,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "* * * *\n* * *\n* * \n*",
                    "",
                    "Let:\t n = arrSize\n\nT(n) = n + (n-1) + (n-2) + \u2026 + 2 + 1",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 76,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "* * * *\n* * *\n* * \n*",
                    "",
                    "",
                    "Let:\t n = arrSize\n\nT(n) = n + (n-1) + (n-2) + \u2026 + 2 + 1",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 77,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "* * * *\n* * *\n* * \n*",
                    "",
                    "",
                    "Let:\t n = arrSize\n\nT(n) = n + (n-1) + (n-2) + \u2026 + 2 + 1 = \u03b8(n2)\u000b",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 78,
                "slide_title": "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                "slide_text": [
                    "void selectionSort(int arr[], int arrSize){\n   int i, minInd;\n   \n   for(i = 0; i < arrSize; i++){\n      minInd = findIndexOfMin(arr, i, arrSize-1);\n      swap(arr[i], arr[minInd]);\n   }\n}\n",
                    "* * * *\n* * *\n* * \n*",
                    "",
                    "",
                    "Let:\t n = arrSize\n\nT(n) = n + (n-1) + (n-2) + \u2026 + 2 + 1 = \u03b8(n2)\u000b\n\uf0ea\nT(n) = \u0398(n2)\n",
                    "",
                    "\u03b8(n \u2013 i)",
                    ""
                ]
            },
            {
                "slide_number": 79,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort"
                ]
            },
            {
                "slide_number": 80,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18"
                ]
            },
            {
                "slide_number": 81,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \t",
                    "Step 2: \t",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 82,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \t",
                    "Step 2: \t",
                    "Step 3: \t",
                    ""
                ]
            },
            {
                "slide_number": 83,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "",
                    "Step 2: \t",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 84,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "5",
                    "",
                    "8",
                    "10",
                    "14",
                    "Step 2: \t",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 85,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "5",
                    "",
                    "8",
                    "10",
                    "14",
                    "Step 2: \t",
                    "Step 3: \t",
                    ""
                ]
            },
            {
                "slide_number": 86,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "5",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 87,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "5",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "1",
                    "3",
                    "13",
                    "18",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 88,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "5",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "1",
                    "3",
                    "13",
                    "18",
                    "Step 3: \t",
                    ""
                ]
            },
            {
                "slide_number": 89,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "5",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "1",
                    "3",
                    "13",
                    "18",
                    "Step 3: \tMerge the two halves together \t\t\t\tinto one sorted sequence",
                    ""
                ]
            },
            {
                "slide_number": 90,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "Step 3: \tMerge the two halves together \t\t\t\tinto one sorted sequence",
                    "5",
                    "1",
                    "",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "1",
                    "3",
                    "13",
                    "18",
                    "3",
                    "5",
                    "8",
                    "10",
                    "13",
                    "14",
                    "18"
                ]
            },
            {
                "slide_number": 91,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \t",
                    "Step 2: \t",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 92,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "",
                    "Step 2: \t",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 93,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "5",
                    "",
                    "8",
                    "10",
                    "14",
                    "Step 2: \t",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 94,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "5",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 95,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "5",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "1",
                    "3",
                    "13",
                    "18",
                    "Step 3: \t"
                ]
            },
            {
                "slide_number": 96,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "5",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "1",
                    "3",
                    "13",
                    "18",
                    "Step 3: \tMerge the two halves together \t\t\t\tinto one sorted sequence",
                    ""
                ]
            },
            {
                "slide_number": 97,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "Step 1: \tSort (recursively) the first half",
                    "Step 2: \tSort (recursively) the second half",
                    "Step 3: \tMerge the two halves together \t\t\t\tinto one sorted sequence",
                    "5",
                    "1",
                    "",
                    "",
                    "",
                    "8",
                    "10",
                    "14",
                    "1",
                    "3",
                    "13",
                    "18",
                    "3",
                    "5",
                    "8",
                    "10",
                    "13",
                    "14",
                    "18"
                ]
            },
            {
                "slide_number": 98,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 99,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 100,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 101,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 102,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    ""
                ]
            },
            {
                "slide_number": 103,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "arr"
                ]
            },
            {
                "slide_number": 104,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "arr"
                ]
            },
            {
                "slide_number": 105,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "low",
                    "high",
                    "",
                    "",
                    "arr"
                ]
            },
            {
                "slide_number": 106,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "low",
                    "high",
                    "",
                    "",
                    "arr"
                ]
            },
            {
                "slide_number": 107,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 108,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 109,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 110,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 111,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    ""
                ]
            },
            {
                "slide_number": 112,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 113,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 114,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 115,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 116,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 117,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 118,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\nergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 119,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 120,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 121,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 122,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 123,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high",
                    "mid+1"
                ]
            },
            {
                "slide_number": 124,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n\n    }\n}",
                    "",
                    "",
                    "",
                    "mid",
                    "low",
                    "high",
                    "mid+1"
                ]
            },
            {
                "slide_number": 125,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 126,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 127,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 128,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 129,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 130,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 131,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 132,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 133,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 134,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                    "",
                    "",
                    "",
                    "",
                    "mid",
                    "mid+1",
                    "low",
                    "high"
                ]
            },
            {
                "slide_number": 135,
                "slide_title": "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}",
                "slide_text": [
                    "void merge(int arr[], int lowLeft, int highLeft, \t\t\t\t\t\t\t\t              int highRight);\n\nvoid mergeSort(int arr[], int low, int high){\n    int mid;\n    \n    if (low == high)\n        return;\n    else{\n        mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid+1, high);\n        merge(arr, low, mid, high);\n    }\n}"
                ]
            },
            {
                "slide_number": 136,
                "slide_title": "merge",
                "slide_text": [
                    "merge"
                ]
            },
            {
                "slide_number": 137,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21"
                ]
            },
            {
                "slide_number": 138,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 139,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "min1",
                    "min2"
                ]
            },
            {
                "slide_number": 140,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "min1",
                    "min2",
                    "ind"
                ]
            },
            {
                "slide_number": 141,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "min1",
                    "min2",
                    "ind",
                    "1"
                ]
            },
            {
                "slide_number": 142,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 143,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3"
                ]
            },
            {
                "slide_number": 144,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3"
                ]
            },
            {
                "slide_number": 145,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4"
                ]
            },
            {
                "slide_number": 146,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4"
                ]
            },
            {
                "slide_number": 147,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6"
                ]
            },
            {
                "slide_number": 148,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6"
                ]
            },
            {
                "slide_number": 149,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7"
                ]
            },
            {
                "slide_number": 150,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7"
                ]
            },
            {
                "slide_number": 151,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7",
                    "8"
                ]
            },
            {
                "slide_number": 152,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7",
                    "8"
                ]
            },
            {
                "slide_number": 153,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7",
                    "8",
                    "10"
                ]
            },
            {
                "slide_number": 154,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7",
                    "8",
                    "10"
                ]
            },
            {
                "slide_number": 155,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7",
                    "8",
                    "10",
                    ""
                ]
            },
            {
                "slide_number": 156,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7",
                    "8",
                    "10",
                    "",
                    "13",
                    "15",
                    "21",
                    ""
                ]
            },
            {
                "slide_number": 157,
                "slide_title": "merge",
                "slide_text": [
                    "merge",
                    "",
                    "",
                    "1",
                    "",
                    "",
                    "",
                    "10",
                    "6",
                    "3",
                    "",
                    "",
                    "",
                    "",
                    "7",
                    "13",
                    "4",
                    "8",
                    "",
                    "15",
                    "",
                    "21",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "4",
                    "6",
                    "7",
                    "8",
                    "10",
                    "13",
                    "15",
                    "21"
                ]
            },
            {
                "slide_number": 158,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18"
                ]
            },
            {
                "slide_number": 159,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18"
                ]
            },
            {
                "slide_number": 160,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "",
                    "10",
                    "8"
                ]
            },
            {
                "slide_number": 161,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "",
                    "3",
                    "18"
                ]
            },
            {
                "slide_number": 162,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "8",
                    "",
                    "10",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "18",
                    "",
                    "3",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "",
                    "3",
                    "18"
                ]
            },
            {
                "slide_number": 163,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18"
                ]
            },
            {
                "slide_number": 164,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5"
                ]
            },
            {
                "slide_number": 165,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5"
                ]
            },
            {
                "slide_number": 166,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14"
                ]
            },
            {
                "slide_number": 167,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5"
                ]
            },
            {
                "slide_number": 168,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14"
                ]
            },
            {
                "slide_number": 169,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8"
                ]
            },
            {
                "slide_number": 170,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8"
                ]
            },
            {
                "slide_number": 171,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10"
                ]
            },
            {
                "slide_number": 172,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10"
                ]
            },
            {
                "slide_number": 173,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14"
                ]
            },
            {
                "slide_number": 174,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18"
                ]
            },
            {
                "slide_number": 175,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 176,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13"
                ]
            },
            {
                "slide_number": 177,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13",
                    "",
                    "1"
                ]
            },
            {
                "slide_number": 178,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13",
                    "",
                    "1",
                    "1",
                    "13"
                ]
            },
            {
                "slide_number": 179,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13",
                    "",
                    "1",
                    "1",
                    "13",
                    "",
                    "",
                    "3",
                    "18"
                ]
            },
            {
                "slide_number": 180,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13",
                    "",
                    "1",
                    "1",
                    "13",
                    "",
                    "",
                    "3",
                    "18",
                    "",
                    "18"
                ]
            },
            {
                "slide_number": 181,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13",
                    "",
                    "1",
                    "1",
                    "13",
                    "",
                    "",
                    "3",
                    "18",
                    "",
                    "18",
                    "",
                    "3"
                ]
            },
            {
                "slide_number": 182,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13",
                    "",
                    "1",
                    "1",
                    "13",
                    "",
                    "",
                    "3",
                    "18",
                    "",
                    "18",
                    "",
                    "3",
                    "3",
                    "18",
                    "3",
                    "18"
                ]
            },
            {
                "slide_number": 183,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "14",
                    "",
                    "5",
                    "5",
                    "14",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "8",
                    "",
                    "10",
                    "10",
                    "8",
                    "8",
                    "10",
                    "14",
                    "10",
                    "8",
                    "5",
                    "5",
                    "8",
                    "10",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "13",
                    "",
                    "1",
                    "1",
                    "13",
                    "",
                    "",
                    "3",
                    "18",
                    "",
                    "18",
                    "",
                    "3",
                    "3",
                    "18",
                    "3",
                    "18",
                    "1",
                    "3",
                    "13",
                    "18"
                ]
            },
            {
                "slide_number": 184,
                "slide_title": "Merge Sort",
                "slide_text": [
                    "Merge Sort",
                    "",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "10",
                    "8",
                    "13",
                    "5",
                    "18",
                    "",
                    "14",
                    "",
                    "",
                    "",
                    "10",
                    "8",
                    "5",
                    "",
                    "",
                    "",
                    "",
                    "1",
                    "3",
                    "13",
                    "18",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "",
                    "10",
                    "8",
                    "",
                    "14",
                    "",
                    "5",
                    "",
                    "8",
                    "",
                    "10",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "18",
                    "",
                    "3",
                    "",
                    "13",
                    "",
                    "1",
                    "",
                    "",
                    "3",
                    "18",
                    "5",
                    "14",
                    "8",
                    "10",
                    "5",
                    "8",
                    "10",
                    "14",
                    "1",
                    "13",
                    "3",
                    "18",
                    "1",
                    "3",
                    "13",
                    "18",
                    "1",
                    "3",
                    "5",
                    "8",
                    "10",
                    "13",
                    "14",
                    "18"
                ]
            },
            {
                "slide_number": 185,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 186,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 187,
                "slide_title": "",
                "slide_text": []
            },
            {
                "slide_number": 188,
                "slide_title": "",
                "slide_text": [
                    "",
                    ""
                ]
            },
            {
                "slide_number": 189,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 190,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 191,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)"
                ]
            },
            {
                "slide_number": 192,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)"
                ]
            },
            {
                "slide_number": 193,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)"
                ]
            },
            {
                "slide_number": 194,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)"
                ]
            },
            {
                "slide_number": 195,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 196,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 197,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 198,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 199,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 200,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 201,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 202,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 203,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 204,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 205,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 206,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 207,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 208,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 209,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 210,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 211,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 212,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 213,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 214,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 215,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 216,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 217,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 218,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 219,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 220,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 221,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 222,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            },
            {
                "slide_number": 223,
                "slide_title": "",
                "slide_text": [
                    "",
                    "",
                    "",
                    "",
                    "(n)",
                    "(1)",
                    "(1)",
                    "(1)",
                    "(1)"
                ]
            }
        ]
    },
    {
        "module_number": 12,
        "module_name": "Pointers",
        "file_name": "12 - Pointers.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Pointers \u2013 Why?",
                "slide_text": [
                    "Pointers \u2013 Why?",
                    "A way to store a \u201creference\u201d to an object\nA way to store large amounts of information not associated with a function (the heap)\nA way to link objects together"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "What it looks like",
                "slide_text": [
                    "What it looks like",
                    "In C++ a pointer must specify the datatype that it points to\nIn main memory, the pointer is simply a stored number\nThe stored number represents the memory address of the item being pointed to\n\n\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Getting pointers to point",
                "slide_text": [
                    "Getting pointers to point",
                    "Pointers can be made to point to something\nThe address of the item being pointed to is stored in the pointer.\nWe can get the address of an item by using the \u201caddress-of\u201d operator, the ampersand \u201c&\u201d, in front of the variable\u2019s name.\n\n\n\n"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Accessing data from a pointer",
                "slide_text": [
                    "Accessing data from a pointer",
                    "Pointers would be pretty useless if all they could do was point.\nWe can access the data that a pointer is pointing to by \u201cdereferencing\u201d the pointer.  We do this using the dereferencing operator, the star \u201c*\u201d.\n"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "What if a pointer doesn\u2019t point to anything?",
                "slide_text": [
                    "What if a pointer doesn\u2019t point to anything?",
                    "Pointers always point to something\nIf the pointer isn\u2019t pointing to something VALID, it should point to:\nNULL or nullptr\n"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Defining multiple pointers",
                "slide_text": [
                    "Defining multiple pointers",
                    "When defining pointers, the * is associated with only the next item in the sequence.  If you need multiple pointers in the same line, you need more stars!\n"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Lets get dynamic!",
                "slide_text": [
                    "Lets get dynamic!",
                    "Pointers wouldn\u2019t be much use if they could only point to objects that were created already!\nPointers can point to heap-dynamic memory!\nHeap-Dynamic memory is allocated when you ask for it, and remains allocated until you destroy it.\nThis means it can survive function calls!\nYou have to be very careful to destroy it after you\u2019re done, it\u2019s not destroyed automatically."
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Well, that\u2019s new",
                "slide_text": [
                    "Well, that\u2019s new",
                    "A variable can be created on the heap for a particular datatype, but it does not have a name.\nIf it doesn\u2019t have a name, how do you refer to it?  \u2026pointers!\nOnce memory is allocated on the heap, it will not be deallocated until you do it, or the program ends.\nIf you lose track of a head-dynamic variable, it becomes \u201cgarbage on the heap\u201d aka, a \u201cmemory-leak.\u201d"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "For every new, there must be delete",
                "slide_text": [
                    "For every new, there must be delete",
                    "If memory is allocated, it must be destroyed.\nYou must destroy it once and only once\nForgetting to destroy it results in a memory leak\nDeleting it twice results in a \u201cdouble delete,\u201d which will crash your program\nDeleting NULL or nullptr has no effect.\n"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "What about arrays?",
                "slide_text": [
                    "What about arrays?",
                    "Heap-dynamic arrays don\u2019t have to have a static size!\nOnce created, heap-dynamic arrays can\u2019t grow, but they can be created to be any size initially.\nSince we are working with a pointer, a new, larger, heap-dynamic array can be made to replace a smaller one!\nDeleting a heap-dynamic array is a bit different\n"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "What can we do with heap-dynamic arrays",
                "slide_text": [
                    "What can we do with heap-dynamic arrays",
                    "Heap-dynamic arrays are no different than the \u201cnormal\u201d arrays which you\u2019ve been using.\nUse heap-dynamic arrays just like all other arrays, using the square-brackets operator.\nYou can also use pointer arithmetic\u2026"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Pointer arithmetic",
                "slide_text": [
                    "Pointer arithmetic",
                    "C++ allows pointers to be manipulated using simple math operations.\nUse the addition operator (\u201c+\u201d) to move the pointer forward some number of spaces (x =x+5 will make the pointer point to 5 elements higher in the array)\nUse the subtraction operator to move the pointer backwards\nUse ++ or \u2013 as you\u2019d like."
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "A real-example of a growing array",
                "slide_text": [
                    "A real-example of a growing array",
                    "(Laura, I need to insert a screen capture video here)"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Someone\u2019s done this already",
                "slide_text": [
                    "Someone\u2019s done this already",
                    "Of course, C++ has something called the \u201cStandard Template Library.\u201d\nThe STL contains a data-type known as a \u201cvector.\u201d\nA vector is a dynamically growing array, in which you don\u2019t need to worry about the size, it will even tell you how many items are in it."
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "But wait\u2026 there\u2019s more!",
                "slide_text": [
                    "But wait\u2026 there\u2019s more!",
                    "Vectors allow us to access all of the elements by using a \u201cranged for loop\u201d\nThe syntax is a bit strange (it was borrowed from another language and brought into C++ later)\n"
                ]
            }
        ]
    },
    {
        "module_number": 16,
        "module_name": "File Processing",
        "file_name": "16 - File Processing.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "File Processing",
                "slide_text": [
                    "File Processing",
                    "Data cannot be typed in at the keyboard every time\nThere needs to be a way to access data on the file system\nInput \u2013 reading data into your program\nOutput \u2013 writing data out from your program\n"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Files and locks",
                "slide_text": [
                    "Files and locks",
                    "Files all contain a name\nCaution: the \u201cextension\u201d (.txt, .xls, .doc) might be hidden but still present\nTo open a file, you must know its name\nFiles exist in a directory (aka folder)\nA file exists in one directory\nIf you don\u2019t specify a directory, the \u201ccurrent\u201d directory is used\nIn Visual Studio, the \u201ccurrent\u201d directory will be where your .cpp file is located\nYou may specify another directory by using \u201c\\\u201d (backslash)\nIf a file is in use for writing, it may be locked to prohibit reading or writing"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Objects",
                "slide_text": [
                    "Objects",
                    "C++ has an internal representation for a file\nThe datatype differs if we\u2019re discussing an input file or an output file\nInput files are represented by ifstream\nOutput files are represented by ofstream"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Steps to creating",
                "slide_text": [
                    "Steps to creating",
                    "First you must \u201c#include <fstream>\u201d in your program\nYou must create an object of the type appropriate to the action you wish to perform (input or output)\nYou must \u201copen\u201d the connection to the file on the storage system\nThis may fail, you should check it!\nOnce opened, the object can be used for input or output in much the same way as we used cin and cout.\n"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Passing to a function",
                "slide_text": [
                    "Passing to a function",
                    "ifstream and ofstream objects may be passed to and returned from a function\nWhen passing, they MUST be passed (or returned) by reference\nThe act of writing to or reading from one of these objects changes the object\n"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "cin and cout",
                "slide_text": [
                    "cin and cout",
                    "cin and cout are ALSO objects.\ncin\u2019s datatype is istream, cout\u2019s datatype is ostream\nifstream is a derived class of istream so we can setup our functions to use \u201cistream&\u201d and it can accept either cin or a file stream!"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Output",
                "slide_text": [
                    "Output",
                    "C++ makes it relatively easy to do output\nCreate the object: ofstream outFile;\nAnd open it: outFile.open(\u201cfilename.txt\u201d);\nYou can also use the constructor for the ofstream class:\nofstream outFile(\u201cfilename.txt\u201d)\nRarely will opening an output file fail, but it may. \nYou might not have permission\nThe drive might be full\nOnce open, you can write to the output file exactly as you would to the screen\noutfile<<\u201cHello world\u201d<<endl;"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "More on output",
                "slide_text": [
                    "More on output",
                    "When opening a file, \nif the file doesn\u2019t exist, it will be created\nIf the does exist, it will be overwritten!\nWhen you are done, call the close function on the file.\nRealize that there is a buffer for the output so the actual writing of the file may not happen until you call close, the ofstream object is destroyed or your program ends."
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "",
                "slide_text": [
                    "",
                    "(video of creating a file and outputting some information)"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Input",
                "slide_text": [
                    "Input",
                    "Just like ofstream, we have ifstream for reading in information\nIfstream inFile(\u201cfile.txt\u201d); or you can use .open just like on ofstream.\nifstream objects are more likely to fail when opening\nUsually due to a bad filename or the lack of existence of a file\nIt is vital that you check to see that a file is opened successfully\n ifstream includes a bool member which allows you to check the validity of the file: \u201cif(inFile)\u201d or better yet \u201cwhile(infile)\u201d\nIf you are going to try opening the file again, you must clear the flags using .clear\n"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "",
                "slide_text": [
                    "",
                    "(video of opening a file stream object)"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Reading in data",
                "slide_text": [
                    "Reading in data",
                    "Reading in data can be done in much the same way as you read in from the keyboard, you just don\u2019t have to wait for the user.\nMany books use .eof to detect the \u201cend of file\u201d but we recommend against that\n\u201cwhile (inFile>>temp)\u201d does both a read operation and test if that read was successful.\nUsing the input operator (>>), C++ will:\nSkip leading whitespace characters\nRead in \u201cvalid\u201d characters\nStop when it reaches trailing whitespace or an invalid character"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "What\u2019s valid",
                "slide_text": [
                    "What\u2019s valid",
                    "What constitutes valid characters depends on the data type.\nFor strings, anything is valid\nFor ints, only whole numbers (no .) is valid\nFor doubles, only one period is valid, a second is considered invalid\nFor char, only one character is valid, the second is invalid\nEtc\n"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Getline",
                "slide_text": [
                    "Getline",
                    "We can use a simple function to get an entire line of text\nThis does NOT skip leading whitespace and captures the entire line until the return character\ngetLine(inFile,myString);\nIf the file pointer is waiting at a return character, getLine will return a blank line\n"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "ignore",
                "slide_text": [
                    "ignore",
                    "We can use the .ignore function to skip characters. \nWe specify how many characters to skip and we specify which character to stop at\nCommonly: inFile.ignore(9999,\u2019\\n\u2019) which means skip up to 9,999 characters or the first return character that you see.\n"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "seekg",
                "slide_text": [
                    "seekg",
                    "inFile.seekg allows us to move around inside the file\nA positive number moves that many characters ahead\nA negative number moves that many characters back\nA zero moves us to the beginning of the file."
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Reading and writing?",
                "slide_text": [
                    "Reading and writing?",
                    "What if we want to do both?\nSurprisingly, its very strange to want to edit a file in place.\nUsually we will read in the ENTIRE file, make the changes in memory and then write out the entire file to the disk.\nThis means we\u2019re not doing both a read and a write at the same time!"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Appending",
                "slide_text": [
                    "Appending",
                    "When passed as a second parameter to .open, ios::app is a way to tell C++ that you want to append to the file, and not overwrite it.\nIf the file doesn\u2019t exist, it will be created\nIf the file does exist, anything you add will be added to the END of the file, the original contents will remain."
                ]
            }
        ]
    },
    {
        "module_number": 18,
        "module_name": "Stacks and Queues",
        "file_name": "18 - Stacks and Queues.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "",
                "slide_text": [
                    "",
                    ""
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Stacks and Queues - Intro",
                "slide_text": [
                    "Stacks and Queues - Intro",
                    "In this module\nStacks\nWhat it is\nHow it works\nHow it\u2019s designed\nWhat its used for\nQueues\nWhat it is\nHow it works\nHow it\u2019s designed\nWhat it\u2019s used for\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Stack",
                "slide_text": [
                    "Stack",
                    "Last in, First out (or First in, Last out) FILO or LIFO\nThe last item inserted is the first removed\nAccessor functions are usually \u201cpush,\u201d \u201cpop\u201d and \u201ctop\u201d\nSupplemental functions\nClear\nisEmpty\nsize"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Stack, how it works",
                "slide_text": [
                    "Stack, how it works",
                    "Push simply adds to the front\nPop simply removes from the front\nSupplemental functions need to be provided as well as Big 3, if applicable\n"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Stack storage",
                "slide_text": [
                    "Stack storage",
                    "Comparison of storage methods"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Stack Storage -Continued",
                "slide_text": [
                    "Stack Storage -Continued",
                    "Since we recognize that pop will happen more often than clear, the list makes considerably more sense to use than the array.\nWe will use the built-in STL list class.\nPush will call push_front\nPop will call pop_front\nOther functions will be mapped to equivalent STL functions"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Stack Code",
                "slide_text": [
                    "Stack Code"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Stack, what is it used for",
                "slide_text": [
                    "Stack, what is it used for",
                    "Compilers\nUsed for pattern matching, ({[ matches ]})\nWhen an open is encountered, it is pushed\nWhen a close is encountered, it is compared to the open at the top and, if a match, the top is popped.\n(animate next slide, if possible)\nMath Infix to post-fix conversion\nMath post-fix to value evaluation"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "",
                "slide_text": [
                    ""
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Order of insertions ",
                "slide_text": [
                    "Order of insertions ",
                    "push(\u2018(\u2018) \u2013 stack now: (\ntop \u2013 compares \u2018(\u2018 to \u2018)\u2019\npop \u2013 stack now: (empty)\npush(\u2018{\u2018) \u2013 stack now: {\npush(\u2018[\u2018) \u2013 stack now: {[\ntop \u2013 compares \u2018[\u2018 to \u2018]\u2019\npop \u2013 stack now: {\npush(\u2018{\u2018) stack now: {{\ntop \u2013 compares \u2018{\u2018 to \u2018}\u2019\npop \u2013 stack now: {\npush(\u2018[\u2018) \u2013 stack now: {[\npush(\u2018(\u2018) \u2013 stack now: {[( - this is the image I show\ntop \u2013 compares \u2018(\u2018 to \u2018)\u2019"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Queue, what is it",
                "slide_text": [
                    "Queue, what is it",
                    "First in, first out (FIFO) data structure\nThe first item which is enqueued if the first item dequed\nOften used for buffering information\nPush, pop and top are often the accessor functions, however it may be enqueue, dequeue and top.\nSupplemental functions\nclear\nisEmpty\nsize"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Queue, how it works",
                "slide_text": [
                    "Queue, how it works",
                    "Enqueue adds to the end\nDequeue removes from the front\nCould also be vice-versa\nSupplemental functions need to be provided as well as Big 3, if applicable\n"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "Queue Storage",
                "slide_text": [
                    "Queue Storage"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Queue -Continued",
                "slide_text": [
                    "Queue -Continued",
                    "Much more obvious that we will use a List\nSimilar implementation to the stack with minor changes\nEnqueue will add to the end of the queue\nDequeue will remove from the front\nNecessary to make sure the list has both head and tail pointers."
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Queue Code",
                "slide_text": [
                    "Queue Code",
                    ""
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "Queue, what is it used for",
                "slide_text": [
                    "Queue, what is it used for",
                    "Storage Buffers\nAnywhere that we need an ordered list with First in, First out properties"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Queue image (animate????)",
                "slide_text": [
                    "Queue image (animate????)"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Stacks and Queues - Conclusion",
                "slide_text": [
                    "Stacks and Queues - Conclusion",
                    "What we learned\nStacks\nHow they work\nHow they are implemented\nWhat they are used for\nQueues\nHow they work\nHow they are implemented\nWhat they are used for"
                ]
            }
        ]
    },
    {
        "module_number": 20,
        "module_name": "Computer Architecture Module 20 Pt 2",
        "file_name": "20 - Computer Architecture Module 20 Pt 2.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Computer Architecture\u000bPart 2",
                "slide_text": [
                    "Computer Architecture\u000bPart 2",
                    "Jerry B. Backer\nNYU Tandon School of Engineering\n"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Outline",
                "slide_text": [
                    "Outline",
                    "Branch and Jump Instructions\nUsages of Branch and Jump\nExamples of Branch and Jump"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Instructions Covered So Far",
                "slide_text": [
                    "Instructions Covered So Far",
                    "Load Doubleword (LD)\n\nStore Doubleword (SD)\n\nDoubleword Add (DADD)\n\nDoubleword OR (DOR)"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Other MIPS64 Instructions\t",
                "slide_text": [
                    "Other MIPS64 Instructions\t",
                    "Immediate ALU instructions: DADDI, DORI, DANDI\nUseful for operations using hardcoded values\nint x = 3; int y = x +17\nImmediate instruction hardcodes value of 17. No need for register"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Other MIPS64 Instructions\t",
                "slide_text": [
                    "Other MIPS64 Instructions\t",
                    "Immediate ALU instructions: DADDI, DORI, DANDI\nUseful for operations using hardcoded values\nint x = 3; int y = x +17\nImmediate instruction hardcodes value of 17. No need for register\nDADDI Rt, Rs, DoImm # Rt \uf0df Rs+ DoImm+\nImmediate is 16 bits \nIt needs to be sign-extended before doing addition\nUse case: int x = 3; int y = x + 17\nValue 17 is hardcoded in instruction as: 00000000000010001"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Other MIPS64 Instructions\t",
                "slide_text": [
                    "Other MIPS64 Instructions\t",
                    "Immediate ALU instructions: DADDI, DORI, DANDI\nUseful for operations using hardcoded values\nint x = 3; int y = x +17\nImmediate instruction hardcodes value of 17. No need for register\nDADDI Rt, Rs, DoImm # Rt \uf0df Rs+ DoImm+\nImmediate is 16 bits \nIt needs to be sign-extended before doing addition\nUse case: int x = 3; int y = x + 17\nValue 17 is hardcoded in instruction as: 00000000000010001\nDORI Rt, Rs, DoImm # Rt \uf0df Rs  || DoImm\nImmediate is 16 bits\nFor DORI, DANDI (and other boolean operations), immediate value is not sign-extended. It is padded with zeroes to make it 64 bits (zero-extension\n\n"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "DADDI",
                "slide_text": [
                    "DADDI",
                    "DADDI Rt, Rs, DoImm # Rt \uf0df Rs+ DoImm+\nImmediate is 16 bits \nIt needs to be sign-extended before doing addition"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Jump Instructions",
                "slide_text": [
                    "Jump Instructions",
                    "Allow CPU to jump to specific locations in code\nUsed for function calls, return from functions, if/else statements, case statements, interrupts, etc\nTwo types of JumpInstructions\nUnconditional: Always  jump to location\nConditional : Branch to location based on specific condition\nLocation to jump (target address) can be:\nRelative: Target is Func(PC, param1, param2)\nIndirect: Target  is in register or memory. \n"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Jump Instructions",
                "slide_text": [
                    "Jump Instructions",
                    "Allow CPU to jump to specific locations in code\nUsed for function calls, return from functions, if/else statements, case statements, interrupts, etc\nTwo types of JumpInstructions\nUnconditional: Always  jump to location\nConditional : Branch to location based on specific condition\nLocation to jump (target address) can be:\nRelative: Target is Func(PC, param1, param2)\nIndirect: Target  is in register or memory. \n"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "MIPS64 Unconditional Jump Instructions",
                "slide_text": [
                    "MIPS64 Unconditional Jump Instructions",
                    "J Address: Jump at address based on address\nSemantics: PC \uf0dfFunc1(PC, Address)\nUsed for unconditional jump within a function (e.g. goto statements)\nJAL Address: Jump and Link at address\nSemantics:\nR31 \uf0df PC +4 ; \nPC \uf0df Func1(PC, Adress)\nUsed to call functions\nJR Rs: Jump at address in register\nSemantics:  PC \uf0df Rs\nUsed to return from function calls\n "
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "JR Rs: Jump at address in register\nSemantics:  PC \uf0df Rs\nUsed to return from function calls\nTarget is stored in register\uf0e0 Indirect target\n ",
                    ""
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "J and JAL Target Address\nPC \uf0dfFunc1(PC, Address)\nAddress parameter in Func1 is 26 bits\nFunc1(PC, Address) = (PC+4)[31:28]||(Address << 2) ",
                    ""
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "J and JAL Target Address\nPC \uf0dfFunc1(PC, Address)\nAddress parameter in Func1 is 26 bits\nFunc1(PC, Address) = (PC+4)[31:28]||(Address << 2) \nAdd PC +4 \nTake most significant 4 bits from step 1 : PC+4[31:28]\nDo Address << 2  \uf0e0 Address * 4   to make it 28 bits\nConcatenate results of steps 2 and 3"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "J and JAL Target Address\nPC \uf0dfFunc1(PC, Address)\nAddress parameter in Func1 is 26 bits\nFunc1(PC, Address) = (PC+4)[31:28]||(Address << 2) \n Example:  4DC J 13B \nPC = 4DC \uf0e0000004DC\nAddress = 13B",
                    ""
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "J and JAL Target Address\nPC \uf0dfFunc1(PC, Address)\nAddress parameter in Func1 is 26 bits\nFunc1(PC, Address) = (PC+4)[31:28]||(Address << 2) \n Example:  4DC J 13B \nPC = 4DC \uf0e0000004DC\nAddress = 13B\nAdd PC +4 : 000004DC+ 4 \uf0e0 000004E0\nTake most significant 4 bits from step 1 : 0x0"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "J and JAL Target Address\nPC \uf0dfFunc1(PC, Address)\nAddress parameter in Func1 is 26 bits\nFunc1(PC, Address) = (PC+4)[31:28]||(Address << 2) \n Example:  4DC J 13B \nPC = 4DC \uf0e0000004DC\nAddress = 13B\nAdd PC +4 : 000004DC+ 4 \uf0e0 000004E0\nTake most significant 4 bits from step 1 : 0x0\nDo Address << 2 : 13B << 2\n13B*4 \uf0e0 4EC \nMaking it 28 bits : 00004EC"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "J and JAL Target Address\nPC \uf0dfFunc1(PC, Address)\nAddress parameter in Func1 is 26 bits\nFunc1(PC, Address) = (PC+4)[31:28]||(Address << 2) \n Example:  4DC J 13B \nPC = 4DC \uf0e0000004DC\nAddress = 13B\nAdd PC +4 : 000004DC+ 4 \uf0e0 000004E0\nTake most significant 4 bits from step 1 : 0x0\nDo Address << 2 : 13B << 2\n13B*4 \uf0e0 4EC \nMaking it 28 bits : 00004EC\nConcatenate results of steps 2 and 3: 0x0000004EC",
                    ""
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "MIPS64 Unconditional Jump Target Address",
                "slide_text": [
                    "MIPS64 Unconditional Jump Target Address",
                    "J and JAL Target Address\nPC \uf0dfFunc1(PC, Address)\nAddress parameter in Func1 is 26 bits\nFunc1(PC, Address) = (PC+4)[31:28]||(Address << 2) \nAdd PC +4 \nTake most significant 4 bits from step 1 : PC+4[31:28]\nDo Address << 2  \uf0e0 Address * 4   to make it 28 bits\nConcatenate results of steps 2 and 3"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "MIPS64 Conditional Branch Instructions",
                "slide_text": [
                    "MIPS64 Conditional Branch Instructions",
                    "BEQ Rs, Rt, DoImm:\nSemantics: If (Rs == Rt) PC \uf0df Func2(PC, DoImm)\nUsed for if/else statements and loops\nBNE Rs, Rt, DoImm:\nSemantics: If (Rs != Rt) PC \uf0df Func2(PC, DoImm)\nUsed for if/else statements and loops\nMany more: BEQZ, BNEQZ,  BLTZ, BLETZ,\u2026\nWe focus primarily on BEQ, BNEQ, BEQZ",
                    "Branch Taken\nBranch condition is true and CPU jumps to target\ni.e. BNE R8, R9, 3 # If R8 != R9, then branch is TAKEN"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "MIPS64 Conditional Branch Instructions",
                "slide_text": [
                    "MIPS64 Conditional Branch Instructions",
                    "BEQ Rs, Rt, DoImm:\nSemantics: If (Rs == Rt) PC \uf0df Func2(PC, DoImm)\nUsed for if/else statements and loops\nBNE Rs, Rt, DoImm:\nSemantics: If (Rs != Rt) PC \uf0df Func2(PC, DoImm)\nUsed for if/else statements and loops\nMany more: BEQZ, BNEQZ,  BLTZ, BLETZ,\u2026\nWe focus primarily on BEQ, BNEQ, BEQZ",
                    "Branch Taken\nBranch condition is true and CPU jumps to target\ni.e. BNE R8, R9, 3 # If R8 != R9, then branch is TAKEN"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "MIPS64 Conditional Branch Target Address",
                "slide_text": [
                    "MIPS64 Conditional Branch Target Address",
                    "BEQ Rs, Rt, DoImm\nPC \uf0dfFunc2(PC, DoImm)\nDoImm parameter in Func2 is 16 bits\nFunc2(PC, DoImm) = (PC+4)+ (DoImm+ << 2) ",
                    ""
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "MIPS64 Conditional Branch Target Address",
                "slide_text": [
                    "MIPS64 Conditional Branch Target Address",
                    "BEQ Rs, Rt, DoImm\nPC \uf0dfFunc2(PC, DoImm)\nDoImm parameter in Func2 is 16 bits\nFunc2(PC, DoImm) = (PC+4)+ (DoImm+ << 2) \nAdd PC +4 \nSign Extend DoImm to 32 bits : DoImm+\nTake result of step 2 and shift it left by 2 : DoImm+ << 2\nAdd results of step 1 and 3"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "MIPS64 Conditional Branch Target Address",
                "slide_text": [
                    "MIPS64 Conditional Branch Target Address",
                    "BEQ Rs, Rt, DoImm\nPC \uf0dfFunc2(PC, DoImm)\nDoImm parameter in Func2 is 16 bits\nFunc2(PC, DoImm) = (PC+4)+ (DoImm+ << 2)\nExample: 400008 BEQ R8, R0, 1\nPC = 400008 \uf0e000400008 \nDoImm = 1 \uf0e00x0001\nAdd PC +4: 00400008 + 4 = 0040000C\nSign-extend DoImm: 0x0001+ = 0x00000001\n\n"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "MIPS64 Conditional Branch Target Address",
                "slide_text": [
                    "MIPS64 Conditional Branch Target Address",
                    "BEQ Rs, Rt, DoImm\nPC \uf0dfFunc2(PC, DoImm)\nDoImm parameter in Func2 is 16 bits\nFunc2(PC, DoImm) = (PC+4)+ (DoImm+ << 2)\nExample: 400008 BEQ R8, R0, 1\nPC = 400008 \uf0e000400008 \nDoImm = 1 \uf0e00x0001\nAdd PC +4: 00400008 + 4 = 0040000C\nSign-extend DoImm: 0x0001+ = 0x00000001\nTake result of step 2 and shift it left by 2\nMultiply 32-bit value by 4: 0x00000001*4 = 0x00000004\nAdd results of steps 1 and 3: 0x004000010 \n0040000C+0x00000004 = 0x400010\n\n",
                    ""
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "MIPS64 Conditional Branch Target Address",
                "slide_text": [
                    "MIPS64 Conditional Branch Target Address",
                    "BEQ Rs, Rt, DoImm\nPC \uf0dfFunc2(PC, DoImm)\nDoImm parameter in Func2 is 16 bits\nFunc2(PC, DoImm) = (PC+4)+ (DoImm+ << 2) \nAdd PC +4 \nSign Extend DoImm to 32 bits : DoImm+\nTake result of step 2 and shift it left by 2 : DoImm+ << 2\nAdd results of step 1 and 3"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "MIPS64 SLT Instruction : Set Less Than",
                "slide_text": [
                    "MIPS64 SLT Instruction : Set Less Than",
                    "Syntax:  SLT Rd, Rs, Rt \nSemantics:   if (Rs < Rt) Rd = 1; else Rd = 0\n\n\n\n\n\t\n"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "MIPS64 SLT Instruction : Set Less Than",
                "slide_text": [
                    "MIPS64 SLT Instruction : Set Less Than",
                    "Syntax:  SLT Rd, Rs, Rt \nSemantics:   if (Rs < Rt) Rd = 1; else Rd = 0\nBLTZ Rt, DoImm: Branch if less than equal to zero \nCombines SLT and BEQ to form itself\nSLT Rd, Rs, R0 # if (Rs < R0) Rd \uf0df1; else Rd\uf0df 0\nBEQ Rd, R0, DoImm # If (Rd == 0) PC \uf0df Funct2(PC, DoImm)\n\n\n\n\n\n\n\n\t\n"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "int abs(int x) // return absolute value of x\n{\n\t\tif (x < 0) // x is negative\n\t\t\tx = -x; // make it positive \n\treturn x; // done \n}"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "int abs(int x) // return absolute value of x\n{\n\t\tif (x < 0) // x is negative \uf0e0 conditional branch needed\n\t\t\tx = -x; // make it positive \n\treturn x; // done \uf0e0 jump JR needed\n}",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "if (x < 0)\nAssume that x is in R4.\nWe can do : \nBLTZ R4, DoImm # If (R4<0), R4 is negative, go to part of code that does x = -x",
                    ""
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "if (x < 0)\nAssume that x is in R4.\nWe can do : \nBGEZ R4, R0, DoImm # If (R4>=0), R4 is positive, skip substraction and go to return x",
                    ""
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "if (x < 0)\nAssume that x is in R4.\nWe can do : \nSLT, R8, R4, R0 # if (R4 < 0 ) R8 =1, else R8 = 0\nBEQ R8, R0, DoImm# If (R8 == R0), R4 is already positive,  skip subtraction and jump to return x\n",
                    ""
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "400004 SLT R8, R4, R0 # If x < 0 , R8 =1 , else R8 = 0\n400008 BEQ R8, R0, DoImm# If R4 is positive, go to return x\n\u2026\u2026.. # what do we do here?\n\u2026\u2026..  # or here?\n\u2026..   # or there?"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "400004 SLT R8, R4, R0 # If x < 0 , R8 =1 , else R8 = 0\n400008 BEQ R8, R0, DoImm# If R4 is positive, go to return x\n\u2026\u2026.. # what do we do here?",
                    "Handle case where BEQ condition is false\nFor the code above, that is the subtraction operation",
                    "If (x < 0) // x  is negative\nx = -x; // make  it positive \n\treturn x; // done"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "400004 SLT R8, R4, R0 # If x < 0 , R8 =1 , else R8 = 0\n400008 BEQ R8, R0, DoImm# If R4 is positive, go to return x\n40000C DSUB DSUB R4, R0, R4 # x = 0 -x  = x=-x\n\u2026\u2026..  # or here?\n",
                    "If (x < 0) // x  is negative\nx = -x; // make  it positive \n\treturn x; // done"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "400004 SLT R8, R4, R0 # If x < 0 , R8 =1 , else R8 = 0\n400008 BEQ R8, R0, DoImm# If R4 is positive, go to return x\n40000C DSUB DSUB R4, R0, R4 # x = 0 -x  = x=-x\n\u2026\u2026..  # or here?\n",
                    "Once subtraction is done, return from call\nIf x is positive, skip subtraction and return from call\nThis is thus where we return from call",
                    "If (x < 0) // x  is negative\nx = -x; // make  it positive \n\treturn x; // done"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "400004 SLT R8, R4, R0 # If x < 0 , R8 =1 , else R8 = 0\n400008 BEQ R8, R0, DoImm# If R4 is positive, go to return x\n40000C DSUB DSUB R4, R0, R4 # x = 0 -x  = x=-x\n400010  JR Rs  # return from  abs() function call",
                    "If (x < 0) // x  is negative\nx = -x; // make  it positive \n\treturn x; // done"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "400004 SLT R8, R4, R0 # If x < 0 , R8 =1 , else R8 = 0\n400008 BEQ R8, R0, DoImm# If R4 is positive, go to return x\n40000C DSUB DSUB R4, R0, R4 # x = 0 -x  = x=-x\n400010  JR Rs  # return from  abs() function call",
                    "Recall: Func2(PC, DoImm)  = (PC+4)    + (DoImm+<<2)\nInverse of Func2: DoImm+ = [Target - (PC+4)] >> 2\n\nDoImm+ = [400010 \u2013 (400008+4)] >> 2\nDoImm+ = [400010 \u2013 40000C] >> 2\nDoImm+ = [4] >> 2 \uf0e0 4/4 \nDoImm+ = 1\nDoImm = 1\n"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "//lib.h\nint abs(x); \n//lib.c\nint abs(x){ if (x < 0)  x = -x; return -x;} \n\n\n//main.c\ninclude \u201clib.h\u201d // include lib.h for abs(x)\nint val, result; char buffer[50];  \n fgets(buffer, 50 stdin); //get input from user\nval = atoi(buffer);   //convert char array to int\nresult = abs(val); //JAL to call abs(x) in lib.c. \nprintf(\u201cAbsolute value: %d\\n, result); ",
                    "400004 SLT R8, R4, R0\n400008 BEQ R8, R0, 1 \n40000C DSUB R4, R0, R4\n400010 JR Rs # return x\n",
                    ""
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "//lib.h\nint abs(x); \n//lib.c\nint abs(x){ if (x < 0)  x = -x; return -x;} \n\n\n//main.c\ninclude \u201clib.h\u201d // include lib.h for abs(x)\nint val, result; char buffer[50];  \n fgets(buffer, 50 stdin); //get input from user\nval = atoi(buffer);   //convert char array to int\nresult = abs(val); //JAL to call abs(x) in lib.c. \nprintf(\u201cAbsolute value: %d\\n, result); ",
                    "400004 SLT R8, R4, R0\n400008 BEQ R8, R0, 1 \n40000C DSUB R4, R0, R4\n400010 JR 31 # return x\n",
                    "",
                    "Recall: JAL Address:\nR31 \uf0df PC+4  # return address\nPC = Func1(PC, Address)"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Func2 calculates the target address of the branch instruction\nRecall: Func2(PC, DoImm)  = (PC+4)    + (DoImm+<<2)\nInverse of Func2: DoImm+ = [Target - (PC+4)] >> 2"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "val = atoi(buffer);   //convert char array to int\nresult = abs(val); //JAL to call abs(x) in lib.c. \nprintf(\u201cAbsolute value: %d\\n, result); ",
                    "400004 SLT R8, R4, R0\n400008 BEQ R8, R0, 1 \n40000C DSUB R4, R0, R4\n400010 JR R31 # return x\n",
                    "Return value of abs(val) must be stored in result\nCurrent MIPS code has value in R4\nRecall: R4 is parameter register and does not hold value across function calls\nMust use R2 or R3 to return value from abs(val) call"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "val = atoi(buffer);   //convert char array to int\nresult = abs(val); //JAL to call abs(x) in lib.c. \nprintf(\u201cAbsolute value: %d\\n, result); ",
                    "400004 DADD R2, R4, R0 # R2 = x + 0 \n400008 SLT R8, R4, R0\n40000C BEQ R8, R0, 1 \n400010 DSUB R2, R0, R4\n400014 JR R31 # return x\n",
                    "Return value of abs(val) must be stored in result\nCurrent MIPS code has value in R4\nRecall: R4 is parameter register and does not hold value across function calls\nMust use R2 or R3 to return value from abs(val) call"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y  \nDo not use MIPS multiplication (MULT) instruction\nGoal is to learn how to use branch/jump instructions for loops"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y  ",
                    "int mult(int x, int y) \t\t\t\n{     int res = 0, i=y;\nwhile( i != 0) \n{res+=x;  i--; }\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y  ",
                    "int mult(int x, int y) \t\t\t\n{     int res = 0, i=y;\ndo {res+=x;  i--; }while( i != 0);\nreturn res; \n}",
                    "int mult(int x, int y) \t\t\t\n{     int res = 0, i=y;\nwhile( i != 0) \n{res+=x;  i--; }\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\t",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tDADD R8, R8, R4 # res+=x\n4DC\t\tDADDI R9, R9, (-1)10    #i--;",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tDADD R8, R8, R4 # res+=x\n4DC\t\tDADDI R9, R9, (-1)10    #i--;\n4E0\t\tBNE R9, R0, DoImm # if (i !=0), go to 4D8 for next addition",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tDADD R8, R8, R4 # res+=x\n4DC\t\tDADDI R9, R9, (-1)10    #i--;\n4E0\t\tBNE R9, R0, DoImm # if (i !=0), go to 4D8 for next addition\n4E4\t\t\u2026 what to do here? # handle case where i = 0: loop done!\n408\t\t... and here?\n",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tDADD R8, R8, R4 # res+=x\n4DC\t\tDADDI R9, R9, (-1)10    #i--;\n4E0\t\tBNE R9, R0, DoImm # if (i !=0), go to 4D8 for next addition\n4E4\t\tADD R2, R8, R0   # Use R2 to return value of res\n408\t\t... and here?\n\n",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tDADD R8, R8, R4 # res+=x\n4DC\t\tDADDI R9, R9, (-1)10    #i--;\n4E0\t\tBNE R9, R0, DoImm # if (i !=0), go to 4D8 for next addition\n4E4\t\tADD R2, R8, R0   # Use R2 to return value of res\n4E8\t\tJR R31 #return from function call\n\n",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tDADD R8, R8, R4 # res+=x\n4DC\t\tDADDI R9, R9, (-1)10    #i--;\n4E0\t\tBNE R9, R0, DoImm # if (i !=0), go to 4D8 for next addition\n4E4\t\tADD R2, R8, R0   # Use R2 to return value of res\n4E8\t\tJR R31 #return from function call\n\n",
                    "",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "4E0\t\tBNE R9, R0, DoImm # if (i !=0), go to 4D8 for next addition\n\n",
                    "",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}",
                    "Recall: Func2(PC, DoImm)  = (PC+4)    + (DoImm+<<2)\nInverse of Func2: DoImm+ = [Target - (PC+4)] >> 2\n\nDoImm+ = [4D8 \u2013 (4E0+4)] >> 2\nDoImm+ = [4D8 \u2013 4E4] >> 2\nDoImm+ = [FFC] >> 2 \uf0e0 -12/4 \nDoImm+ = -3\nDoImm = -3\n"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tDADD R8, R8, R4 # res+=x\n4DC\t\tDADDI R9, R9, (-1)10    #i--;\n4E0\t\tBNE R9, R0, (-3)10  # if (i !=0), go to 4D8\n4E4\t\tADD R2, R8, R0   # Use R2 to return value of res\n4E8\t\tJR R31 #return from function call",
                    "int mult(int x, int y) \t\t\t\n{       int res = 0, i=y;\ndo {res+=x;  i--; }\nwhile( i != 0);\nreturn res; \n}"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "MIPS64 Branch/Jump Instruction Uses",
                "slide_text": [
                    "MIPS64 Branch/Jump Instruction Uses",
                    "Consider two numbers x y, both > 0\nWrite the MIPS mnemonic code to perform x *y \n\n ",
                    "Assume x is in R4, y is in R5\n4D0\t\tDADD R8, R0, R0  # res = 0\n4D4\t\tDADD R9, R5, R0  # i =y\n4D8\t\tBNE R9, R0, 1  # if i !=0, go to 4E0\n4DC\t\tJ 13B # i = 0, jump to 4EC\n4E0\t\tDADD R8, R8, R4 # res+=x \n4E4\t\tDADDI R9, R9, (-1)10    #i--;\n4E8\t\tJ 136 # jump to beginning of loop at 4D8\n4EC\t\tADD R2, R8, R0   # R2 = res\n4F0\t\tJR R31 #return from function call",
                    "int mult(int x, int y) \t\t\t\n{     int res = 0, i=y;\nwhile( i != 0) \n{res+=x;  i--; }\nreturn res; \n}",
                    "",
                    "loop instructions"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "Topics Covered",
                "slide_text": [
                    "Topics Covered",
                    "Jump and Branch Instructions\nFundamental in all architectures\nIndirect target and near/relative target addresses\nAllow for if/else statements, loops, function call, etc"
                ]
            }
        ]
    },
    {
        "module_number": 20,
        "module_name": "Computer Organization Module 20 Pt 1",
        "file_name": "20 - Computer Organization Module 20 Pt 1.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "",
                "slide_text": [
                    "",
                    "Computer Organization\nCS-Bridge Program, Summer 2016\n\nIntroduction",
                    "Jerry Backer\njerry.backer@nyu.edu"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Topics Covered\nAssembly Language/Mnemonic\nVarious assembly instructions\nInstruction Formats\nProcessor (CPU) Organization\nCPU Execution Steps\nHigh-Level State Diagram\nCPU Pipelining\nMemory Hierarchy\n\n",
                "slide_text": [
                    "Topics Covered\nAssembly Language/Mnemonic\nVarious assembly instructions\nInstruction Formats\nProcessor (CPU) Organization\nCPU Execution Steps\nHigh-Level State Diagram\nCPU Pipelining\nMemory Hierarchy\n\n",
                    "Computer Organization",
                    "7/20/2016",
                    "2"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "3",
                    "Functional Units",
                    "ALU",
                    "",
                    "IMUL",
                    "FPU",
                    "FMUL"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "4",
                    "Functional Units",
                    "GPRs",
                    "ALU",
                    "",
                    "IMUL",
                    "FPU",
                    "FMUL"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "5",
                    "Functional Units"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "6",
                    "Functional Units",
                    "int b = 3;\nint c = 4; \nint a = b+c; ",
                    ""
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "7",
                    "Functional Units",
                    "",
                    "int b = 3;\nint c = 4; \nint a = b+c; "
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "8",
                    "Functional Units",
                    "",
                    "int b = 3;\nint c = 4; \nint a = b+c; ",
                    ""
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "9",
                    "Functional Units",
                    "",
                    "3",
                    "int b = 3;\nint c = 4; \nint a = b+c; "
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "10",
                    "Functional Units",
                    "",
                    "3",
                    "4",
                    "int b = 3;\nint c = 4; \nint a = b+c; "
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "11",
                    "Functional Units",
                    "",
                    "3",
                    "4",
                    "",
                    "",
                    "7",
                    "ADD",
                    "int b = 3;\nint c = 4; \nint a = b+c; "
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "12",
                    "Functional Units",
                    "int b = 3;\nint c = 4; \nint a = b+c; ",
                    "",
                    "3",
                    "4",
                    "7",
                    "a=7"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "13",
                    "CPU Design Strategy:\nReduced Instruction Set Computing (RISC)\nComplex Instruction Set Computing (CISC)\n"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "14",
                    "RISC: Reduced Instruction Set Computing\nRecall 4 operations for a = c +c\nReduced: single operation per instruction\nBenefits:\nSimple hardware (for simpler instructions)\nOne cycle per instruction (pipelined)\nIssues:\nMore complicated compilers\nLarger binary\n\n\n\n"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "A Little Bit of Background\u2026",
                "slide_text": [
                    "A Little Bit of Background\u2026",
                    "Computer Organization",
                    "7/20/2016",
                    "15",
                    "CISC: Complex Instruction Set Computing\nRecall 4 operations for a = b +c\nComplex: multiple operations per instruction\ni.e. One instruction can do both memory access and addition of b and c\nBenefits:\nEasy translation from software to machine code\nSmaller binary (because less instructions do more operations)\nIssues:\nMore complicated hardware\nMany-cycle instructions\n\n\n\n"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "What We Have Covered:\nMain components of CPU Hardware\nRole of General Purpose Registers\nRISC vs. CISC\n",
                "slide_text": [
                    "What We Have Covered:\nMain components of CPU Hardware\nRole of General Purpose Registers\nRISC vs. CISC\n",
                    "Computer Organization",
                    "7/20/2016",
                    "16"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "",
                "slide_text": [
                    "",
                    "Computer Organization\nCS-Bridge Program, Summer 2016\n\nAssembly Language \u2013 Part 1",
                    "Jerry Backer\njerry.backer@nyu.edu"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "What We\u2019ll Learn\nIntroduction to MIPS Assembly Language\nMIPS Mnemonic Machine Code\nFundamental MIPS Machine Instructions\nMIPS Registers and their Roles\n\n\n",
                "slide_text": [
                    "What We\u2019ll Learn\nIntroduction to MIPS Assembly Language\nMIPS Mnemonic Machine Code\nFundamental MIPS Machine Instructions\nMIPS Registers and their Roles\n\n\n",
                    "Computer Organization",
                    "7/20/2016",
                    "18"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Computer Organization",
                "slide_text": [
                    "Computer Organization",
                    "7/20/2016",
                    "19",
                    "MIPS Instruction Set Architecture",
                    "Microprocessor Without Interlocked Pipeline Stages\nRISC Processor Architecture Developed by MIPS Technologies\n32-bit and 64-bit versions\nUsed in gaming systems (NS64, PS1, PS2, etc), set-top boxes, and other embedded systems\nMIPS64 architecture used in this class\n\n\n"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "20",
                    "int a, b, c;\nb = 0x65E;\nc = 0x2C;\na = 0x0; \na = b+c ;  ",
                    "High-level code",
                    ""
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "21",
                    "int a, b, c;\nb = 0x65E;\nc = 0x2C;\na = 0x0; \na = b+c ;  ",
                    "",
                    "High-level code",
                    "Compilation Process",
                    "",
                    "Software Binary",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "",
                    "11011101000010010000000000000000\u000b11011101000010100000000000000100\n00000001001010100101100000101100\n11111100101100000000000000001000"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "22",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "b= 0x65E\nc= 0x2C\na= 0x0",
                    "0xF00",
                    "0xA000",
                    "11011101000010010000000000000000\u000b11011101000010100000000000000100\n00000001001010100101100000101100\n11111100101100000000000000001000"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "23",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "b= 0x65E\nc= 0x2C\na= 0x0",
                    "??? a= b+c ???? ",
                    "0xF00",
                    "0xA000",
                    "11011101000010010000000000000000\u000b11011101000010100000000000000100\n00000001001010100101100000101100\n11111100101100000000000000001000"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "24",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "b= 0x65E\nc= 0x2C\na= 0x0",
                    "0xF00",
                    "0xA000",
                    "11011101000010010000000000000000\u000b11011101000010100000000000000100\n00000001001010100101100000101100\n11111100101100000000000000001000",
                    "??? a= b+c ???? "
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "25",
                    "Assembly Language\nSymbolic Machine Code\nLow-level programming language\nOne-to-one correlation with machine-level code\nMnemonics used to represent machine code\n\n\n\n"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "26",
                    "Recall that MIPS is RISC Architecture",
                    "a = b+c:\nCopy b from data segment to register $t1\t\t\t\t\t\t\nCopy c from data segment to register $t2\t\t\t\nAdd $t1 and $t2 and put result in $t3\t\t\t\nCopy $t3 to data segment address for a \t\t\t\t"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "27",
                    "Recall that MIPS is RISC Architecture",
                    "a = b+c:\nCopy b from data segment to register $t1\t\t\tLD $t1, b\t\t\t\nCopy c from data segment to register $t2\t\t\tLD $t2, c\nAdd $t1 and $t2 and put result in $t3\t\t\tDADD $t3, $t2, $t1\nCopy $t3 to data segment address for a \t\t\tSD $t3, a\n",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "28",
                    "Recall that MIPS is RISC Architecture",
                    "a = b+c:\n\t\t\t\t\t\t\t\t\t\t\tLD $t1, b\t\t\t\n\t\t\t\t\t\t\t\t\t        \t\tLD $t2, c\n\t\t\t\t\t\t\t\t\t\t\tDADD $t3, $t2, $t1\n\t\t\t\t\t\t\t\t\t\t\tSD $t3, a\n",
                    "",
                    "",
                    "",
                    "",
                    "11011101000010010000000000000000\u000b11011101000010100000000000000100\n00000001001010100101100000101100\n11111100101100000000000000001000"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "29",
                    "LD $t1, b\n\n\n\n\t\t",
                    "MIPS Machine code\n",
                    "MIPS Assembly",
                    "11011101000010010000000000000000"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "30",
                    "LD $t1, b\n\nOpcode\n\n\n\n\t\t",
                    "MIPS Machine code\n",
                    "MIPS Assembly",
                    "11011101000010010000000000000000",
                    "110111",
                    "opcode",
                    "\u2713",
                    "LD"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "31",
                    "LD $t1, b\n\nOpcode\nBase Register\n\n\n\n\n\t\t",
                    "MIPS Machine code\n",
                    "MIPS Assembly",
                    "11011101000010010000000000000000",
                    "110111",
                    "opcode",
                    "01000",
                    "base",
                    "\u2713",
                    "\u2717",
                    "LD",
                    "R8",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "0xA000",
                    "",
                    "Base address",
                    "Data Segment"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "32",
                    "LD $t1, b\n\nOpcode\nBase Register\nRt register\n\n\n\n\t\t",
                    "MIPS Machine code\n",
                    "MIPS Assembly",
                    "11011101000010010000000000000000",
                    "110111",
                    "opcode",
                    "01000",
                    "base",
                    "01001",
                    "Rt",
                    "\u2713",
                    "\u2717",
                    "LD",
                    "R8",
                    "R9",
                    "\u2713"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "33",
                    "LD $t1, b\n\nOpcode\nBase Register\nRt register\nOffset\n\n\n\n\t\t",
                    "MIPS Machine code\n",
                    "MIPS Assembly",
                    "11011101000010010000000000000000",
                    "110111",
                    "opcode",
                    "01000",
                    "base",
                    "01001",
                    "Rt",
                    "0000000000000000",
                    "offset",
                    "\u2713",
                    "\u2717",
                    "\u2717",
                    "LD",
                    "R8",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "0xA000",
                    "Data Segment",
                    "R9",
                    "offset",
                    "0x0",
                    "\u2713"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "34",
                    "From Assembly to Mnemonic Format\nMaps assembly code to Machine Code\nBetter represents CPU innerworkings  \nUses Hexadecimal notation\nexcept for register numbers\nexcept if explicitly stated otherwise\ni.e. FFFF in hex =  (-1)10 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t        \t\t\n\t\t\t\t\t\t\t\t\t\t\t\n"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "35",
                    "MIPS Mnemonic",
                    "LD $t1, b\nLD $t2, c\nDADD $t3, $t2, $t1\nSD $t3,a\n\t\t",
                    "MIPS Assembly",
                    "F00  \tLD R9, 0(R8)\nF004 \tLD R10, 8(R8)\nF008 \tDADD R11, R9, R10\nF00C \tSD R11, (16)10 (R8)    ",
                    "",
                    "a = b+c;",
                    "High-level C/C++"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "36",
                    "MIPS Mnemonic",
                    "LD $t1, b\nLD $t2, c\nDADD $t3, $t2, $t1\nSD $t3,a\n\t\t",
                    "MIPS Assembly",
                    "F00  \tLD R9, 0(R8)\nF004 \tLD R10, 8(R8)\nF008 \tDADD R11, R9, R10\nF00C \tSD R11, (16)10 (R8)    ",
                    "",
                    "a = b+c;",
                    "High-level C/C++",
                    "",
                    "instruction addresses"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "37",
                    "10001101000010010000000000000000\u000b10001101000010100000000000000100\n00000001001010100101100000100000\n10100000101100000000000000001000",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "b= 0x65E\nc= 0x2C\na= 0x0",
                    "a= b+c; ",
                    "F00\nF00+4\nF00+4+4\nF00+4+4+4",
                    "A000",
                    ""
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "38",
                    "MIPS Mnemonic",
                    "LD $t1, b\nLD $t2, c\nDADD $t3, $t2, $t1\nSD $t3,a\n\t\t",
                    "MIPS Assembly",
                    "F00  \tLD R9, 0(R8)\nF004 \tLD R10, 8(R8)\nF008 \tDADD R11, R9, R10\nF00C \tSD R11, (16)10 (R8)    ",
                    "",
                    "a = b+c;",
                    "High-level C/C++",
                    "",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "39",
                    "MIPS Mnemonic",
                    "LD $t1, b\nLD $t2, c\nDADD $t3, $t2, $t1\nSD $t3,a\n\t\t",
                    "MIPS Assembly",
                    "F00  \tLD R9, 0(R8)\nF004 \tLD R10, 8(R8)\nF008 \tDADD R11, R9, R10\nF00C \tSD R11, (16)10 (R8)    ",
                    "",
                    "a = b+c;",
                    "High-level C/C++",
                    "",
                    "",
                    "offset",
                    "base"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "40",
                    "",
                    "Code Segment",
                    "F00\nF04\nF08\nF0C",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "Data Segment",
                    "b= 0x65E\nc= 0x2C\na= 0x0",
                    "A000"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "41",
                    "",
                    "Code Segment",
                    "F00\nF04\nF08\nF0C",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "0000000000000000000000000000000000000000000000000000011001011110\n0000000000000000000000000000000000000000000000000000000000101100\n0000000000000000000000000000000000000000000000000000000000000000",
                    "Data Segment",
                    "b= 0x65E\nc= 0x2C\na= 0x0",
                    "A000",
                    "A000+8",
                    "A000+8+8"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "42",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "What We Have Covered:\nIntroduction to MIPS Assembly Language\nBasic MIPS instructions: LD, DADD, SD\nIntroduction to MIPS Mnemonic\n",
                "slide_text": [
                    "What We Have Covered:\nIntroduction to MIPS Assembly Language\nBasic MIPS instructions: LD, DADD, SD\nIntroduction to MIPS Mnemonic\n",
                    "Computer Organization",
                    "7/20/2016",
                    "43"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "",
                "slide_text": [
                    "",
                    "Computer Organization\nCS-Bridge Program, Summer 2016\n\nAssembly Language \u2013 Part 2",
                    "Jerry Backer\njerry.backer@nyu.edu"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "What We\u2019ll Learn\nMIPS Mnemonic Execution Structure\nSyntax and Semantics of LD, DADD, and SD\nMIPS General Purpose Registers R0-R31\n\n\n",
                "slide_text": [
                    "What We\u2019ll Learn\nMIPS Mnemonic Execution Structure\nSyntax and Semantics of LD, DADD, and SD\nMIPS General Purpose Registers R0-R31\n\n\n",
                    "Computer Organization",
                    "7/20/2016",
                    "45"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "46",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "47",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "All contents of table are  in Hexadecimal\nexcept for register numbers\nexcept if used explicit subscript notation (e.g. 1610 for decimal notation)"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "48",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "49",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "50",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "Memory is passive: It does no computation; it only stores data\nAt initialization, CPU writes address of first to PC register\nAt initialization, CPU writes base address of data segment to R8"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "51",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "For each instruction, CPU reads memory to get the  instruction (Ins read)"
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "52",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "For each instruction, CPU reads memory to get instruction (Ins read)\nFor most instructions, CPU increments PC (by 4) to point to next instruction"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "53",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "LD  R9, 0(R8)\nCalculate address of data : R8+0 => A000 + 0 = A000\nRead data from memory address calculate: M[A000]"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "54",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "LD  R9, 0(R8)\nCalculate address of data : A000 + 0 = A000\nRead data from memory address calculate: M[A000]\nCopy data to destination register: R9 = M[A000] = 65E "
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "55",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "Registers and memory segments not modified are labeled NS: Not Stored"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "56",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "57",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "58",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11",
                    "DADD R11, R9, R10\nAdd content of source registers: R9+R10\nStore content of addition to destination Registers R11 = R9+R10"
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "59",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "60",
                    "",
                    "Code Segment",
                    "Data Segment",
                    "65E\n2C\n0",
                    "F00\nF04\nF08\nF0C",
                    "A000\nA008\nA010",
                    "LD R9, 0(R8)\t\t\t; R9 = M[R8+0] \nLD R10, 8(R8)\t\t\t; R10 = M[R8+8]\nDADD R11, R9, R10  \t\t; R11 = R9+ R10\nSD R11, (16)10 (R8) \t\t; M[R8+1610] = R11"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "61",
                    "LD: Load Double Word\nDouble Word = 64 bits\nSyntax: LD,  Rt, Offset(Rs) i.e.:  LD R9, 0(R8)\nSemantics: GPR[Rt] = M [Rs+SignExtended(Offset)]\nOffset is at most 16 bits\nContent of Rs is 64 bits\nAddition requires both data to be same size: 64bits\nSign Extension: extend sign of 16-bit data to 64 bits while keeping sign (+/-)\nExample 1: 16-bit data: 0x8. SignEtxtended(0x0008) = 0x0000000000000008\nExample 2: 16-bit data: 0xAF00. SignEtxtended(0xAF00) = 0xFFFFFFFFFFFFAF00\nExample 3: 16-bit data 0xF00. SignEtxtended(0x0F00) = 0x0000000000000F00\n\n\t\n\n\n"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "62",
                    "DADD: Double Word Add\nSyntax: DADD,  Rd, Rs, Rt i.e.:  DADD R11, R9, R10\nSemantics: GPR[Rd] = Rs + Rt\nAddition requires both data to be same size: 64bits\nGPR[Rd] = Rs + Rt\n\t\n\n\n"
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "63",
                    "SD: Store Double Word\nSyntax: SD, Rt, Rs(Offset) i.e.:  SD R11, 1610(R8)\nSemantics: M[Rs+SignExtended(Offset)] = Rt\nAddition requires both data to be same size: 64bits\nUse of sign extension to update 16-bit offset to 64 bits\n\t\n\n\n"
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "MIPS Assembly: introductory example",
                "slide_text": [
                    "MIPS Assembly: introductory example",
                    "Computer Organization",
                    "7/20/2016",
                    "64",
                    "MIPS General Purpose Registers: R0-R31\nR0: Always contains value 0; read-only\nR1: Reserved (used for pseudo instructions of assembler)\nR2-R3: Return results of function calls\nR4-R7: Pass parameters of function calls\nR8-R15: Store temporary values, not saved when function ends\nR16-R23: Store saved values across functions\nR24-R25: Store temporary values, not saved when functions\nR26-R27: Reserved (used by O.S.)\nR28: Global pointer\nR29: Stack pointer\nR30: Frame pointer\nR31: Return address\n\n\n\n\n\n\n"
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "MIPS Assembly: another example",
                "slide_text": [
                    "MIPS Assembly: another example",
                    "Computer Organization",
                    "7/20/2016",
                    "65",
                    "Write MIPS mnemonic machine program for the operation above\nCode segment starts at address 0xC0\nData segment starts at address 800\nData stored in following order in memory: a, b, c\nAssume 64-bit data\nData initial values: a = 4F0D, b= 14A0, c = 0\nShow table that details CPU work for each instruction (including initial state)\nShow final value in table\nShow comments of each mnemonic instruction as done in initial example\nPay attention which registers not to use (eg. R0, R1, or R31)\n\n",
                    "a = b | c;"
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "What We Have Covered:\nCPU Execution Using Table\nLD, SD, and DADD Semantics\nPC Register and MIPS GPRs\n\nAdditional Documentation\t\nMIPS registers, assembly names and purposes\nMIPS64 instruction set  \t",
                "slide_text": [
                    "What We Have Covered:\nCPU Execution Using Table\nLD, SD, and DADD Semantics\nPC Register and MIPS GPRs\n\nAdditional Documentation\t\nMIPS registers, assembly names and purposes\nMIPS64 instruction set  \t",
                    "Computer Organization",
                    "7/20/2016",
                    "66"
                ]
            }
        ]
    },
    {
        "module_number": 21,
        "module_name": "Computer Organization Module 21 Pt 1",
        "file_name": "21 - Computer Organization Module 21 Pt 1.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Computer Organization\u000bPart 1",
                "slide_text": [
                    "Computer Organization\u000bPart 1",
                    "Jerry B. Backer\nNYU Tandon School of Engineering\n"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Outline",
                "slide_text": [
                    "Outline",
                    "Instruction Types/Formats\nInstruction Execution Steps\nProcessor State Diagram\nProcessor Clock Rate\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "MIPS64 Instructions",
                "slide_text": [
                    "MIPS64 Instructions",
                    "All instructions are 32 bits\nInstruction components\nOpcode: 6 leftmost bits\n2nd opcode/function (optional)\nOperands\nImmediate values\nregister numbers \n 3 types of MIPS64 instructions\nR-format (register format)\nI-format (immediate format)\nJ-format (jump format)"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "MIPS64 Instruction Type: R-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: R-format ",
                    "Uses ONLY register operands\ncan be source, destination, or both\nFixed opcode: 000000\n For all R-format instructions\n2nd opcode (function) needed\n\n\n"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "MIPS64 Instruction Type: R-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: R-format ",
                    "Function: 2nd opcode\nUnique to each R-format instruction\nIndicates operation of instruction\nRegisters: Rs, Rt, and Rd\nShamt: shift amount \nUsed only for SLL and SRL\nOtherwise, it is set to zero (0)",
                    "000000",
                    "Rs",
                    "Rt",
                    "Rd",
                    "shamt",
                    "6",
                    "5",
                    "5",
                    "5",
                    "5",
                    "6",
                    "opcode",
                    "Func"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "MIPS64 Instruction Type: R-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: R-format ",
                    "Opcode: 000000 \uf0e0 R-format\n\n \n ",
                    "000000",
                    "01000",
                    "01001",
                    "01011",
                    "00000",
                    "6",
                    "5",
                    "5",
                    "5",
                    "5",
                    "6",
                    "opcode",
                    "101100"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "MIPS64 Instruction Type: R-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: R-format ",
                    "Opcode: 000000 \uf0e0 R-format\nFunc: 101100\uf0e022 \uf0e0 DADD\nDADD Rd, Rs, Rt  # Rd \uf0df Rs + Rt\nNo need for Shamt\n\n \n ",
                    "000000",
                    "01000",
                    "01001",
                    "01011",
                    "00000",
                    "6",
                    "5",
                    "5",
                    "5",
                    "5",
                    "6",
                    "opcode",
                    "101100"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "MIPS64 Instruction Type: R-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: R-format ",
                    "Opcode: 000000 \uf0e0 R-format\nFunc: 101100\uf0e022 \uf0e0 DADD\nDADD Rd, Rs, Rt  # Rd \uf0df Rs + Rt\nNo need for Shamt\nRs: 0100 \uf0e0 R8\nRt: 0100 \uf0e0 R9\nRd: 01011 \uf0e0 R11\n\n \n ",
                    "000000",
                    "01000",
                    "01001",
                    "01011",
                    "00000",
                    "6",
                    "5",
                    "5",
                    "5",
                    "5",
                    "6",
                    "opcode",
                    "101100",
                    "DADD R11, R8, R9"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "MIPS64 Instruction Type: R-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: R-format ",
                    "Function: 2nd opcode\nUnique to each R-format instruction\nIndicates operation of instruction\nRegisters: Rs, Rt, and Rd\nShamt: shift amount \nUsed only for SLL and SRL\nOtherwise, it is set to zero (0)",
                    "000000",
                    "Rs",
                    "Rt",
                    "Rd",
                    "shamt",
                    "6",
                    "5",
                    "5",
                    "5",
                    "5",
                    "6",
                    "opcode",
                    "Func"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "MIPS64 Instruction Type: I-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: I-format ",
                    "Opcode\nUnique to each I-format instruction\nIndicates operation of instruction\nRegisters: Rs and/or Rt\nDoImm: Immediate  \nAlways 16 bits\nADDI, BEQ, and others",
                    "opcode",
                    "Rs",
                    "Rt",
                    "DoImm",
                    "6",
                    "5",
                    "5",
                    "16"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "MIPS64 Instruction Type: I-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: I-format ",
                    "Opcode: 011000 \uf0e0 DADDI\n\n \n ",
                    "011000",
                    "01000",
                    "10000",
                    "1111111111111100",
                    "6",
                    "5",
                    "5",
                    "16"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "MIPS64 Instruction Type: I-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: I-format ",
                    "Opcode: 011000 \uf0e0 DADDI\nDADDI Rt, Rs, Imm # Rt\nRt\uf0df Rs + Imm+\nRs: 01000\uf0e0 R8\nRt:  10000\uf0e0 R16\n\n \n ",
                    "011000",
                    "01000",
                    "10000",
                    "1111111111111100",
                    "6",
                    "5",
                    "5",
                    "16"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "MIPS64 Instruction Type: I-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: I-format ",
                    "011000",
                    "01000",
                    "10000",
                    "1111111111111100",
                    "6",
                    "5",
                    "5",
                    "16",
                    "DADDI, R16, R8, (-3)10",
                    "Opcode: 011000 \uf0e0 DADDI\nDADDI Rt, Rs, Imm # Rt\nRt\uf0df Rs + Rt + Imm+\nRs: 01000\uf0e0 R8\nRt:  10000\uf0e0 R16\nDoImm:11111111111111100\nFFFC\n(-3)10\n\n \n "
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "MIPS64 Instruction Type: J-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: J-format ",
                    "Opcode\nUnique to each J-format instruction\nIndicates operation of instruction\nNo registers\nAddress\nAlways 26 bits\nUsed for target address of jump",
                    "opcode",
                    "Address",
                    "6",
                    "26"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "MIPS64 Instruction Type: J-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: J-format ",
                    "000010",
                    "00000100000000000000000000",
                    "6",
                    "26",
                    "Opcode: 000010\uf0e0 J\nJ Address\nAddress: 0x10000\n \n ",
                    "J 10000"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "MIPS64 Instruction Type: J-format ",
                "slide_text": [
                    "MIPS64 Instruction Type: J-format ",
                    "Opcode\nUnique to each J-format instruction\nIndicates operation of instruction\nNo registers\nAddress\nAlways 26 bits\nUsed for target address of jump",
                    "opcode",
                    "Address",
                    "6",
                    "26"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Let\u2019s Build a Processor",
                "slide_text": [
                    "Let\u2019s Build a Processor",
                    "Based on MIPS64\nInstructions Used\nDADD, DSUB, DOR, DAND\nLD, SD\nBEQZ"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execution Steps",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execution Steps",
                    "Instruction Fetch (IF)\nGet Instruction From memory\nIncrement Program counter\nInstruction Decode (ID)\nDetermine operation\nGet operands\nInstruction Execute (EX)\nPerform operation\nMemory (MEM)\nDo Data memory access\nFor Load and Store instructions\nWriteBack (WB)\nWrite result to register"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execution Steps",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execution Steps",
                    "Instruction Fetch (IF)\nGet Instruction From memory\nIncrement Program counter\nInstruction Decode (ID)\nDetermine operation\nGet operands\nInstruction Execute (EX)\nPerform operation\nMemory (MEM)\nDo Data memory access\nFor Load and Store instructions\nWriteBack (WB)\nWrite result to register"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "Let\u2019s Build a Processor: Instruction Fetch",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Fetch",
                    "Get instruction from memory\nM[PC]\n\n"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "Let\u2019s Build a Processor: Instruction Fetch",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Fetch",
                    "Get instruction from memory\nIR\uf0df M[PC]\nIR: Instruction Register\nSpecial purpose register\nHolds 32-bit value of instruction\n\n\n"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "Let\u2019s Build a Processor: Instruction Fetch",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Fetch",
                    "Get instruction from memory\nIR\uf0df M[PC]\nIncrement Program Counter\nPC \uf0df PC + 4\n\n"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "Let\u2019s Build a Processor: Instruction Decode",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Decode",
                    "Determine operation\nGet opcode/2nd function\nGet values of operands\nAllocate functional units needed\nFor our CPU, only one unit: ALU\nFor arithmetic and logic operations\nCalculate address of BEQ, LD, SD\n2 outputs : ALUOut1, ALUOut2\n"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "Let\u2019s Build a Processor: Instruction Decode",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Decode",
                    "Determine operation\nGet operands\nA \uf0df GPR[Rs]\nB \uf0df GPR[Rt]\nImm \uf0df DoImm+\n\n"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execution Steps",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execution Steps",
                    "Instruction Fetch (IF)\nGet Instruction From memory\nIncrement Program counter\nInstruction Decode (ID)\nDetermine operation\nGet operands\nInstruction Execute (EX)\nPerform operation\nMemory (MEM)\nDo Data memory access\nFor Load and Store instructions\nWriteBack (WB)\nWrite result to register"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "Different for each instruction\nPerform computation \nArithmetic operation\nLogic operation\n2 outputs: ALUOut1, ALUOut2",
                    "\n"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: LD and SD\nCalculate address for load/store\nLD Rt, DoImm(Rs) \nSD Rt, DoImm(Rs)\nAddress: Rs + DoImm+",
                    "\n"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: LD and SD\nCalculate address for load/store\nLD Rt, DoImm(Rs) \nSD Rt, DoImm(Rs)\nAddress: Rs + DoImm+\nRecall: A \uf0df GPR[Rs] from ID\nRecall: Imm\uf0df DoImm+ from ID\nALUout1 \uf0df A + Imm",
                    "\n"
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: DADD, DSUB, DOR, DAND\nR-format logic/arithmetic op.\nDADD Rd, Rs, Rt # Rd \uf0df Rs+ Rt\nDSUB Rd, Rs Rt # Rd \uf0df Rs \u2013 Rt\nDOR Rd, Rs, Rt # Rd \uf0df Rs OR Rt\nDAND Rd, Rs, Rt # Rd \uf0df Rs AND Rt\n\n\nRecall: A\uf0df GPR[Rs] from ID\nRecall: B \uf0df GPR[Rt] from ID\n",
                    "\n"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: DADD, DSUB, DOR, DAND\nR-format logic/arithmetic op.\nDADD Rd, Rs, Rt # Rd \uf0df Rs+ Rt\nDSUB Rd, Rs Rt # Rd \uf0df Rs \u2013 Rt\nDOR Rd, Rs, Rt # Rd \uf0df Rs OR Rt\nDAND Rd, Rs, Rt # Rd \uf0df Rs AND Rt\n\n\nRecall: A\uf0df GPR[Rs] from ID\nRecall: B \uf0df GPR[Rt] from ID\n",
                    "\n",
                    "000000",
                    "Rs",
                    "Rt",
                    "Rd",
                    "shamt",
                    "Func",
                    ""
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: DADD, DSUB, DOR, DAND\nR-format logic/arithmetic op.\nDADD Rd, Rs, Rt # Rd \uf0df Rs+ Rt\nDSUB Rd, Rs Rt # Rd \uf0df Rs \u2013 Rt\nDOR Rd, Rs, Rt # Rd \uf0df Rs OR Rt\nDAND Rd, Rs, Rt # Rd \uf0df Rs AND Rt\n\n\nRecall: A\uf0df GPR[Rs] from ID\nRecall: B \uf0df GPR[Rt] from ID\nALUOut2 \uf0df A Func B\n",
                    "\n",
                    "000000",
                    "Rs",
                    "Rt",
                    "Rd",
                    "shamt",
                    "Func",
                    ""
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: BEQZ Rs , DoImm\nCalculate target address\nCheck branch condition\nUpdate program counter\n",
                    "\n"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: BEQZ Rs , DoImm\nCalculate target address\nRecall: Func2(PC, DoImm) = (PC+4) + (DoImm+ << 2)\nRecall: PC \uf0df PC +4 in IF\nRecall: Imm \uf0df DoImm+ in ID\nALUOut1 \uf0dfPC + (Imm << 2) "
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: BEQZ Rs , DoImm\nCalculate target address\nRecall: Func2(PC, DoImm) = (PC+4) + (DoImm+ << 2)\nRecall: PC \uf0df PC +4 in IF\nRecall: Imm \uf0df DoImm+ in ID\nALUOut1 \uf0dfPC + (Imm << 2)\nCheck branch condition\nZero flag in ALU\nRaised when ALU result is zero "
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: BEQZ Rs , DoImm\nCalculate target address\nRecall: Func2(PC, DoImm) = (PC+4) + (DoImm+ << 2)\nRecall: PC \uf0df PC +4 in IF\nRecall: Imm \uf0df DoImm+ in ID\nALUOut1 \uf0dfPC + (Imm << 2)\nCheck branch condition\nZero flag in ALU\nRaised when ALU result is zero \nZero \uf0df A BranchOp R0"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: BEQZ Rs , DoImm\nCalculate target address\nRecall: Func2(PC, DoImm) = (PC+4) + (DoImm+ << 2)\nRecall: PC \uf0df PC +4 in IF\nRecall: Imm \uf0df DoImm+ in ID\nALUOut1 \uf0dfPC + (Imm << 2)\nCheck branch condition\nZero flag in ALU\nRaised when ALU result is zero \nZero \uf0df A BranchOp R0\nUpdate program counter\nIf Zero PC\uf0df ALUOut1\n"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "Let\u2019s Build a Processor: Instruction Execute",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Execute",
                    "EX: BEQZ Rs , DoImm\nCalculate target address\nALUOut1 \uf0dfPC + (Imm << 2)\nCheck branch condition\nZero flag in ALU. 1-bit flag \nRaised to 1 when ALU result is zero. Else, it is set to 0\nZero \uf0df A BranchOp R0  # A \u2013 R0\nUpdate program counter\nIf Zero PC\uf0df ALUOut1\n"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "Let\u2019s Build a Processor: Instruction Memory",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Memory",
                    "MEM: LD\nLD Rt, Rs, DoImm\nGPR[Rt]\uf0df M[Rs + DoImm+]\nRecall: ALUOut1\uf0dfA +Imm in EX\nLMD \uf0df M[ALUOut1]\nLMD: Load Memory Double\nHold data obtained from memory \n\n\n",
                    "\n",
                    "\n",
                    "\n"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "Let\u2019s Build a Processor: Instruction Memory",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction Memory",
                    "MEM: SD\nSD Rt, Rs, DoImm\nM[Rs + DoImm+] \uf0dfRt\nRecall: ALUOut1\uf0dfA +Imm in EX\nRecall: B \uf0df GPR[Rt] in ID\nM[Aluout1]\uf0df B\n\n\n",
                    "\n",
                    "\n",
                    "\n"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "Let\u2019s Build a Processor: Instruction WriteBack",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction WriteBack",
                    "WB: LD\nLD Rt, Rs, DoImm\nGPR[Rt]\uf0df M[Rs + DoImm+]\nRecall: LMD\uf0dfM[ALUOut1] in MEM\nGPR[Rt]\uf0df LMD\n\n\n\n",
                    "\n",
                    "\n",
                    "\n"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "Let\u2019s Build a Processor: Instruction WriteBack",
                "slide_text": [
                    "Let\u2019s Build a Processor: Instruction WriteBack",
                    "WB: DADD, DOR, DAND, DSUB\nDADD Rd, Rs, Rt # Rd \uf0df Rs + Rt\nData in in ALUOut2 after EX\nGPR[Rd] \uf0df ALUOut2\n\n\n\n",
                    "\n",
                    "\n",
                    "\n"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "Let\u2019s Build a Processor: High-Level Diagram",
                "slide_text": [
                    "Let\u2019s Build a Processor: High-Level Diagram",
                    "\n",
                    "\n",
                    "\n",
                    "Break execution steps into states\nLabel each state (numerically)\nTransition between states according to instruction"
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "Let\u2019s Build a Processor: High-Level Diagram",
                "slide_text": [
                    "Let\u2019s Build a Processor: High-Level Diagram",
                    "\n",
                    "\n",
                    "IR \u2190 M[PC]\nPC \u2190 PC+4",
                    "0",
                    "IF",
                    "A\u2190 GPR[Rs]\nB \u2190 GPR[Rt]\nImm \u2190 DoImm+",
                    "ID",
                    "1",
                    "LD,SD",
                    "ALUOut1 \u2190 A+Imm",
                    "EX",
                    "2",
                    "LMD \u2190M[ALUOut1]",
                    "MEM",
                    "LD",
                    "GPR[Rt]\u2190 LMD",
                    "WB",
                    "4",
                    "0",
                    "3",
                    "M[ALUOut1]\u2190B",
                    "5",
                    "0",
                    "SD",
                    "A/L\nR-format",
                    "6",
                    "ALUOut2 \u2190 A func B",
                    "GPR[Rd]\u2190 ALUOut2",
                    "0",
                    "ALUOut1 \u2190 PC+Imm << 2\nZero \u2190 A BranchOp 0\nIf Zero, PC \u2190 ALUOut1\nZero \u2190 0",
                    "BEQZ",
                    "8",
                    "0",
                    "7"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "Processor Clock Rate",
                "slide_text": [
                    "Processor Clock Rate",
                    "Operating frequency of CPU\nSpeed for each operation\n1 GHz\n 1/ 1*109 = 1 ns\n1 clock cycle = 1 ns\n1 cycle: time for each state in high-level state diagram"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "Processor Clock Rate",
                "slide_text": [
                    "Processor Clock Rate",
                    "\n",
                    "\n",
                    "IR \u2190 M[PC]\nPC \u2190 PC+4",
                    "0",
                    "IF",
                    "A\u2190 GPR[Rs]\nB \u2190 GPR[Rt]\nImm \u2190 DoImm+",
                    "ID",
                    "1",
                    "LD,SD",
                    "ALUOut1 \u2190 A+Imm",
                    "EX",
                    "2",
                    "LMD \u2190M[ALUOut1]",
                    "MEM",
                    "LD",
                    "GPR[Rt]\u2190 LMD",
                    "WB",
                    "4",
                    "0",
                    "3",
                    "M[ALUOut1]\u2190B",
                    "5",
                    "0",
                    "SD",
                    "A/L\nR-format",
                    "6",
                    "ALUOut2 \u2190 A func B",
                    "GPR[Rd]\u2190 ALUOut2",
                    "0",
                    "ALUOut1 \u2190 PC+Imm << 2\nZero \u2190 A BranchOp 0\nIf Zero, PC \u2190 ALUOut1\nZero \u2190 0",
                    "BEQZ",
                    "8",
                    "0",
                    "7",
                    "LD, R9, 0(R8)"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "Processor Clock Rate",
                "slide_text": [
                    "Processor Clock Rate",
                    "\n",
                    "\n",
                    "IR \u2190 M[PC]\nPC \u2190 PC+4",
                    "0",
                    "IF",
                    "A\u2190 GPR[Rs]\nB \u2190 GPR[Rt]\nImm \u2190 DoImm+",
                    "ID",
                    "1",
                    "LD,SD",
                    "ALUOut1 \u2190 A+Imm",
                    "EX",
                    "2",
                    "LMD \u2190M[ALUOut1]",
                    "MEM",
                    "LD",
                    "GPR[Rt]\u2190 LMD",
                    "WB",
                    "4",
                    "0",
                    "3",
                    "M[ALUOut1]\u2190B",
                    "5",
                    "0",
                    "SD",
                    "A/L\nR-format",
                    "6",
                    "ALUOut2 \u2190 A func B",
                    "GPR[Rd]\u2190 ALUOut2",
                    "0",
                    "ALUOut1 \u2190 PC+Imm << 2\nZero \u2190 A BranchOp 0\nIf Zero, PC \u2190 ALUOut1\nZero \u2190 0",
                    "BEQZ",
                    "8",
                    "0",
                    "7",
                    "LD, R9, 0(R8)\nStates: 0 \uf0e0 1 \uf0e0 2 \uf0e03 \uf0e0 4\n5  clock cycles"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "Processor Clock Rate",
                "slide_text": [
                    "Processor Clock Rate",
                    "Code Segment: a = b|c\nC0    LD R9, 8(R8)   \uf0e0 5 cycles\nC4    LD R10, (16)10(R8) \uf0e0 5 cycles\nC8    DOR R11, R9, R10 \uf0e0 4 cycles \nCC    SD R11, 0(R8)  \uf0e0 4 cycles\nTotal \uf0e0 18 cycles"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "Processor Performance",
                "slide_text": [
                    "Processor Performance",
                    "Code Segment: a = b|c\nC0    LD R9, 8(R8)   \uf0e0 5 cycles\nC4    LD R10, (16)10(R8) \uf0e0 5 cycles\nC8    DOR R11, R9, R10 \uf0e0 4 cycles \nCC    SD R11, 0(R8)  \uf0e0 4 cycles\nTotal \uf0e0 18 cycles",
                    "Is this fast?\nThe processor of a typical smartphone\ncan execute 4 instructions/cycle\nTHIS IS NOT FAST!!!!"
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "Processor Performance",
                "slide_text": [
                    "Processor Performance",
                    "\n",
                    "\n",
                    "IR \u2190 M[PC]\nPC \u2190 PC+4",
                    "0",
                    "IF",
                    "A\u2190 GPR[Rs]\nB \u2190 GPR[Rt]\nImm \u2190 DoImm+",
                    "ID",
                    "1",
                    "LD,SD",
                    "ALUOut1 \u2190 A+Imm",
                    "EX",
                    "2",
                    "LMD \u2190M[ALUOut1]",
                    "MEM",
                    "LD",
                    "GPR[Rt]\u2190 LMD",
                    "WB",
                    "4",
                    "0",
                    "3",
                    "M[ALUOut1]\u2190B",
                    "5",
                    "0",
                    "SD",
                    "A/L\nR-format",
                    "6",
                    "ALUOut2 \u2190 A func B",
                    "GPR[Rd]\u2190 ALUOut2",
                    "0",
                    "ALUOut1 \u2190 PC+Imm << 2\nZero \u2190 A BranchOp 0\nIf Zero, PC \u2190 ALUOut1\nZero \u2190 0",
                    "BEQZ",
                    "8",
                    "0",
                    "7",
                    "LD, R9, 0(R8)\n DADD R9, R9 R0"
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "Processor Performance",
                "slide_text": [
                    "Processor Performance",
                    "Methods to Improve Performance\nPipelining\nSuperscalar\nSpeculative Execution\nOut-of-Order Execution\nMultithreading\nMulticore"
                ]
            },
            {
                "slide_number": 50,
                "slide_title": "Processor Pipelining",
                "slide_text": [
                    "Processor Pipelining",
                    "Pipelined Execution\nInstruction-level parallelism (ILP)\nExecution steps broken down into stages"
                ]
            },
            {
                "slide_number": 51,
                "slide_title": "Processor Pipelining",
                "slide_text": [
                    "Processor Pipelining",
                    "Pipelined Execution"
                ]
            },
            {
                "slide_number": 52,
                "slide_title": "Processor Pipelining",
                "slide_text": [
                    "Processor Pipelining",
                    "Pipelined Execution"
                ]
            },
            {
                "slide_number": 53,
                "slide_title": "Processor Pipelining",
                "slide_text": [
                    "Processor Pipelining",
                    "Pipelined Execution"
                ]
            },
            {
                "slide_number": 54,
                "slide_title": "Processor Pipelining",
                "slide_text": [
                    "Processor Pipelining",
                    "Pipelined Execution"
                ]
            },
            {
                "slide_number": 55,
                "slide_title": "Processor Pipelining",
                "slide_text": [
                    "Processor Pipelining",
                    "Pipelined Execution"
                ]
            },
            {
                "slide_number": 56,
                "slide_title": "Processor Pipelining",
                "slide_text": [
                    "Processor Pipelining",
                    "Pipelined Execution"
                ]
            },
            {
                "slide_number": 57,
                "slide_title": "Processor Pipelining - Hazards",
                "slide_text": [
                    "Processor Pipelining - Hazards",
                    "Conflicts of execution in pipeline\nStructural hazards\nData hazards\nBranch hazards\n\n"
                ]
            },
            {
                "slide_number": 58,
                "slide_title": "Processor Pipelining - Hazards",
                "slide_text": [
                    "Processor Pipelining - Hazards",
                    "Conflicts of execution in pipeline\nStructural hazards\nData hazards\nBranch hazards\n\n"
                ]
            },
            {
                "slide_number": 59,
                "slide_title": "Processor Pipelining \u2013 Structural Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Structural Hazards",
                    "",
                    "",
                    "At cycle 3, both IF and EX need ALU\nIF : PC \uf0df PC +4 \nEX: ALUOut1 \uf0df A + Imm\nwhich stage gets the ALU first?"
                ]
            },
            {
                "slide_number": 60,
                "slide_title": "Processor Pipelining \u2013 Structural Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Structural Hazards",
                    "",
                    "",
                    "At cycle 4, both IF and MEM need memory port\nIF : IR\uf0df M[PC] \nMEM: M[ALUOut1] \uf0df B\nWhich stage get memory port first?"
                ]
            },
            {
                "slide_number": 61,
                "slide_title": "Processor Pipelining \u2013 Structural Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Structural Hazards",
                    "Mitigation: Add multiple resources\nOne ALU for IF stage, another ALU for EX stage\nOne memory port for IF, another port for MEM stage\nGenerally, CPUs have several replications of resources and structural hazards rarely occur for common applications\n\n"
                ]
            },
            {
                "slide_number": 62,
                "slide_title": "Processor Pipelining \u2013 Data Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Data Hazards",
                    "",
                    "",
                    "Read After Write (RAW) hazard\nInstruction at C8 depends on R9 and R10\nThe value of R10 is not updated until cycle 6\nInstruction at C8 reads it in ID stage at cycle 5\nInstruction at C8 gets wrong data"
                ]
            },
            {
                "slide_number": 63,
                "slide_title": "Processor Pipelining \u2013 Data Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Data Hazards",
                    "Data Forwarding\nSend data from MEM to EX stage when it is needed\nIn MEM, value of R10 is in LMD register\nEX gets value of R10 in cycle 5 and dismisses value read in cycle 4 during ID stage\n",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 64,
                "slide_title": "Processor Pipelining \u2013 Data Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Data Hazards",
                    "Instruction Reordering\nDuring compilation, find independent instructions\nPut them in between instructions that would lead to RAW hazards\n\n"
                ]
            },
            {
                "slide_number": 65,
                "slide_title": "Processor Pipelining \u2013 Data Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Data Hazards",
                    "Instruction Reordering\n\n",
                    "Instructions at C4 and C8 lead to RAW\nInstruction at D0 is independent of instructions C4, C8, CC"
                ]
            },
            {
                "slide_number": 66,
                "slide_title": "Processor Pipelining \u2013 Data Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Data Hazards",
                    "Instruction Reordering\n\n",
                    "Instructions at C4 and C8 lead to RAW\nInstruction at D0 is independent of instructions C4, C8, CC\nPut (previously D0) independent instruction in between RAW hazard instructions to give one more cycle between them",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 67,
                "slide_title": "Processor Pipelining \u2013 Branch Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Branch Hazards",
                    "Branch instruction BEQZ at E0 checks the condition and gets the target at EX stage in cycle 6\nTo keep pipeline full, next instruction needs to be fetched at cycle 5\nBut\nWe don\u2019t know if the branch is taken or the target address until cycle 6\nHow do know what instruction to fetch for IF at cycle 5?",
                    "",
                    "Is this correct?"
                ]
            },
            {
                "slide_number": 68,
                "slide_title": "Processor Pipelining \u2013 Branch Hazards",
                "slide_text": [
                    "Processor Pipelining \u2013 Branch Hazards",
                    "Mitigation 1: Pipeline bubble\nStall pipeline until branch instruction finishes EX stage\nDoes not maximize pipeline throughput\nMitigation 2: Branch delay slot\nSimilar to instruction re-ordering\nPut instruction that is executes  whether branch is  taken or not right after branch\nMitigation 2: Branch prediction\nPredict if branch is taken/not taken\nFetch next instruction based on prediction\nWhen branch completes, check if prediction was correct\nUpdate his tory for better accuracy for next time\nPrediction over 99% accurate\n\n"
                ]
            },
            {
                "slide_number": 69,
                "slide_title": "Topics Covered",
                "slide_text": [
                    "Topics Covered",
                    "3 instruction formats in MIPS\nR, I, and J-formats\nInstruction formatting fundamental in CPU design\n5 main steps to execute instruction\nFetch\nDecode\nExecute\nMemory \nWriteBack\nCPU Pipelining"
                ]
            }
        ]
    },
    {
        "module_number": 21,
        "module_name": "Computer Organization Module 21 Pt 2",
        "file_name": "21 - Computer Organization Module 21 Pt 2.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Computer Organization\u000bPart 2",
                "slide_text": [
                    "Computer Organization\u000bPart 2",
                    "Jerry B. Backer\nNYU Tandon School of Engineering\n"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Outline",
                "slide_text": [
                    "Outline",
                    "Memory Hierarchy\nCache Organization"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Memory Hierarchy",
                "slide_text": [
                    "Memory Hierarchy",
                    "Main memory (DRAM)\nHolds instructions and data for IF and MEM stages\nSo far, we assume 1-cycle access\nIn reality, DRAM is slow: > 100 cycles\n\n"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Memory Hierarchy",
                "slide_text": [
                    "Memory Hierarchy",
                    "Main memory (DRAM)\nHolds instructions and data for IF and MEM stages\nSo far, we assume 1-cycle access\nIn reality, DRAM is slow: > 100 cycles\n\n",
                    "The code would take ~ 707 cycles to complete when\nDRAM speed is considered"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Memory Hierarchy -Caches",
                "slide_text": [
                    "Memory Hierarchy -Caches",
                    "\n",
                    "",
                    "Cache\nMemory put between DRAM and CPU\nHolds recent instructions and data\nPrinciple of  temporal locality\nImplemented as static RAM (SRAM)\nNo need to refresh (unlike DRAM) \uf0e0 faster\nSmaller than DRAM (4KB \u2013 1MB)\nFaster than DRAM (~ 1-12 cycles)\n\n"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Memory Hierarchy -Caches",
                "slide_text": [
                    "Memory Hierarchy -Caches",
                    "",
                    "Hard Disk\n1 TB; 106 cycles",
                    "DRAM\n   8 GB; 103 cycles",
                    "L2 Cache\n32KB-1MB;  ~12 cycles",
                    "L1 Cache\n2KB-32KB; \n1-4 cycles",
                    "GPR\n1 cycle",
                    "Multiple Cache Levels\nL1: On chip and closest to CPU \nInstruction L1 (IL1)\nData L1 (DL1)\nL2: both instruction and data\nBigger and slower than L1\nL3: found in some processors"
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Memory Hierarchy \u2013 DRAM and Cache Blocks",
                "slide_text": [
                    "Memory Hierarchy \u2013 DRAM and Cache Blocks",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "0",
                    "1",
                    "3",
                    "Locality Principles:\nSpatial Locality: If instruction or data is accessed, the one near it is likely to be accessed\nTemporal Locality: If instruction or data is recently accessed, it will be accessed soon again"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Memory Hierarchy \u2013 Locality Principles",
                "slide_text": [
                    "Memory Hierarchy \u2013 Locality Principles",
                    "Temporal Locality\nIf data or instruction is recently used, it will be used again soon\n\n\n\n\n\nKeep instructions for loop in cache, near CPU so it be faster to access\n",
                    "int mult(int x, int y) \t\t\t\n{     int res = 0, i=y;\ndo {res+=x;  i--; }while( i != 0); // code inside of loop will be used several times soon after first access\n}"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Memory Hierarchy \u2013 Locality Principles",
                "slide_text": [
                    "Memory Hierarchy \u2013 Locality Principles",
                    "Spatial Locality\nIf data or instruction is recently used, the data or instruction next to it will likely be needed soon\n\n\n\n\n\n\n\nBring array elements at index 1, 2, 3 when bringing element at index 0\n",
                    "int sum(int array[], int size) \t\t\n{     int is = 0,acc=0;\n\tfor (i = 0; I < size; i++)\n\t\tacc+=array[i] // elements near each other in the array will be accessed around the same time\n} "
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Memory Hierarchy \u2013Cache Configuration",
                "slide_text": [
                    "Memory Hierarchy \u2013Cache Configuration",
                    "\n\n",
                    "Cache Parameters\nCache Size: determined at design time \nAssociativity\nReplacement Policy\nWrite Policy\n"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Memory Hierarchy -Caches",
                "slide_text": [
                    "Memory Hierarchy -Caches",
                    "\n",
                    "",
                    "Cache\nMemory put between DRAM and CPU\nHolds recent instructions and data\nPrinciple of  temporal locality\nImplemented as static RAM (SRAM)\nNo need to refresh (unlike DRAM) \uf0e0 faster\nSmaller than DRAM (4KB \u2013 1MB)\nFaster than DRAM (~ 1-12 cycles)\n\n"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "0",
                    "1",
                    "3"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Direct Mapping:\nOne-to-one mapping of DRAM and cache blocks",
                    "0",
                    "1",
                    "3"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "0",
                    "1",
                    "15",
                    "0",
                    "1",
                    "3",
                    "Cache Blocks",
                    "Direct Mapping:\nOne-to-one mapping of DRAM and cache blocks"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                    "0x12345678901234567890123456",
                    "",
                    "",
                    "",
                    "0xABCDEF0ABCDEF0ABCDEF0ABC",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0xABCDEF0ABCDEF0ABCDEF0ABC",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "0",
                    "1",
                    "15",
                    "0",
                    "1",
                    "3",
                    "Cache Blocks",
                    "?",
                    "Direct Mapping:\nOne-to-one mapping of DRAM and cache blocks\nIf cache block is already occupied, data must be overwritten"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Direct Map",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "0",
                    "1",
                    "15",
                    "0",
                    "Benefits\nEasy search: just go to index\nLow access latency\nLimitation\nOnly one place to put DRAM block ",
                    "1",
                    "3"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Fully Associative",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Fully Associative",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Fully Associative\nDRAM block can go to any free cache block",
                    "0",
                    "1",
                    "3"
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Fully Associative",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Fully Associative",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Fully Associative\nDRAM block can go to any free cache block\nBenefit\nBetter temporal locality\nLimitation\nLonger access delay ( > 4 cycles)",
                    "0",
                    "1",
                    "3"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "0",
                    "1",
                    "3",
                    "Direct Mapping:\nOne-to-one mapping of DRAM and cache blocks\nFully Associative\nDRAM block can go to any free cache block"
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Set Associative",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Set Associative",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Set Associative\nDivide cache into sets, where each set has N cache blocks\n",
                    "set 0",
                    "set 1"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Set Associative",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Set Associative",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "set 0",
                    "set 1",
                    "Set Associative\nDivide cache into sets, where each set has N cache blocks\nDRAM block can only go to a fixed set\nDRAM block can go to any cache block within said fixed set\n\n"
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "Memory Hierarchy \u2013 Cache Associativity: Set Associative",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Associativity: Set Associative",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "set 0",
                    "set 1",
                    "Set Associative\n Middle ground between direct mapping and fully associative\nLess access latency than fully associative\nMore capacity than direct mapping\t"
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "Memory Hierarchy \u2013 Cache Block Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Block Replacement Policy"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "Memory Hierarchy \u2013 Cache Block Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Block Replacement Policy",
                    "0x12345678901234567890123456",
                    "",
                    "",
                    "",
                    "0xABCDEF0ABCDEF0ABCDEF0ABC",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0xABCDEF0ABCDEF0ABCDEF0ABC",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "0",
                    "Direct Mapping:\nOnly one option\nKick out content of block and bring new one\n",
                    "1",
                    "3",
                    "?"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "Memory Hierarchy \u2013 Cache Block Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Block Replacement Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0xABC34930897ED1093738370000",
                    "0x489CDFE000215569843EA10987",
                    "0xABCD4847393EDF09CBDEF9894",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Fully Associative\nWhich cache block to evict?",
                    "0",
                    "1",
                    "3",
                    "?"
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Memory Hierarchy \u2013 LRU Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 LRU Replacement Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0xABC34930897ED1093738370000",
                    "0x489CDFE000215569843EA10987",
                    "0xABCD4847393EDF09CBDEF9894",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Fully Associative\nWhich cache block to evict?\nBlock Age bits\nCounter to hold recency of access\nIncremented each time block is accessed\nUpdate when new  block is brought in cache",
                    "?",
                    "100011100000",
                    "Block Age bits",
                    "110000000001",
                    "100000000001",
                    "000011100011"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "Memory Hierarchy \u2013 LRU Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 LRU Replacement Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0xABC34930897ED1093738370000",
                    "0x489CDFE000215569843EA10987",
                    "0xABCD4847393EDF09CBDEF9894",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Fully Associative\nWhich cache block to evict?\nBlock Age bits\nCounter to hold recency of access\nIncremented each time block is accessed\nUpdate when new block is brought in cache\nLRU",
                    "?",
                    "100011100000",
                    "Block Age bits",
                    "110000000001",
                    "100000000001",
                    "000011100011"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "Memory Hierarchy \u2013 LRU Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 LRU Replacement Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0xABC34930897ED1093738370000",
                    "0x489CDFE000215569843EA10987",
                    "0xABCD4847393EDF09CBDEF9894",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Fully Associative\nWhich cache block to evict?\nBlock Age bits\nCounter to hold recency of access\nIncremented each time block is accessed\nUpdate when new block is brought in cache\nLRU\nEvict cache block with highest age bits",
                    "?",
                    "100011100000",
                    "Block Age bits",
                    "110000000001",
                    "100000000001",
                    "000011100011",
                    ""
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "Memory Hierarchy \u2013 LRU Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 LRU Replacement Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0xABC34930897ED1093738370000",
                    "0x489CDFE000215569843EA10987",
                    "0x1110000EEDDDAACCCD0000000",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "Fully Associative\nWhich cache block to remove?\nBlock Age bits\nCounter to hold recency of access\nIncremented each time block is accessed\nUpdate when new block is brought in cache\nLRU\nReplace cache block with highest age bits\nUpdate age bits upon replacement",
                    "100011100000",
                    "Block Age bits",
                    "000000000001",
                    "100000000001",
                    "100011100001"
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "Memory Hierarchy \u2013 LRU Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 LRU Replacement Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "0xABC34930897ED1093738370000",
                    "0xABCD4847393EDF09CBDEF9894",
                    "0x12345678901243567890124587",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "000000000001",
                    "Block Age bits",
                    "001000000001",
                    "100000000001",
                    "110011100011",
                    "?",
                    "",
                    "N-Way Set Associative\nWhich cache block to evict?\nBlock Age bits\nCounter to hold recency of access\nIncremented each time block is accessed\nUpdate when new block is brought in cache\nLRU\nEvict cache block with highest age bits\nUpdate age bits upon replacement"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "Memory Hierarchy \u2013 LRU Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 LRU Replacement Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x1110000EEDDDAACCCD0000000",
                    "0xABC34930897ED1093738370000",
                    "0xABCD4847393EDF09CBDEF9894",
                    "0x12345678901243567890124587",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "N-Way Set Associative\nWhich cache block to evict?\nBlock Age bits\nCounter to hold recency of access\nIncremented each time block is accessed\nUpdate when new block is brought in cache\nLRU\nEvict cache block with highest age bits\nUpdate age bits upon replacement",
                    "110011100100",
                    "Block Age bits",
                    "001000000001",
                    "100000000001",
                    "110011100011"
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "Memory Hierarchy \u2013 LRU Replacement Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 LRU Replacement Policy",
                    "Least Recently Used Policy\nUse age bits to track recency of access for cache blocks\nIf we must evict cache block for new DRAM block\nCheck age bits of all cache block options\nEvict cache block with oldest age bits "
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "Memory Hierarchy \u2013 Cache Write Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Write Policy",
                    "Method to synchronize data in cache and RAM\n2 common methods\nWrite-Through (WT) Cache\nOn store instruction, write data to cache AND to DRAM\nNo need to synchronize because cache and DRAM  have latest data\nRequires more time and porwer for each store instruction\nWriteBack (WB) Cache\n On store instruction, write data ONLY to cache\nKeep track of which cache block has stored data\nUpdate DRAM when cache block needs to be evicted\nReques less time and power for each store instruction\nCache and DRAM not always in sync\n\n\n\n\n"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "Memory Hierarchy \u2013WriteBack Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013WriteBack Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "0xABC34930897ED1093738370000",
                    "0xABCD4847393EDF09CBDEF9894",
                    "0x12345678901243567890AAAAA",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "100011100000",
                    "Block Age bits",
                    "110000000001",
                    "100000000001",
                    "100011100001",
                    "WriteBack\nDirty bit: bit to indicate if block has been modified by store\nIf dirty bit set on block to be evicted, first write it to DRAM, then evict it\n\n ",
                    "0",
                    "0",
                    "0",
                    "1",
                    "Dirty",
                    "",
                    "Store instruction\nWrite content to cache block only\nSet dirty bit of cache block to 1\nUpdate age bits"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "Memory Hierarchy \u2013WriteBack Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013WriteBack Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "0xABC34930897ED1093738370000",
                    "0xABCD4847393EDF09CBDEF9894",
                    "0x12345678901243567890AAAAA",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "100011100000",
                    "Block Age bits",
                    "000000000001",
                    "111011100001",
                    "100011100001",
                    "WriteBack\nDirty bit: bit to indicate if block has been modified by store\nIf dirty bit set on block to be evicted, first write it to DRAM, then evict it\n\n ",
                    "0",
                    "0",
                    "0",
                    "1",
                    "Dirty",
                    "?",
                    "LRU replacement with WriteBack"
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "Memory Hierarchy \u2013WriteBack Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013WriteBack Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "0xABC34930897ED1093738370000",
                    "0xABCD4847393EDF09CBDEF9894",
                    "0x12345678901243567890AAAAA",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "100011100000",
                    "Block Age bits",
                    "000000000001",
                    "111011100001",
                    "100011100001",
                    "WriteBack\nDirty bit: bit to indicate if block has been modified by store\nIf dirty bit set on block to be evicted, first write it to DRAM, then evict it\n\n ",
                    "0",
                    "0",
                    "0",
                    "1",
                    "Dirty",
                    "?",
                    "",
                    "LRU replacement with WriteBack\nGet block with oldest age bit in set\nIf block is dirty, write it to DRAM and clear dirty bit\n\n"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "Memory Hierarchy \u2013WriteBack Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013WriteBack Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890AAAAA",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "0xABC34930897ED1093738370000",
                    "0xABCD4847393EDF09CBDEF9894",
                    "0x12345678901243567890AAAAA",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "100011100000",
                    "Block Age bits",
                    "000000000001",
                    "111011100001",
                    "110011100100",
                    "WriteBack\nDirty bit: bit to indicate if block has been modified by store\nIf dirty bit set on block to be evicted, first write it to DRAM, then evict it\n\n ",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "LRU replacement with WriteBack\nGet block with oldest age bit in set\nIf block is dirty, write it to DRAM and clear dirty bit\n",
                    "",
                    "?"
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "Memory Hierarchy \u2013WriteBack Policy",
                "slide_text": [
                    "Memory Hierarchy \u2013WriteBack Policy",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x1234567890124356781254780A",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "0xABC34930897ED1093738370000",
                    "0xABCD4847393EDF09CBDEF9894",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "DRAM Blocks",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "100011100000",
                    "Block Age bits",
                    "000000000001",
                    "111011100001",
                    "111011100101",
                    "WriteBack\nDirty bit: bit to indicate if block has been modified by store\nIf dirty bit set on block to be evicted, first write it to DRAM, then evict it\n\n ",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "LRU replacement with WriteBack\nGet block with oldest age bit in set\nIf block is dirty, write it to DRAM and clear dirty bit\nBring new DRAM content in and update age bits",
                    ""
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "Memory Hierarchy \u2013 Cache Addressing",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Addressing",
                    "Cache Tag",
                    "Cache Set #/ Cache Block #",
                    "Cache block offset",
                    "Memory  Address",
                    "DRAM Block #",
                    "Address Size",
                    "Number of bits for each component:\nAddress Size = Log2(DRAM Size)\nDRAM Block # = Log2(DRAM Size/Block Size)\nCache block Offset = Log2(Block Size)\nCache set # = Log2(Cache Size/ (Block Size * Associativity))\nCache block #  = Log2(Cache Size/ Block Size)\nCache Tag = Address Size - (Offset + Cache Set/Block Index)",
                    "Physical Memory Address Components"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "Memory Hierarchy \u2013 Cache Addressing",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Addressing",
                    "L1 Caches: 16-KB, 2-way associative, 16-B blocks\nDRAM: 16-MB, 16-B blocks\nNumber of bits for each component:\nAddress Size = log2(224) = 24 bits\nDRAM Block #= log2(224/24) = 20 bits\nCache Block Offset = log2(24) = 4 bits\nCache Set #=  log2(214/(21*24)) = 9 bits\nCache Tag = 24- (9+4) = 11 bits",
                    "11 bits",
                    "9 bits",
                    "4 bits",
                    "Memory  Address",
                    "20bits",
                    "24 bits"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "Memory Hierarchy \u2013 Cache Addressing",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Addressing",
                    "What is the cache offset used for ?\nRemember MIPS64: instructions are 4 bytes, data are 8 bytes\nTherefore, each 16-B block has:\n16/4 = 4 instructions\n16/8 = 2 data",
                    "0xF00A9458",
                    "0x0A000A00",
                    "0x360EF932",
                    "0xF0854032",
                    "IL1 Cache",
                    "0xC0",
                    "0xC4",
                    "0xC8",
                    "0xCC",
                    "Offset indicates which of the four instructions the address is requesting",
                    "0xEF34589AE0DC565AA",
                    "0xAA08954E4521AAFF",
                    "DL1 Cache",
                    "0x80000",
                    "0x80008",
                    "Offset indicates which of the two data the address is requesting"
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "Memory Hierarchy \u2013 Cache Addressing",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Addressing",
                    "What is the cache tag used for ?\nAssume 16-MB DRAM. Cache: 16-KB, 2-way set associative. 16-byte blocks",
                    "Consider the addresses: 0x001C and 0x004018 used at memory stage",
                    "00000000000",
                    "000000001",
                    "1100",
                    "Cache Tag",
                    "Cache Set #",
                    "DRAM Block #",
                    "0x001C ",
                    "00000000010",
                    "000000001 ",
                    "1000",
                    "Cache Tag",
                    "Cache Set #",
                    "DRAM Block #",
                    "0x004018 ",
                    "",
                    ""
                ]
            },
            {
                "slide_number": 42,
                "slide_title": "Memory Hierarchy \u2013 Cache Usage During Execution",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Usage During Execution",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "000000000000",
                    "Block Age bits",
                    "000000000000",
                    "000000000000",
                    "000000000000",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Valid",
                    "00000000000",
                    "Cache tags",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "11 bits",
                    "9 bits",
                    "4 bits",
                    "20 bits",
                    "24 bits",
                    "DL1 cache",
                    "DRAM Blocks"
                ]
            },
            {
                "slide_number": 43,
                "slide_title": "Memory Hierarchy \u2013 Cache Usage During Execution",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Usage During Execution",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "000000000000",
                    "Block Age bits",
                    "000000000000",
                    "000000000000",
                    "000000000000",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Valid",
                    "Cache tags",
                    "11 bits",
                    "9 bits",
                    "4 bits",
                    "20 bits",
                    "24 bits",
                    "DL1 cache",
                    "LD instruction: MEM Addr 0x001C \uf0e0 16 bits.\nAddress is 24 bits \uf0e0 0x00001C \n",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "DRAM Blocks",
                    "0x00001C  :0000 0000 0000 0000 0001 1100"
                ]
            },
            {
                "slide_number": 44,
                "slide_title": "Memory Hierarchy \u2013 Cache Usage During Execution",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Usage During Execution",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "000000000000",
                    "Block Age bits",
                    "000000000000",
                    "000000000000",
                    "000000000000",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Valid",
                    "Cache tags",
                    "00000000000",
                    "000000001",
                    "1100",
                    "DL1 cache",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "Cache Tag",
                    "Cache Set #",
                    "DRAM Block #",
                    "DRAM Blocks",
                    "LD instruction: MEM Addr 0x001C \uf0e0 16 bits.\nAddress is 24 bits \uf0e0 0x00001C \n",
                    "0x00001C  :0000 0000 0000 0000 0001 1100"
                ]
            },
            {
                "slide_number": 45,
                "slide_title": "Memory Hierarchy \u2013 Cache Usage During Execution",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Usage During Execution",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "000000000000",
                    "Block Age bits",
                    "000000000000",
                    "000000000000",
                    "000000000000",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Valid",
                    "Cache tags",
                    "00000000000",
                    "000000001",
                    "1100",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "Cache Tag",
                    "Cache Set #",
                    "DRAM Block #",
                    "",
                    "Break address into components (tag, offset,  set #, DRAM block #)\nGo to cache set # to find which set data should be in\nFor each valid  block in said set \uf0e0 NO VALID BLOCKS IN SET 1 \uf0e0 CACHE MISS\n\n\n",
                    "DRAM Blocks"
                ]
            },
            {
                "slide_number": 46,
                "slide_title": "Memory Hierarchy \u2013 Cache Usage During Execution",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Usage During Execution",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "000000000000",
                    "Block Age bits",
                    "000000000000",
                    "000000000000",
                    "000000000000",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Valid",
                    "Cache tags",
                    "00000000000",
                    "000000001",
                    "1100",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "Cache Tag",
                    "Cache Set #",
                    "DRAM Block #",
                    "Break address into components (tag, offset,  set #, DRAM block #)\nGo to cache set # to find which set data should be in\nFor each valid  block in said set \uf0e0 NO VALID BLOCKS IN SET 1 \uf0e0 CACHE MISS\nHandle cache miss using replacement and write policy \n\n\n\n",
                    "",
                    "DRAM Block 1",
                    "DRAM Blocks"
                ]
            },
            {
                "slide_number": 47,
                "slide_title": "Memory Hierarchy \u2013 Cache Usage During Execution",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Usage During Execution",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "Cache Blocks",
                    "0",
                    "1",
                    "15",
                    "000000000000",
                    "Block Age bits",
                    "000000000000",
                    "000000000001",
                    "000000000000",
                    "0",
                    "0",
                    "0",
                    "0",
                    "Dirty",
                    "0",
                    "0",
                    "1",
                    "0",
                    "Valid",
                    "Cache tags",
                    "00000000000",
                    "000000001",
                    "1100",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "00000000000",
                    "Cache Tag",
                    "Cache Set #",
                    "DRAM Block #",
                    "Break address into components (tag, offset,  set #, DRAM block #)\nGo to cache set # to find which set data should be in\nFor each valid  block in said set \uf0e0 NO VALID BLOCKS IN SET 1 \uf0e0 CACHE MISS\nHandle cache miss using replacement and write policy \n\n\n\n",
                    "",
                    "",
                    "",
                    "DRAM Blocks",
                    ""
                ]
            },
            {
                "slide_number": 48,
                "slide_title": "Memory Hierarchy \u2013 Cache Usage During Execution",
                "slide_text": [
                    "Memory Hierarchy \u2013 Cache Usage During Execution",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0xABCD4847393EDF09CBD0A1101",
                    "0xFFF3333595D156777411000225",
                    "Cache Blocks",
                    "001100000000",
                    "Block Age bits",
                    "000000000000",
                    "00001001000",
                    "111000000000",
                    "0",
                    "0",
                    "1",
                    "0",
                    "Dirty",
                    "1",
                    "0",
                    "1",
                    "1",
                    "Valid",
                    "Cache tags",
                    "00000000000",
                    "000000001 ",
                    "0100",
                    "00000011000",
                    "00000000000",
                    "00000000000",
                    "11000000110",
                    "Cache Tag",
                    "Cache Set #",
                    "DRAM Block #",
                    "0x000014  :0000 0000 0000 0000 0001 0100",
                    "LD instruction: MEM Addr 0x0014 \uf0e0 16 bits\nAddress is 24 bits \uf0e0 0x000014 \n",
                    "",
                    "0xABCD4847393EDF09CBDEF9894",
                    "",
                    "0xAAAAAAAAAABBBBEEEE000058",
                    "",
                    "0x12345678901243567890124587",
                    "0x1110000EEDDDAACCCD0000000",
                    "",
                    "0x489CDFE000215569843EA10987",
                    "",
                    "0xABC34930897ED1093738370000",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0",
                    "1",
                    "15",
                    "DRAM Blocks",
                    "Break address into components (tag, offset,  set #, DRAM block #)\nGo to cache set # to find which set data should be in\nFor cache block  0 in se t1, check valid bit is set\nCompare tags: match  \uf0e0 CACHE HIT\ndata found: end search "
                ]
            },
            {
                "slide_number": 49,
                "slide_title": "Topics Covered",
                "slide_text": [
                    "Topics Covered",
                    "Memory Hierarchy\nMain memory is SLOOOOW!!\nCaches are fundamental to speed CPU memory access\nSeveral tradeoffs to consider in cache design (mapping, replacement policy, write policy)\n"
                ]
            }
        ]
    },
    {
        "module_number": 23,
        "module_name": "Processes Take 2",
        "file_name": "23 - Processes - Take 2.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "In this module",
                "slide_text": [
                    "In this module",
                    "Definition of Processes \nDefinition of Threads\nOS resources for processes\nWorking with threads"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "What is a process?",
                "slide_text": [
                    "What is a process?",
                    "A running program in a system state\nIncludes: Code, data and Context\nCode is all in sequential memory\nProcess is created by OS to keep track of\nState of the running program\nResources assigned to the running program\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "State Definition (video combined with next slide)",
                "slide_text": [
                    "State Definition (video combined with next slide)",
                    "A state is a condition that the process will spend a significant amount of time in.\n\n"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "5 state process model",
                "slide_text": [
                    "5 state process model"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Suspension (video with this and next slide)",
                "slide_text": [
                    "Suspension (video with this and next slide)",
                    "The process is completely removed from main memory\nProcess is stored on secondary storage for future return to the point we left off\nFrees main memory for other processes\nControlled by medium-term scheduling algorithm\nThe process will NOT be aware of the suspension\nSome reasons for suspension\nDebugging\nFreeing main memory\nLong term delay\n"
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "",
                "slide_text": [
                    ""
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Process Image \u2013 The PCB",
                "slide_text": [
                    "Process Image \u2013 The PCB",
                    "Includes all the information the OS needs to run and control the process\nMemory Tables\nUseful for paging and segmentation (to be discussed in a later module)\nIO Tables\nWhich devices the process has access to\nFile Tables\nWhich files the process has access to\nStack\nThe call stack including all active functions\n"
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Contents of a PCB",
                "slide_text": [
                    "Contents of a PCB",
                    "Numeric IDs \nProcess ID \u2013 A numeric value unique for this process (16-bits)\nPPID \u2013 Parent process ID\nUID \u2013 User ID, so we know permissions\nMany more!\nRegisters \u2013 only valid, when not in running state\nStack pointers\nScheduling\nLinkages\nIPC\nResources\nMemory\n"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Modes",
                "slide_text": [
                    "Modes",
                    "Kernel\nCode can execute any part of the system\nUser\nCannot directly access system hardware\nCannot run some CPU instructions\nCannot access any memory outside of its own\nIn most processors, the Program Status Word (PSW) tells the system which mode its in\nSwitching\nEasy to go from Kernel to User\nUser to Kernel happens automatically upon certain events\n"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "Process Switching",
                "slide_text": [
                    "Process Switching",
                    "When does a switch occur\nInterrupt \u2013 A hardware signal indicating that the hardware need servicing\nTrap \u2013 A condition which requires OS support\nBlocking System call \u2013 A request from the process for OS support\nProcess Switching\nSave the context into the PCB\t\nUpdate accounting\nMove the PCB to the appropriate queue\nChoose another process\nUpdate memory management\nRestore its context\nMultiprocessing means these problems become more complex and happen more often.\n"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Threads",
                "slide_text": [
                    "Threads",
                    "Resource ownership and Execution are two different issues\nResource ownership now becomes the only concern of the process\nExecution \u2013 scheduling and running PARTS, yes there will be many, of the process become threads.\n"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "What is where in the multithreaded environment",
                "slide_text": [
                    "What is where in the multithreaded environment",
                    "Process \u2013 Process Control Block\nMemory allocation\nFiles\nLinkages\nThread \u2013 Thread Control Block\nContext (processor registers)\nStack (incl. Local variables)\nAccess to all of the resources of the thread\nDoes a process exist if it has no threads? "
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "Reasons for multithreading",
                "slide_text": [
                    "Reasons for multithreading",
                    "Foreground/Background\nAsynchronous processing\nSynchronous processing\nInfrequent tasks\nSpeed reading\nModular program structure\n"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Performance example",
                "slide_text": [
                    "Performance example",
                    "File server which does IO for 80% of the task\nNo threads, all asynchronous = 100tps\nThreads, CPU synchronous with IO = 125tps\nCaching, CPU bound = 400tps\nSMP, IO bound = 500tps\n"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Thread states/Operation",
                "slide_text": [
                    "Thread states/Operation",
                    "Ready, Running and Blocked\nthreads don\u2019t need New or Exit\nSuspension is a process level concept\n"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "What are the downsides",
                "slide_text": [
                    "What are the downsides",
                    "CONCURRENCY!!!!\nOver use of threads leading to confusion\n"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Implementation of Threads",
                "slide_text": [
                    "Implementation of Threads",
                    "Kernel-Level threads\nDifferent from Kernel Threads (where the OS is threaded)\nUser Level Threads\nDownsides of ULTs.\nHybrid approach\nLight Weight Process\nThread Scheduling details\n"
                ]
            }
        ]
    },
    {
        "module_number": 24,
        "module_name": "Thread Concurrency and Deadlocks",
        "file_name": "24 - Thread Concurrency and Deadlocks.pptx",
        "ppt": [
            {
                "slide_number": 0,
                "slide_title": "Concurrency and Deadlocks - Intro",
                "slide_text": [
                    "Concurrency and Deadlocks - Intro",
                    "Reminder about threads\nFeatures of having multiple threads\nPossible ways to have asynchrony\nCritical Sections\nExamples of concurrency issues\nMutual Exclusion\nSoftware solutions for Mutual exclusion\nHardware Options\nSemaphores\nDeadlocks\nSolutions to deadlocks\nDining Philosopher\u2019s problem\n\n\n\n"
                ]
            },
            {
                "slide_number": 1,
                "slide_title": "Reminder about threads",
                "slide_text": [
                    "Reminder about threads",
                    "Threads all share the resources of the process\nThreads run as if they were a separate program\nThreads can run asynchronously.\n"
                ]
            },
            {
                "slide_number": 2,
                "slide_title": "Features of having multiple threads",
                "slide_text": [
                    "Features of having multiple threads",
                    "Ease of communication\nEffective solution to prevent blocking while reading data\nThreads are relatively easy to create\nRisk of asynchrony\n\n\n\n"
                ]
            },
            {
                "slide_number": 3,
                "slide_title": "Asynchrony",
                "slide_text": [
                    "Asynchrony",
                    "Asynchrony occurs when two threads are running seemingly at the same time\nFor Example:\nA running thread might be interrupted due to hardware considerations, and a different thread chosen to run. (insert animation 1 DESCRIBED below)\nA running thread runs out of time on the CPU and a different thread is chosen to run.\nTwo threads running on two different CPUs simultaneously.\n"
                ]
            },
            {
                "slide_number": 4,
                "slide_title": "Critical Sections",
                "slide_text": [
                    "Critical Sections",
                    "Sometimes code will be written with the expectation that once we start a particular piece of code, it will run through to completion without being interrupted.\nIf the code IS interrupted, asynchrony can occur\nIn a worst-case scenario, data could become corrupt\nThe programmer must identify a \u201cCritical Section\u201d of code which, once entered, must prohibit any other thread from entering a critical section on the same resource.\nCritical sections should be as small as possible."
                ]
            },
            {
                "slide_number": 5,
                "slide_title": "Critical Section \u2013 Supplier/Demander",
                "slide_text": [
                    "Critical Section \u2013 Supplier/Demander",
                    ""
                ]
            },
            {
                "slide_number": 6,
                "slide_title": "Supplier/Demander explanation",
                "slide_text": [
                    "Supplier/Demander explanation",
                    "Multiple supplier and multiple demander threads are all \u201cactive\u201d in the system however this is a uniprocessor system so only one can run at a time.\nThe bufferCount should NEVER exceed 500 as there are only 500 places to store items in the buffer.\nAs we will see, due to asynchrony, the bufferCount can easily go higher than 500."
                ]
            },
            {
                "slide_number": 7,
                "slide_title": "Steps to producing a problem -1",
                "slide_text": [
                    "Steps to producing a problem -1",
                    "",
                    "499",
                    "bufferCount",
                    "At this point in the code, the bufferCount IS less than 500, so the thread is allowed to enter into the if statement.",
                    "//This is thread #1"
                ]
            },
            {
                "slide_number": 8,
                "slide_title": "Steps to producing a problem -2",
                "slide_text": [
                    "Steps to producing a problem -2",
                    "",
                    "499",
                    "bufferCount",
                    "The thread is interrupted here, after entering the IF, but before making any changes.",
                    "//This is thread #1"
                ]
            },
            {
                "slide_number": 9,
                "slide_title": "INTERRUPT",
                "slide_text": [
                    "INTERRUPT"
                ]
            },
            {
                "slide_number": 10,
                "slide_title": "Steps to producing a problem -3",
                "slide_text": [
                    "Steps to producing a problem -3",
                    "",
                    "499",
                    "bufferCount",
                    "Thread 2 is allowed to run and checks to see if bufferCount is less than 500, it is. ",
                    "//This is thread #2"
                ]
            },
            {
                "slide_number": 11,
                "slide_title": "Steps to producing a problem -4",
                "slide_text": [
                    "Steps to producing a problem -4",
                    "",
                    "500",
                    "bufferCount",
                    "Thread 2 puts its input into the buffer and, appropriately increments the bufferCount.  Thread 2 is finished and ends.",
                    "//This is thread #2"
                ]
            },
            {
                "slide_number": 12,
                "slide_title": "Steps to producing a problem -5",
                "slide_text": [
                    "Steps to producing a problem -5",
                    "",
                    "500",
                    "bufferCount",
                    "Thread 1 left off here, remember?  Uh oh, look at the next line of code!",
                    "//This is thread #1"
                ]
            },
            {
                "slide_number": 13,
                "slide_title": "Steps to producing a problem -6",
                "slide_text": [
                    "Steps to producing a problem -6",
                    "",
                    "501",
                    "bufferCount",
                    "BufferCount is 501!!!!!  How can that be?  We only have storage for 500 items in the buffer!!!!",
                    "//This is thread #1"
                ]
            },
            {
                "slide_number": 14,
                "slide_title": "Double Update/Missing Update",
                "slide_text": [
                    "Double Update/Missing Update",
                    "double balance;\n\nvoid Deposit(double amount)\n{\n\tdouble newbalance = balance+amount; //1\n\tbalance=newbalance; //3\n}\n\nvoid Withdrawl(double amount)\n{\n\tdouble newbalance = balance-amount; //2\n\tbalance=newbalance //4\n}"
                ]
            },
            {
                "slide_number": 15,
                "slide_title": "Double Update/Missing Update - Explanation",
                "slide_text": [
                    "Double Update/Missing Update - Explanation",
                    "Two transactions are happening on different processors at the exact same moment in time.\nThe balance starts out at $100\nThe first transaction is a deposit of $50\nThe second transaction is a withdraw of $100\n$100+$50-$100=$50, lets see if that\u2019s true"
                ]
            },
            {
                "slide_number": 16,
                "slide_title": "Double Update/Missing Update -1",
                "slide_text": [
                    "Double Update/Missing Update -1",
                    "double balance;\n\nvoid Deposit(double amount)\n{\n\tdouble newbalance = balance+amount; //1\n\tbalance=newbalance; //3\n}\n\nvoid Withdrawl(double amount)\n{\n\tdouble newbalance = balance-amount; //2\n\tbalance=newbalance //4\n}",
                    "100",
                    "50",
                    "amount",
                    "150",
                    "newbalance",
                    "100",
                    "amount",
                    "",
                    "newbalance",
                    "Program Counter",
                    "This thread has a temporary variable (maybe even a register) which stores the newbalance value.  So far, all is well."
                ]
            },
            {
                "slide_number": 17,
                "slide_title": "INTERRUPT",
                "slide_text": [
                    "INTERRUPT"
                ]
            },
            {
                "slide_number": 18,
                "slide_title": "Double Update/Missing Update -2",
                "slide_text": [
                    "Double Update/Missing Update -2",
                    "double balance;\n\nvoid Deposit(double amount)\n{\n\tdouble newbalance = balance+amount; //1\n\tbalance=newbalance; //3\n}\n\nvoid Withdrawl(double amount)\n{\n\tdouble newbalance = balance-amount; //2\n\tbalance=newbalance //4\n}",
                    "100",
                    "50",
                    "amount",
                    "150",
                    "newbalance",
                    "100",
                    "amount",
                    "0",
                    "newbalance",
                    "Program Counter",
                    "This thread ALSO has a temporary variable (maybe even a register) which stores the newbalance value.  So far, all is well."
                ]
            },
            {
                "slide_number": 19,
                "slide_title": "INTERRUPT",
                "slide_text": [
                    "INTERRUPT"
                ]
            },
            {
                "slide_number": 20,
                "slide_title": "Double Update/Missing Update -3",
                "slide_text": [
                    "Double Update/Missing Update -3",
                    "double balance;\n\nvoid Deposit(double amount)\n{\n\tdouble newbalance = balance+amount; //1\n\tbalance=newbalance; //3\n}\n\nvoid Withdrawl(double amount)\n{\n\tdouble newbalance = balance-amount; //2\n\tbalance=newbalance //4\n}",
                    "150",
                    "50",
                    "amount",
                    "150",
                    "newbalance",
                    "100",
                    "amount",
                    "0",
                    "newbalance",
                    "Program Counter",
                    "Now that we\u2019ve dealt with the interrupt, its time to go back and finish thread 1.  So the balance variable (the shared one) is updated with the new balance, deposit thread is finished."
                ]
            },
            {
                "slide_number": 21,
                "slide_title": "Double Update/Missing Update -4",
                "slide_text": [
                    "Double Update/Missing Update -4",
                    "double balance;\n\nvoid Deposit(double amount)\n{\n\tdouble newbalance = balance+amount; //1\n\tbalance=newbalance; //3\n}\n\nvoid Withdrawl(double amount)\n{\n\tdouble newbalance = balance-amount; //2\n\tbalance=newbalance //4\n}",
                    "0",
                    "50",
                    "amount",
                    "150",
                    "newbalance",
                    "100",
                    "amount",
                    "0",
                    "newbalance",
                    "Program Counter",
                    "Now we get into trouble.  The withdrawl thread didn\u2019t know anything about the Deposit thread and changed the balance.  We lost our $50 deposit!!!  "
                ]
            },
            {
                "slide_number": 22,
                "slide_title": "Critical sections identified",
                "slide_text": [
                    "Critical sections identified",
                    "In the Supplier/demander example, the checking and changing of the buffer and bufferCount must be \u201catomic.\u201d\nIn the Double update/missing update problem, the entire function should be atomic.\nThe need for these sections of code to be run atomically, indicates that they are critical sections"
                ]
            },
            {
                "slide_number": 23,
                "slide_title": "Mutual Exclusion rules",
                "slide_text": [
                    "Mutual Exclusion rules",
                    "No two threads may be in a critical section at the same time.\nWhen no threads is in a critical section any threads that requests entry must be allowed in without delay\nA threads may remain inside a critical section only for a small amount of time\n"
                ]
            },
            {
                "slide_number": 24,
                "slide_title": "Fundamental mutual exclusion",
                "slide_text": [
                    "Fundamental mutual exclusion",
                    "The system bus provides a fundamental system for providing mutual exclusion\nMemory cannot be accessed by two processors at the same time, one will win access to the system bus and the other will have to wait until the next cycle."
                ]
            },
            {
                "slide_number": 25,
                "slide_title": "Software Solutions for Mutual Exclusion",
                "slide_text": [
                    "Software Solutions for Mutual Exclusion",
                    "We have better solutions today but originally, Peterson\u2019s algorithm provided a fundamental way to protect two threads from accessing the same resource at the same time.\nPeterson provided each thread with a Boolean flag to indicate that thread wanted access to its critical section.\nAdditionally, there was a turn variable to overcome the problem of checking/changing the flag being a critical section itself.\nWhen a thread wants to enter a critical section, it raises its flag and offers the turn to the other thread.\nIf both threads want access, the turn variable decides who wins\n"
                ]
            },
            {
                "slide_number": 26,
                "slide_title": "Peterson\u2019s Algorithm",
                "slide_text": [
                    "Peterson\u2019s Algorithm",
                    "Void P0()\n{\nWhile (true)\n{flag[0] = true;\nturn=1;\nwhile (flag[1] && turn==1)\n\t/* Do Nothing */\n/* Critical Section */\nFlag[0] = false;\n}\n}\n",
                    "Void P1()\n{\nWhile (true)\n{flag[1] = true;\nturn=0;\nwhile (flag[0] && turn==0)\n\t/* Do Nothing */\n/* Critical Section */\nFlag[1] = false;\n}\n}\n"
                ]
            },
            {
                "slide_number": 27,
                "slide_title": "Hardware Solutions",
                "slide_text": [
                    "Hardware Solutions",
                    "Disable Interrupts\nPrevent the CPU from being interrupted and you prevent asynchrony\nIs this a good idea?\nTest and Set\nProvide a single ML instruction to check a memory location (Boolean flag) and set it if it is not set. A result is returned to indicate success or failure\nExchange\nThe location in memory (maybe a flag) is swapped with a register."
                ]
            },
            {
                "slide_number": 28,
                "slide_title": "Semaphores",
                "slide_text": [
                    "Semaphores",
                    "Semaphores are a common solution programmers use to protect critical sections.\nThe OS provides some of the service, but most work is done in user space\nA semaphore is a structure which fundamental communications data structure\nPrimarily two functions are used, signal and wait.\nSignals can be queued, or, if a thread is waiting, a signal will cause it to be released\nWait causes the thread to block if there are no signals to be consumed, the thread is queued to await the next signal."
                ]
            },
            {
                "slide_number": 29,
                "slide_title": "Semaphores  - How to use them",
                "slide_text": [
                    "Semaphores  - How to use them",
                    "The semaphore relies on a signal being queued initially.  \nBefore entering a critical section, the thread calls wait.  When exiting the thread calls signal.\nThus a semaphore will always have a signal queued when no thread is in a critical section.\n"
                ]
            },
            {
                "slide_number": 30,
                "slide_title": "Semaphore internals",
                "slide_text": [
                    "Semaphore internals",
                    "Internally semaphores usually keep some counter of the number of signals which have been sent.\nWait causes the counter to decrement.\nIf the counter ever becomes negative, the thread which caused it to go negative, and all subsequent threads, will be blocked and placed on a queue.  This is where the OS is invoked, to perform the block.\nWhen a signal is sent, the counter is incremented and if the counter is not positive, the next thread on the queue is released.\nSince the act of checking and modifying the counter is a critical section, the semaphore usually uses a hardware solution to prevent asynchrony in itself."
                ]
            },
            {
                "slide_number": 31,
                "slide_title": "Deadlocks",
                "slide_text": [
                    "Deadlocks",
                    "If a set of threads are all waiting for each other, then there is no way that any one of them will complete.\nUsually this results from one thread waiting for another thread to release a resource.\nThis is a permanent block which cannot resolve itself over time\nThere is no efficient solution today"
                ]
            },
            {
                "slide_number": 32,
                "slide_title": "A real deadlock",
                "slide_text": [
                    "A real deadlock"
                ]
            },
            {
                "slide_number": 33,
                "slide_title": "Deadlock resource types",
                "slide_text": [
                    "Deadlock resource types",
                    "Reusable\nOnce the use of the resource is complete, the resource can be used again by another thread.\nExamples include memory, devices, data structures, semaphores, etc\nConsumable\nOnce used, the resource is gone\nExamples include interrupts, signals, messages and data in IO Buffers"
                ]
            },
            {
                "slide_number": 34,
                "slide_title": "Items required for a deadlock",
                "slide_text": [
                    "Items required for a deadlock",
                    "Mutual Exclusion\nOnly one thread can use a resource at any given time\nHold-and-wait\nWhile a thread is \u201cwaiting\u201d on the allocation of a new resource, it retains all existing locks\nNo preemption\nA resource cannot be removed from a thread forcefully\nCircular wait\nA closed chain of threads in which the last thread is waiting on the first."
                ]
            },
            {
                "slide_number": 35,
                "slide_title": "Solutions for deadlocks",
                "slide_text": [
                    "Solutions for deadlocks",
                    "Deadlock Prevention\nEliminate one of the four requirements\nDeadlock Avoidance\nBefore each allocation check to make sure a deadlock is not possible, do not make an allocation that could cause a deadlock\nDeadlock Detection\nAllow deadlocks to happen and then resolve it when it does"
                ]
            },
            {
                "slide_number": 36,
                "slide_title": "Deadlock Prevention",
                "slide_text": [
                    "Deadlock Prevention",
                    "Eliminating one of the four\nMutual Exclusion\nThis is not often possible as mutual exclusion is usually required\nHold and wait\nThe system can require that all locks be requested simultaneously.\nIf a thread holds a lock, it cannot obtain another lock.\nNo preemption\nIf a thread request a new lock, and the request is denied, the thread must release all existing locks.\nThe OS may have authority to remove existing locks individually\nCircular wait\nThe resources are ordered such that a thread holds a lock on a higher numbered resource, it cannot request a lower numbered resource."
                ]
            },
            {
                "slide_number": 37,
                "slide_title": "Deadlock Avoidance",
                "slide_text": [
                    "Deadlock Avoidance",
                    "Required that the Operating System know, ahead of time, which resources a thread will request before it is finished\nEvery time a thread makes a new request, the OS runs an algorithm to see if that request will cause the system to deadlock.\nIf it will, the request is denied or queued\nThis usually uses a \u201cBanker\u2019s algorithm.\u201d"
                ]
            },
            {
                "slide_number": 38,
                "slide_title": "Deadlock detection",
                "slide_text": [
                    "Deadlock detection",
                    "This is not at all restrictive\nRecognize that deadlocks will occur and that a detection algorithm will need to be periodically run\nOnce a deadlock is detected, the OS should take action to resolve the deadlock\nSolutions to existing deadlocks\nRollback to a previously unlocked state (requires transaction logs)\nAbort all deadlocked threads\nAbort a thread, check for deadlock, repeat\nPreempt resources until the deadlock is resolved"
                ]
            },
            {
                "slide_number": 39,
                "slide_title": "Dining Philosophers problem.",
                "slide_text": [
                    "Dining Philosophers problem.",
                    "Presented by Dr. Edsger Dijkstra as a concurrency control problem\nIn a house live 5 philosophers numbered 0 thru 4.  They alternate between thinking and eating.  When it is time to eat, a circular table is set for them with each philosopher having a setting consisting of one plate and one fork.  The meal they will eat is, a particularly difficult to eat kind of, spaghetti.  To eat this meal, they must have two forks.  There are two forks next to each plate, so that presents no difficulty, as a consequence, however, no two neighbors may be eating simultaneously.\n\n"
                ]
            },
            {
                "slide_number": 40,
                "slide_title": "The dining deadlock",
                "slide_text": [
                    "The dining deadlock",
                    "If all philosophers are allowed to take a fork, all will have one fork and none will ever eat\nDijkstra proposed resource ordering the forks, so that the last philosopher had to request the zero numbered fork before he could request the fork numbered 4.\nAnother solution is to have a semaphore to prevent the fifth philosopher from entering the room.\nA semaphore is constructed with 4 signals queued, and the philosopher must request access to the room before requesting access to any fork."
                ]
            },
            {
                "slide_number": 41,
                "slide_title": "Concurrency and Deadlocks - Conclusion",
                "slide_text": [
                    "Concurrency and Deadlocks - Conclusion",
                    "Reminder about threads\nFeatures of having multiple threads\nPossible ways to have asynchrony\nCritical Sections\nExamples of concurrency issues\nMutual Exclusion\nSoftware solutions for Mutual exclusion\nHardware Options\nSemaphores\nDeadlocks\nSolutions to deadlocks\nDining Philosopher\u2019s problem\n\n\n\n\n"
                ]
            }
        ]
    }
]