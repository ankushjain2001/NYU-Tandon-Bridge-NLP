1
00:00:00,690 --> 00:00:02,820
So what happens when we actually open up the
file?

2
00:00:02,820 --> 00:00:07,630
Well the first thing is that the program,
your program, will ask the operating system

3
00:00:07,630 --> 00:00:09,010
to open the file.

4
00:00:09,010 --> 00:00:14,830
And what the operating system does, for output
files, is it checks to see if the file exists.

5
00:00:14,830 --> 00:00:20,410
If the file does exist, it's going to be erased
and a new file created in its place; so you'll

6
00:00:20,410 --> 00:00:22,750
lose the contents of that file.

7
00:00:22,750 --> 00:00:28,340
If the file doesn't exist then it's created
and either way your program is going to receive

8
00:00:28,340 --> 00:00:33,699
back the connection to that file, so that
then you can start to output to it.

9
00:00:33,699 --> 00:00:38,850
It's really important that when you're finished
working with a file, that you close the file.

10
00:00:38,850 --> 00:00:43,550
And there's a function inside the ofstream
object called close.

11
00:00:43,550 --> 00:00:47,880
So you would just simply say out file dot
close, for example, and that would close the

12
00:00:47,880 --> 00:00:49,210
connection.

13
00:00:49,210 --> 00:00:53,969
Because when you're writing to a file what
you have to realize is that, youâ€™re actually

14
00:00:53,969 --> 00:00:57,800
sending information into a buffer; it's into
a memory space.

15
00:00:57,800 --> 00:01:02,870
And the operating system is then told a periodic
interval to take the memory out of that memory

16
00:01:02,870 --> 00:01:06,550
space and physically put it on the on the
hard drive.

17
00:01:06,550 --> 00:01:12,630
What happens if your program crashes or the
system shuts down when your program has already

18
00:01:12,630 --> 00:01:18,260
written to that memory and hasn't yet flushed
that buffer out to the hard drive; you lose

19
00:01:18,260 --> 00:01:20,990
all that information, it's all completely
lost.

20
00:01:20,990 --> 00:01:24,920
So it's best to make sure that you close the
file.

21
00:01:24,920 --> 00:01:29,000
The other problem of course is that if we
have an output file we're doing writing to

22
00:01:29,000 --> 00:01:33,750
this and, we remember on the discussion on
locks just a minute ago, that if we're out

23
00:01:33,750 --> 00:01:38,180
putting information to a file we've locked
that file for reading.

24
00:01:38,180 --> 00:01:43,540
So if you still have a connection to the file
if you still have the file object open, nobody

25
00:01:43,540 --> 00:01:48,790
can read in and that includes you if your
program continues and tries to read in the

26
00:01:48,790 --> 00:01:50,560
data that it just wrote out.

27
00:01:50,560 --> 00:01:52,820
It won't be able to because of that locking
mechanism.

28
00:01:52,820 --> 00:01:57,940
So it's really important you close that file
connection when you're done with it.

29
00:01:57,940 --> 00:02:03,870
If the of stream object is destroyed because
it falls out of scope or if your program ends,

30
00:02:03,870 --> 00:02:08,340
of course the file connection is closed in
the buffers flush so everything's written

31
00:02:08,340 --> 00:02:09,500
at that point.

32
00:02:09,500 --> 00:02:12,170
So you don't have to worry about it if your
program ends.

33
00:02:12,170 --> 00:02:16,460
But if you're going to read in later on it's
really important that you close that file

34
00:02:16,460 --> 00:02:16,900
and reopen it.

