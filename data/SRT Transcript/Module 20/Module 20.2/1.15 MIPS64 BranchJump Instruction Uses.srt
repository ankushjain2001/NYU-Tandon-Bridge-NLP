1
00:00:00,470 --> 00:00:04,390
Let us now see some use cases of branch and
jump instructions.

2
00:00:04,390 --> 00:00:06,130
Consider this high-level C code.

3
00:00:06,130 --> 00:00:10,440
This is a function that calculates the absolute
value of a number.

4
00:00:10,440 --> 00:00:15,200
That is, if the number is negative, it turns
it to a positive; otherwise, it keeps it as

5
00:00:15,200 --> 00:00:16,490
is.

6
00:00:16,490 --> 00:00:19,810
The value us returned from the functional
call.

7
00:00:19,810 --> 00:00:23,840
As we see from the high-level code, there
is an if condition to check if the number

8
00:00:23,840 --> 00:00:25,359
is negative.

9
00:00:25,359 --> 00:00:31,029
This if condition in high-level code will
be translated to a conditional branch instruction.

10
00:00:31,029 --> 00:00:36,200
We also notice there is a return instruction
to end the execution of the absolute value

11
00:00:36,200 --> 00:00:37,200
function.

12
00:00:37,200 --> 00:00:42,120
This return instruction will be translated
to a jump register, as it is the jump register

13
00:00:42,120 --> 00:00:45,340
instruction that is used to return from function
calls.

14
00:00:45,340 --> 00:00:50,940
Here are several approaches to translate the
if X is less than 0 condition into machine

15
00:00:50,940 --> 00:00:51,980
code.

16
00:00:51,980 --> 00:00:55,930
Let us assume that X is in register R4.

17
00:00:55,930 --> 00:01:00,770
The simplest approach is to use the branch
if less than zero instruction.

18
00:01:00,770 --> 00:01:07,050
In that case, if X is negative, the CPU would
skip the sequential instructions and branch

19
00:01:07,050 --> 00:01:12,880
to the part of the code that perform X = minus
X in order to get the positive value.

20
00:01:12,880 --> 00:01:18,640
Another way to is to use the branch if greater
or equal to zero condition.

21
00:01:18,640 --> 00:01:23,490
In that case, X is positive, we would skip
the sequential instructions and branch to

22
00:01:23,490 --> 00:01:26,030
the part of the code that does return X.

23
00:01:26,030 --> 00:01:28,460
Otherwise, we would subtract.

24
00:01:28,460 --> 00:01:33,500
Another way is to combine SLT with branch
if equal instruction.

25
00:01:33,500 --> 00:01:36,740
The SLT instruction checks if X is less than
zero.

26
00:01:36,740 --> 00:01:39,830
If it is, it set R8 to 1.

27
00:01:39,830 --> 00:01:43,020
Otherwise, R8 is set to zero.

28
00:01:43,020 --> 00:01:46,409
The branch instruction then checks R8 to zero.

29
00:01:46,409 --> 00:01:53,740
If R8 is equal to zero, then x is positive,
the branch is taken, and the CPU branches

30
00:01:53,740 --> 00:01:55,830
to the return instruction.

31
00:01:55,830 --> 00:01:59,159
We will use this approach to further develop
the code for the absolute function.

