1
00:00:00,539 --> 00:00:05,700
Let's look at a problem where we have a grandparent,
parent, child kind of situation that's unbalanced.

2
00:00:05,700 --> 00:00:10,370
So, we have a grandparent node which has a
child of a parent node, and the parent node

3
00:00:10,370 --> 00:00:11,900
has a child of the child node.

4
00:00:11,900 --> 00:00:15,580
So, we have that sort of situation and it
doesn't really matter whether we're doing

5
00:00:15,580 --> 00:00:20,750
insertions on the left or insertions on the
right, but the grandparent parent child situation

6
00:00:20,750 --> 00:00:25,690
is set up here so that we have an unbalanced
situation.

7
00:00:25,690 --> 00:00:33,180
If the left parent’s left sub child is greater
than the left parent’s right sub child,

8
00:00:33,180 --> 00:00:38,080
or if we have the heights what we're talking
about is the height, or we have the right

9
00:00:38,080 --> 00:00:43,120
parent’s right sub child is greater than
the right parents’ left sub child.

10
00:00:43,120 --> 00:00:51,410
Or what I like to call it is either an outside-outside
insertion versus an outside-inside insertion;

11
00:00:51,410 --> 00:00:54,280
outside-inside is a different problem, outside-outside.

12
00:00:54,280 --> 00:00:59,510
So if we go right right, that's one condition;
if we go left left, that's one condition and

13
00:00:59,510 --> 00:01:02,030
that's solved by a single rotation.

14
00:01:02,030 --> 00:01:08,560
And what we're talking about with the single
rotation is taking the parents and making

15
00:01:08,560 --> 00:01:10,950
it the new grandparent position.

16
00:01:10,950 --> 00:01:17,190
So, in the case that I have described here,
we've got a node twenty and it's left child

17
00:01:17,190 --> 00:01:24,640
is ten and the left child of ten is three
and what we've got is we're going to promote

18
00:01:24,640 --> 00:01:26,200
ten.

19
00:01:26,200 --> 00:01:32,420
Now when we promote ten, it's like picking
up the node ten and the rest of the node sort

20
00:01:32,420 --> 00:01:34,220
of drop like Christmas balls.

21
00:01:34,220 --> 00:01:43,420
So,if we pick up ten, the twenty node converts
(turns into) the right node of ten; the twenty

22
00:01:43,420 --> 00:01:45,570
node becomes the right note of ten.

23
00:01:45,570 --> 00:01:51,070
So the reason that that works, picking it
up and then having ten’s right node become

24
00:01:51,070 --> 00:01:57,040
twenty is because in this condition, ten doesn't
have a right child.

25
00:01:57,040 --> 00:02:00,030
What would happen if ten did have a right
child?

26
00:02:00,030 --> 00:02:06,080
Well if ten didn't have a right child, then
the left child of twenty would become empty;

27
00:02:06,080 --> 00:02:07,799
it would become null pointer.

28
00:02:07,799 --> 00:02:13,050
Because we're picking up then the left child
of twenty is no longer important, because

29
00:02:13,050 --> 00:02:16,099
that was the pointer that pointed to ten,
but we don't need that anymore.

30
00:02:16,099 --> 00:02:22,379
So, the perfect solution is to make the left
child of twenty, actually point to the right

31
00:02:22,379 --> 00:02:24,079
child of ten.

32
00:02:24,079 --> 00:02:30,299
And if we do that remembering the fact that
all the nodes to that are greater than ten

33
00:02:30,299 --> 00:02:32,909
would be on the right of ten.

34
00:02:32,909 --> 00:02:38,299
Then it's important to recognize that this
still holds the binary search tree property,

35
00:02:38,299 --> 00:02:43,659
because when we pick up ten and its right
pointer now points to twenty; that's a value

36
00:02:43,659 --> 00:02:45,129
greater than.

37
00:02:45,129 --> 00:02:50,480
And remembering that all the values that were
greater than ten were on the right side of

38
00:02:50,480 --> 00:02:51,480
ten.

39
00:02:51,480 --> 00:02:56,489
So, if we make the left pointer of twenty
point to the values that are greater than

40
00:02:56,489 --> 00:03:01,920
ten (were greater than ten before) then we
still have that binary search tree property

41
00:03:01,920 --> 00:03:05,779
maintained and everything still works out
the way that we wanted to.

42
00:03:05,779 --> 00:03:12,549
So, this is what's known as a single rotation,
in this case actually it's called a single

43
00:03:12,549 --> 00:03:20,420
clockwise rotation because we're kind of going
clockwise. and what we can do is recognize

44
00:03:20,420 --> 00:03:21,420
that this works.

45
00:03:21,420 --> 00:03:27,949
Now it only works in the case of an outside-outside,
so if the heavier node that the node with

46
00:03:27,949 --> 00:03:34,959
the higher height, the bigger height, the
greater height is right right or left the

47
00:03:34,959 --> 00:03:37,079
left this work.

48
00:03:37,079 --> 00:03:43,049
But if we have a problem, we do have a problem,
if we're going left rights or if we're going

49
00:03:43,049 --> 00:03:45,569
right left and that's the higher node.

50
00:03:45,569 --> 00:03:48,739
So, we're going to see that as another solution
in the next slide.

