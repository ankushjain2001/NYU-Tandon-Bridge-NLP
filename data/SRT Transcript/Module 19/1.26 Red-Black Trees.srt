1
00:00:00,610 --> 00:00:06,200
Red-black trees are designed to try and solve
the problem of the balanced binary search

2
00:00:06,200 --> 00:00:07,200
tree.

3
00:00:07,200 --> 00:00:12,389
One of the issues that comes up with AVL trees
that we kind of glossed over Is the need to

4
00:00:12,389 --> 00:00:15,019
calculate those heights.

5
00:00:15,019 --> 00:00:18,160
And unfortunately, whenever we do an insertion,
the heights are going to change.

6
00:00:18,160 --> 00:00:20,560
Whenever we do a removal, the heights are
going to change.

7
00:00:20,560 --> 00:00:24,660
Whenever we rebalance, the heights are really
going to change, so if we do a rotation, really

8
00:00:24,660 --> 00:00:25,740
going to change.

9
00:00:25,740 --> 00:00:29,940
And unfortunately, that means that we're going
to have to calculate those heights which takes

10
00:00:29,940 --> 00:00:35,450
Log of N time, so really we're adding Log
N time on top of Log N time and that's two

11
00:00:35,450 --> 00:00:37,590
Log N for big Theta.

12
00:00:37,590 --> 00:00:42,360
It's not terrible, by no means, I mean it
would be much worse to put this into a linked

13
00:00:42,360 --> 00:00:45,430
list but we can do a little bit better.

14
00:00:45,430 --> 00:00:52,000
So the red-black tree aims to avoid the problem
of having to go back and recalculate heights

15
00:00:52,000 --> 00:00:53,000
every time.

16
00:00:53,000 --> 00:00:59,640
And the way that it does that is by four laws
and the four laws are kind of cryptic and

17
00:00:59,640 --> 00:01:01,420
really doesn't make sense until you see it.

18
00:01:01,420 --> 00:01:05,830
So, we're going to see it in a later slide,
but let's go over the laws and just get a

19
00:01:05,830 --> 00:01:06,830
good idea.

20
00:01:06,830 --> 00:01:09,990
So, the basis of the laws is that all nodes…

21
00:01:09,990 --> 00:01:12,610
First law, one, right.

22
00:01:12,610 --> 00:01:14,210
All nodes are colored either red or black.

23
00:01:14,210 --> 00:01:19,110
Well that's not hard because all we have to
do is put a Boolean in there, in each node,

24
00:01:19,110 --> 00:01:21,060
to say it's either red or black.

25
00:01:21,060 --> 00:01:23,479
It's just a Boolean value so that's very simple.

26
00:01:23,479 --> 00:01:27,780
The root is always black, and for that we
just say if we ever find that the root is

27
00:01:27,780 --> 00:01:31,549
red we'll just recolor it to black; it has
no impact on anything.

28
00:01:31,549 --> 00:01:37,370
So law two is very easy to comply with; if
the root is ever turned red, we just make

29
00:01:37,370 --> 00:01:39,800
it black again.

30
00:01:39,800 --> 00:01:43,830
Here's where life gets a little bit tougher,
but it's good to keep in mind that the purpose

31
00:01:43,830 --> 00:01:48,890
of these laws is to determine when a rotation
is going to be necessary.

32
00:01:48,890 --> 00:01:55,189
So, what we'd like to do is try and determine
when the rotation is necessary.

33
00:01:55,189 --> 00:01:57,790
Keep that in mind as we go through laws three
and four.

34
00:01:57,790 --> 00:02:03,500
Law three says that a red node cannot under
any circumstances have a red child.

35
00:02:03,500 --> 00:02:08,170
Now, don't read any more into it than just
that, because it doesn't say that a black

36
00:02:08,170 --> 00:02:12,530
node can't have a red child and it does not
say that a black node can't have a black child.

37
00:02:12,530 --> 00:02:17,900
All it says is that if we have a red nose,
we cannot have a red child.

38
00:02:17,900 --> 00:02:21,400
So that's the only restriction there.

39
00:02:21,400 --> 00:02:26,340
What happens if we try to insert a red node
onto a red child well then we're going to

40
00:02:26,340 --> 00:02:30,760
recognize that it needs to do a rotation or
we need to do a rebalance or something is

41
00:02:30,760 --> 00:02:32,069
going to have to change.

42
00:02:32,069 --> 00:02:36,879
Perhaps the color of the parent node is simple
enough that we can just recolor it to black;

43
00:02:36,879 --> 00:02:38,000
maybe it's the root.

44
00:02:38,000 --> 00:02:44,230
But we'll take care of that as we go through
more and we look at the actual code for this.

45
00:02:44,230 --> 00:02:50,430
The core of this is that law three: a red
node can never have a red child.

46
00:02:50,430 --> 00:02:59,231
The really hard one to maintain is that all
paths from the root to all children have to

47
00:02:59,231 --> 00:03:02,690
pass through the same number of black nodes.

48
00:03:02,690 --> 00:03:06,740
And this is where life gets really, really
confusing because if we're going through a

49
00:03:06,740 --> 00:03:08,580
node we need to count it.

50
00:03:08,580 --> 00:03:15,080
Now, how do we go about recognizing this without
going through all the paths.

51
00:03:15,080 --> 00:03:21,849
It's important to keep in mind that the purpose
of the laws is only to recognize when a rotation

52
00:03:21,849 --> 00:03:23,000
is necessary.

53
00:03:23,000 --> 00:03:29,330
So, what we do is we'll say that we start
off with one node, the root, and the root

54
00:03:29,330 --> 00:03:35,819
is always black; there's two nulls, one on
the left than one on the right of the root

55
00:03:35,819 --> 00:03:36,819
node.

56
00:03:36,819 --> 00:03:42,330
So if we go through and find the left null,
we've gone through one node, if we go through

57
00:03:42,330 --> 00:03:48,210
and find the right null that we've gone through
one black node and that's no problem.

58
00:03:48,210 --> 00:03:52,530
Insertions into a red black tree are going
to be red nodes.

59
00:03:52,530 --> 00:03:56,269
So whenever we do an insertion of a new node.

60
00:03:56,269 --> 00:03:58,780
We'll color the new node red.

61
00:03:58,780 --> 00:04:02,190
That's not a law, that's just an implementation
factor.

62
00:04:02,190 --> 00:04:06,080
So when we implement a new node we're going
to insert it as a red note.

63
00:04:06,080 --> 00:04:12,159
So, if we had a value, for example of twenty
and we inserted ten is the left sub child

64
00:04:12,159 --> 00:04:18,119
Then the left sub child will have two nulls
and that changes the number of paths but it

65
00:04:18,119 --> 00:04:20,949
doesn't change the number of black nodes that
we go through.

66
00:04:20,949 --> 00:04:24,960
We're still only going through the one black
node at the root.

67
00:04:24,960 --> 00:04:28,360
So that's why this makes this makes some semblance
of sense.

68
00:04:28,360 --> 00:04:32,520
Now you're going to ask yourself what happens
if we need to insert another node onto the

69
00:04:32,520 --> 00:04:35,060
left some child of ten.

70
00:04:35,060 --> 00:04:40,430
And the answer that is well it would be a
red node of a red child and all that means

71
00:04:40,430 --> 00:04:45,999
that we're violating a law three, and that
we need to recognize that a rotation is necessary.

72
00:04:45,999 --> 00:04:52,449
So, we've got these sort of solutions that
we can use to not violate the laws.

73
00:04:52,449 --> 00:04:57,659
And we’ll talk about that later in the next
slide or in a later slide.

74
00:04:57,659 --> 00:05:01,960
But what we're going to say is that these
are the laws of red black trees and we need

75
00:05:01,960 --> 00:05:05,460
to recognize and maintain them; how we do
that is a much bigger problem.

