1
00:00:00,570 --> 00:00:03,330
Insertion into a tree is not terribly difficult.

2
00:00:03,330 --> 00:00:07,730
The overview is kind of that we check to see
if the tree is empty and if it is of course,

3
00:00:07,730 --> 00:00:11,039
this is just the first note on the tree will
create it that way.

4
00:00:11,039 --> 00:00:15,259
If it's not then we have to go about and finding
the insertion point.

5
00:00:15,259 --> 00:00:19,160
So, what I've done here is given you the code,
the first one is just the first thing is just

6
00:00:19,160 --> 00:00:22,910
an if statement to check to see if the tree
is empty and if it is just pushing it on to

7
00:00:22,910 --> 00:00:24,259
the tree.

8
00:00:24,259 --> 00:00:28,480
If the trees down empty it's time to find
the insertion point and I do that by using

9
00:00:28,480 --> 00:00:30,330
my two pointers temp previous.

10
00:00:30,330 --> 00:00:35,850
And again, this should look very similar to
what we did with linked lists, in that eventually

11
00:00:35,850 --> 00:00:40,399
temp will become null; temp will be the null
pointer.

12
00:00:40,399 --> 00:00:45,120
And we're going to keep previous as one node
back from where we were.

13
00:00:45,120 --> 00:00:51,300
when temp falls off into null, we can look
at previous and decide if we're going to push

14
00:00:51,300 --> 00:00:53,850
on to the left or the right sub-child.

15
00:00:53,850 --> 00:00:57,989
Now inside that while loop what we're doing
is comparing the item that we're going to

16
00:00:57,989 --> 00:01:02,539
try to insert with the data that's inside
the node.

17
00:01:02,539 --> 00:01:07,540
And in doing so we can decide if we should
go to the left or we should go to the right,

18
00:01:07,540 --> 00:01:10,000
based on whether or not this is less than.

19
00:01:10,000 --> 00:01:15,640
So if we go to the left and temp becomes null,
than the previous node is the node we have

20
00:01:15,640 --> 00:01:19,060
to update to point to the new node that we
create.

21
00:01:19,060 --> 00:01:23,400
And then that last if statement there just
does that same check again to decide whether

22
00:01:23,400 --> 00:01:28,810
this should be a left child of the node or
whether it should be a right child of the

23
00:01:28,810 --> 00:01:32,510
node based on whether it's less than an order
greater than the node.

24
00:01:32,510 --> 00:01:37,540
There's no real recursion in this in this
algorithm; all it is, is a loop to find the

25
00:01:37,540 --> 00:01:38,540
null.

26
00:01:38,540 --> 00:01:41,950
And then once we found the know all to go
to the node immediately before that we saw

27
00:01:41,950 --> 00:01:46,909
immediately before that an add the node on
as a left child or right child.

28
00:01:46,909 --> 00:01:52,229
So as not it's not terribly difficult code;
It does involve the little bit of complexity

29
00:01:52,229 --> 00:01:53,430
of pointers.

30
00:01:53,430 --> 00:01:58,740
But if we keep track of where we were just
a moment ago using the previous pointer, then

31
00:01:58,740 --> 00:02:02,739
when the temp pointer goes know all we know
where the nodes should be connected to.

