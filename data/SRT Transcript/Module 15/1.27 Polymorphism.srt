1
00:00:01,170 --> 00:00:04,150
This is a topic I actually really like; it's
polymorphism.

2
00:00:04,150 --> 00:00:09,750
And what we're saying is that since every
cat is a pet, we should be able to copy data

3
00:00:09,750 --> 00:00:11,650
between cats and pets.

4
00:00:11,650 --> 00:00:16,670
Now if we take a look at main memory, what
we're going to see is that inside every cat

5
00:00:16,670 --> 00:00:19,080
there is a pet object.

6
00:00:19,080 --> 00:00:24,970
Not in reality that there is a pet inside,
But what we're going to see is that all the

7
00:00:24,970 --> 00:00:28,769
stuff that is in pet is also in cat.

8
00:00:28,769 --> 00:00:35,530
So if we have a function which expects to
take a pet, it could take a cat because the

9
00:00:35,530 --> 00:00:41,019
cat class will have all the items that exist
inside the pet class.

10
00:00:41,019 --> 00:00:44,870
It's going to have more in this case is going
to have whisker length but it's going to have

11
00:00:44,870 --> 00:00:46,999
everything that was inside the pet.

12
00:00:46,999 --> 00:00:50,999
All the functions, all the data, everything
that we should be able to do with a pet we

13
00:00:50,999 --> 00:00:53,369
should also be able to do with a cat.

14
00:00:53,369 --> 00:00:59,399
So since every cat is a pet every cat is going
to contain all of the functions inside pet,

15
00:00:59,399 --> 00:01:03,510
though not necessarily the same versions and
that's where one of the problems really comes

16
00:01:03,510 --> 00:01:05,489
along.

17
00:01:05,489 --> 00:01:11,950
Polymorphism in C++ allows us to copy the
data over from a cat into a pet object.

18
00:01:11,950 --> 00:01:14,950
And that's what I want to want to show you
here with a little bit of code.

19
00:01:14,950 --> 00:01:20,009
What I've done is create a pet object and
a pet pointer and as well as a cat object

20
00:01:20,009 --> 00:01:24,140
and a cat pointer and we're going to look
at a couple of examples here.

21
00:01:24,140 --> 00:01:30,670
If we take a cat and try and store it in a
pet, this always works, this is always allowed;

22
00:01:30,670 --> 00:01:32,950
it's a solution known as slicing.

23
00:01:32,950 --> 00:01:39,200
So taking a cat object and storing it into
a pet in this case, P equals C that will always

24
00:01:39,200 --> 00:01:40,200
work.

25
00:01:40,200 --> 00:01:48,219
But what happens is those objects, those items,
of the pet that are in class are copied over.

26
00:01:48,219 --> 00:01:51,710
What happens to the whisker like this; it's
just completely lost.

27
00:01:51,710 --> 00:01:56,509
So in our example we'll be copying over the
name of the cat will be copying over the pet

28
00:01:56,509 --> 00:02:02,990
ID of the cat and we’ll store that in the
pet object but we can't fit the whisker length,

29
00:02:02,990 --> 00:02:04,439
so we just don't copy it.

30
00:02:04,439 --> 00:02:09,540
It's very much like when you took an integer
and you stored a double in that integer; it's

31
00:02:09,540 --> 00:02:13,540
just chopped off the decimal point and threw
away all the stuff after the decimal point,

32
00:02:13,540 --> 00:02:16,379
didn't do any rounding or anything like that.

33
00:02:16,379 --> 00:02:23,849
We can also copy information from a pet and
sort of upgrade it to that of a cat, but C++

34
00:02:23,849 --> 00:02:25,480
doesn't do this automatically.

35
00:02:25,480 --> 00:02:32,069
C++ won’t allow this to be done automatically;
what we will have to do is overload the assignment

36
00:02:32,069 --> 00:02:33,099
operator.

37
00:02:33,099 --> 00:02:40,430
So inside the cat’s class inside the cat
class, if we overload the assignment operator

38
00:02:40,430 --> 00:02:46,890
to take a pet object then we'll get this upgrade
possibility because the cat class will know

39
00:02:46,890 --> 00:02:50,640
what to do, will know what value to set and
whisker length.

40
00:02:50,640 --> 00:02:57,870
It will copy over or it should copy over those
items that are in the pet manually and then

41
00:02:57,870 --> 00:03:03,040
you can have whatever value for whisker length
you deem appropriate, maybe at zero maybe

42
00:03:03,040 --> 00:03:04,440
not, I don't know.

43
00:03:04,440 --> 00:03:10,531
But the point is that if we overload the assignment
operator for a pet inside the cat class, we're

44
00:03:10,531 --> 00:03:14,360
allowed to do cat equals pet.

45
00:03:14,360 --> 00:03:22,140
The pet pointer being assigned to a cat will
always be allowed; and this is the real core

46
00:03:22,140 --> 00:03:26,069
of polymorphism this where the magic really
happens.

47
00:03:26,069 --> 00:03:32,739
Because we have a base class pointer, we can
make it point to a derived class object because

48
00:03:32,739 --> 00:03:39,120
the derived class object will contain all
the functions and all the data that are in

49
00:03:39,120 --> 00:03:40,120
the base class.

50
00:03:40,120 --> 00:03:44,780
So the pointer can point to a derived class
object and we haven't lost anything.

51
00:03:44,780 --> 00:03:51,970
It's really important to recognize the difference
here between slicing P equal C and polymorphous

52
00:03:51,970 --> 00:03:59,129
P pointer equals the address of C. In one
case we're taking the cat information in the

53
00:03:59,129 --> 00:04:03,459
slicing case we're taking the cat information
and storing it into an object that actually

54
00:04:03,459 --> 00:04:10,590
is a pet; and the other case we're taking
a pet pointer and making it point to a cat.

55
00:04:10,590 --> 00:04:17,380
So polymorphism is not working with pets,
it's working with pet pointers that are pointing

56
00:04:17,380 --> 00:04:18,800
to cats.

57
00:04:18,800 --> 00:04:24,260
And that's a huge difference because we have
to recognize that the pet pointer is not pointing

58
00:04:24,260 --> 00:04:28,570
at a pet; it's pointing at a cat or maybe
it's pointing at a dog or a fish or a turtle

59
00:04:28,570 --> 00:04:31,160
or whatever kind of pet you want.

60
00:04:31,160 --> 00:04:37,720
But the point here is that the pointer can
point to any data type as long as it's derived

61
00:04:37,720 --> 00:04:40,230
data type of the pet class.

62
00:04:40,230 --> 00:04:45,750
All the pet functions, all the pet data is
still going to be in those derived class objects

63
00:04:45,750 --> 00:04:47,010
so it's allowed.

64
00:04:47,010 --> 00:04:51,180
Again we've got to keep in mind that the versions
of the functions might be different so that's

65
00:04:51,180 --> 00:04:53,210
going to become an issue in the next slide.

66
00:04:53,210 --> 00:04:58,500
But for right now we can recognize that everything
that's in the base class object will also

67
00:04:58,500 --> 00:05:00,620
be in the derived class object.

68
00:05:00,620 --> 00:05:05,460
If we do have that pointer, the only things
that we can use are those things that exist

69
00:05:05,460 --> 00:05:06,970
in the base class.

70
00:05:06,970 --> 00:05:13,910
So we can't change the whisker length via
the P pointer, we can't change the cat's whisker

71
00:05:13,910 --> 00:05:19,830
length, even though it is a cat object; P
pointer is a base pointer and the only things

72
00:05:19,830 --> 00:05:23,550
were allowed to access are those things that
exist in the base.

73
00:05:23,550 --> 00:05:27,980
So we can set the name and we can set the
pet ID number but we can't set the whiskered

74
00:05:27,980 --> 00:05:32,450
length using in the pet pointer, we need a
cat pointer to do that.

75
00:05:32,450 --> 00:05:37,780
And one thing that's very important to recognize
is that we can never take a cat pointer and

76
00:05:37,780 --> 00:05:40,180
make it point to a pet object.

77
00:05:40,180 --> 00:05:46,010
We're never allowed to do assignment between
the data type pet pointer and the data type

78
00:05:46,010 --> 00:05:47,020
cat pointer.

79
00:05:47,020 --> 00:05:51,310
Even though they're both just pointers and
even if the pet pointer is actually pointing

80
00:05:51,310 --> 00:05:59,100
at a cat, C++ will not allow us ever to copy
the pet pointer into a cat pointer.

81
00:05:59,100 --> 00:06:04,060
So what we're doing here with CPTR equals
to the address of P. There's no way to make

82
00:06:04,060 --> 00:06:05,060
that work in C++.

