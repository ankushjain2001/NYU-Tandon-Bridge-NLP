1
00:00:00,489 --> 00:00:04,660
We've been working with the arrays up to this
point, and they array data structure works

2
00:00:04,660 --> 00:00:08,309
great for how we'd like to store information.

3
00:00:08,309 --> 00:00:12,599
Unfortunately there are some limitations on
arrays; if we were doing insertion into an

4
00:00:12,599 --> 00:00:17,250
array even if the insertion that we're doing
is on to the end of the array, we have to

5
00:00:17,250 --> 00:00:20,349
make sure that there's space in the array
available.

6
00:00:20,349 --> 00:00:25,000
If there isn't space available, we have to
expand the array as we saw in the pointers

7
00:00:25,000 --> 00:00:27,770
and dynamic memory discussion.

8
00:00:27,770 --> 00:00:32,950
We have to expand the array and doing so takes
big O of N. Regardless of that, if we want

9
00:00:32,950 --> 00:00:36,700
to do an insertion at the beginning of an
array or if we wanted to an insertion in the

10
00:00:36,700 --> 00:00:42,680
middle of an array, we have to push back every
element that's beyond that insertion point.

11
00:00:42,680 --> 00:00:47,260
So we have to go to the last element and move
it back by one, we have to go to the second

12
00:00:47,260 --> 00:00:50,820
to last to move it to the last element and
so on and so forth.

13
00:00:50,820 --> 00:00:55,980
That's a severe limitation on arrays in that
we can't insert into the middle of them without

14
00:00:55,980 --> 00:00:57,670
a big O of N process.

15
00:00:57,670 --> 00:01:01,610
But we don't have that problem with a linked
list with a linked list.

16
00:01:01,610 --> 00:01:05,700
We can do an arbitrary insertion on to the
beginning the end or anywhere in the middle

17
00:01:05,700 --> 00:01:08,670
in constant time we can do it in big O of
one.

18
00:01:08,670 --> 00:01:14,840
And the reason for that is because these pointers
keep track of where everything is going.

19
00:01:14,840 --> 00:01:19,189
And as long as we're suing that it's being
stored in main memory, which it usually is,

20
00:01:19,189 --> 00:01:24,909
if we're using main memory that's ram we can
access any node at a constant time.

21
00:01:24,909 --> 00:01:30,749
So we don't have a problem with being able
to insert into the middle of the linked list.

22
00:01:30,749 --> 00:01:36,600
Now unfortunately, the downside of the linked
list is that in order to go through to find

23
00:01:36,600 --> 00:01:41,479
any node in the list we're going to have to
use a linear searching algorithm so it's going

24
00:01:41,479 --> 00:01:43,049
to be big O of N.

25
00:01:43,049 --> 00:01:47,539
So we can't arbitrarily go to the third node
of a linked list like we could with an array.

26
00:01:47,539 --> 00:01:52,780
With an array, if we want the third node of
an array we simply go to that memory location

27
00:01:52,780 --> 00:01:54,929
and access the third element.

28
00:01:54,929 --> 00:01:58,229
But with a linked list to get to the third
node you have to go through the second note,

29
00:01:58,229 --> 00:02:01,709
and to go through the second node have to
go through the first node and so on and so

30
00:02:01,709 --> 00:02:02,749
forth.

31
00:02:02,749 --> 00:02:09,700
So we have these differences in access and
insertion times and each one serves its own

32
00:02:09,700 --> 00:02:10,720
purpose.

33
00:02:10,720 --> 00:02:16,340
If we don't need arbitrary access to the middle
of a linked list or the middle of the data

34
00:02:16,340 --> 00:02:19,470
set then a linked list would be a perfect
way to store that.

35
00:02:19,470 --> 00:02:23,840
But if we do need arbitrary access to the
middle of the dataset then a linked list is

36
00:02:23,840 --> 00:02:25,400
not a great idea.

37
00:02:25,400 --> 00:02:31,130
So it's really just playing the averages of
what we expect to be doing with these things

38
00:02:31,130 --> 00:02:36,570
that we can make a decision on to whether
we should use a linked list or an array.

39
00:02:36,570 --> 00:02:40,780
Array insertion is big O of N; linked list
insertion is constant time.

40
00:02:40,780 --> 00:02:47,630
Array access is constant time, whereas linked
list access is linear so you make the decision.

41
00:02:47,630 --> 00:02:51,170
Now linked lists can be reorganized; they
can be merged.

42
00:02:51,170 --> 00:02:53,830
They can be broken apart into new lists.

43
00:02:53,830 --> 00:02:59,150
These operations only take constant time because
we're just manipulating the pointers.

44
00:02:59,150 --> 00:03:02,330
linked lists don't require any overhead for
storage.

45
00:03:02,330 --> 00:03:06,270
When we were working with vectors, we had
to make sure to leave a little bit of extra

46
00:03:06,270 --> 00:03:08,410
room in case of expansion.

47
00:03:08,410 --> 00:03:12,670
With the linked list, we have no need for
that so all we have of those pointers and

48
00:03:12,670 --> 00:03:17,880
they only take up four bytes for each node
so hopefully it's not too significant a factor.

49
00:03:17,880 --> 00:03:23,490
But the idea here is that we can make a decision
consciously about whether we choose an array

50
00:03:23,490 --> 00:03:24,702
or a linked list to get the job done.

