1
00:00:00,620 --> 00:00:07,500
Weâ€™ve seen that there are two steps when we want
to solve a computational problem using recursion.

2
00:00:07,500 --> 00:00:11,650
We've talked about the base case, the fact
that we solve the problem for the smallest

3
00:00:11,650 --> 00:00:18,680
possible input and the recursive step where
we combine solutions to smaller instances

4
00:00:18,680 --> 00:00:23,600
in order to solve the original of the given
problem.

5
00:00:23,600 --> 00:00:30,730
Actually, we first define logically, it's
not any line of code that we find our assumption;

6
00:00:30,730 --> 00:00:35,579
that calling the function on a smaller input
does whatever it has to do.

7
00:00:35,579 --> 00:00:40,859
But given that in mind, we are trying to solve
our problem for the given input.

8
00:00:40,859 --> 00:00:47,609
So we kind of make ourselves call the function
on a smaller input and try to see what fixes

9
00:00:47,609 --> 00:00:52,340
we have to do in order to make it work for
the given input.

10
00:00:52,340 --> 00:00:59,949
just the way we kind of proved by induction
where we in the induction step when we want

11
00:00:59,949 --> 00:01:05,780
to prove that P of N is true we kind of make
ourselves use the assumption that P of N minus

12
00:01:05,780 --> 00:01:09,710
one is true or all the values smaller than
N are true.

13
00:01:09,710 --> 00:01:14,560
We kind of make yourself use this assumption
in the proof that P of N is true, same thing

14
00:01:14,560 --> 00:01:20,290
in recursion we kind of makers of use or call
the function smaller inputs and try to fix

15
00:01:20,290 --> 00:01:27,830
it, try to find a way to combine these calls
for creating a solution for the given input.

16
00:01:27,830 --> 00:01:30,220
Let's try to see some more examples.

17
00:01:30,220 --> 00:01:35,460
for example let's try to write a recursive
implementation of the function print ascending

18
00:01:35,460 --> 00:01:37,570
and descending.

19
00:01:37,570 --> 00:01:43,670
once again this function could get two parameters,
start and end; again we'll assume that start

20
00:01:43,670 --> 00:01:48,710
is less or equal to N. but this time the function
given started and would print the numbers

21
00:01:48,710 --> 00:01:54,650
from start to end in ascending order, followed
by the numbers in a descending order back

22
00:01:54,650 --> 00:01:55,650
to start.

23
00:01:55,650 --> 00:01:59,950
for example if we call print start and end
with three and five, it would print three,

24
00:01:59,950 --> 00:02:06,470
four, five, four, three; it would printed
in an ascending and descending order.

25
00:02:06,470 --> 00:02:12,270
Let's try to create a recursive implementation
of this problem here.

26
00:02:12,270 --> 00:02:18,349
Starting with the base case, starting to solve
this problem on the smallest possible input.

27
00:02:18,349 --> 00:02:24,609
Once again, this input for this problem is
measured by the number of elements in the

28
00:02:24,609 --> 00:02:26,319
range from start to end.

29
00:02:26,319 --> 00:02:31,739
Therefore, the smallest input possible is
the range of size one; we can identify it

30
00:02:31,739 --> 00:02:39,920
by asking if start equals end, if it is equal
to end, the solution for this very small instance,

31
00:02:39,920 --> 00:02:47,150
if we want to print ascending and descending
a single element range, it is basically just

32
00:02:47,150 --> 00:02:50,120
printing that number; so cout start.

33
00:02:50,120 --> 00:02:54,670
Quite easy, as we said the base case are typically
very straightforward.

34
00:02:54,670 --> 00:03:00,799
But then let's see how we can solve all the
other cases.

35
00:03:00,799 --> 00:03:04,970
First let's define the induction assumption.

36
00:03:04,970 --> 00:03:12,790
If we call in this case our function print
ascending and descending on a smaller range,

37
00:03:12,790 --> 00:03:14,079
it would do the job.

38
00:03:14,079 --> 00:03:18,139
Basically it would print the numbers in the
range in ascending and descending order so

39
00:03:18,139 --> 00:03:24,180
our assumption is if we call print ascending
and descending on a smaller range, it would

40
00:03:24,180 --> 00:03:27,700
print the numbers as requested in an ascending
and descending order.

41
00:03:27,700 --> 00:03:34,310
Let's try to use it in order to solve our
problem for the range of start to end.

42
00:03:34,310 --> 00:03:38,689
So let's try to take a smaller range than
start to end.

43
00:03:38,689 --> 00:03:44,439
For example, let's take start plus one to
end; let's think, what the call print ascending

44
00:03:44,439 --> 00:03:49,720
and descending start plus one to end would
do? by our assumption, we said that if we

45
00:03:49,720 --> 00:03:54,810
call this function on a smaller range, which
obviously is a smaller range start plus one

46
00:03:54,810 --> 00:03:59,060
to end, it would print all the numbers in
that range in ascending and descending order.

47
00:03:59,060 --> 00:04:05,840
So it would print from start plus one up to
end then back to start plus one, that's basically

48
00:04:05,840 --> 00:04:10,629
most of what we need to do in order to print
the entire range from start to end in an ascending

49
00:04:10,629 --> 00:04:11,629
and descending order.

50
00:04:11,629 --> 00:04:18,829
We just need to print start before this and
print start after that so if we'll add two

51
00:04:18,829 --> 00:04:25,590
cout statements before this call and after
this call, we would get a print of start and

52
00:04:25,590 --> 00:04:31,830
then a print descending the range start plus
one to end then back to start plus one.

53
00:04:31,830 --> 00:04:40,690
Followed by a last print of start, which would
all combine together, would print from start

54
00:04:40,690 --> 00:04:42,580
to end and back to start.

