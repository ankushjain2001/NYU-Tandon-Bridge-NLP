1
00:00:00,680 --> 00:00:06,450
Okay, so now we know how to translate a number
in an arbitrary number system to decimal,

2
00:00:06,450 --> 00:00:10,880
enough to take a decimal number and turn it
into a binary. You could generalize it and

3
00:00:10,880 --> 00:00:16,330
turn it into any other number system as well.
I want to show you, and basically this is

4
00:00:16,330 --> 00:00:22,420
enough to convert from one number system to
any other number system. If you do these two

5
00:00:22,420 --> 00:00:28,130
things as a two step process, but I want to
show you another kind of translation and that

6
00:00:28,130 --> 00:00:35,610
is to convert a binary number to its equivalent
hexadecimal number. It's going to be a direct

7
00:00:35,610 --> 00:00:41,720
way, where a direct process that does this
translation is going to be a very fast and

8
00:00:41,720 --> 00:00:47,250
simple one, I hope. And the question that
we ask ourselves is why do we care about the

9
00:00:47,250 --> 00:00:52,850
hexadecimal number system? I think I have
a better, or I have a good answer for that

10
00:00:52,850 --> 00:00:59,329
in one of our future models but for now, let's
just see how we can convert a binary to hexadecimal

11
00:00:59,329 --> 00:01:01,559
number back and forth.

12
00:01:01,559 --> 00:01:10,240
So, for example, let's take a 3b9, a hexadecimal
number, and try to figure out its binary representation.

13
00:01:10,240 --> 00:01:15,360
So, first I'll show you the technique, how
technically you take a hexadecimal number

14
00:01:15,360 --> 00:01:19,280
and turn to binary and binary to hexadecimal.
I’ll just show you, without explaining why

15
00:01:19,280 --> 00:01:26,670
it works just how to do that, and after that,
I’ll try to justify it in some sense.

16
00:01:26,670 --> 00:01:32,290
So, for example, when you get this number
3b9 hexadecimal and you want to convert it

17
00:01:32,290 --> 00:01:38,800
into binary. What do you do is actually, with
time you memorize it, but for now let's have

18
00:01:38,800 --> 00:01:47,570
a table. That one side would be the hexadecimal
digits and the other would be the 4 bit binary

19
00:01:47,570 --> 00:01:54,509
representation of these digits, so that the
hexadecimal digits are 0, 1, 2, 3, up to F,

20
00:01:54,509 --> 00:02:02,020
right? And their 4 bit binary representation
goes like that. So 0 would be four 0s, 0.

21
00:02:02,020 --> 00:02:12,920
1 would be 0001, 2 would be 0010, 3 would
be a 0011, and so on. If you keep on going,

22
00:02:12,920 --> 00:02:19,609
you'll see that basically this 4 bit binary
representation gives us all the combinations,

23
00:02:19,609 --> 00:02:29,140
all the possible values or options of four
bits, and it's not a coincidence. It's part

24
00:02:29,140 --> 00:02:35,829
of the reason why this method kind of works.
So, assuming we have this table, on a piece

25
00:02:35,829 --> 00:02:42,469
of paper or we just memorize it, again with
time you memorize it. The process of converting

26
00:02:42,469 --> 00:02:48,290
hexadecimal number to a binary one works like
that, we work digit by digit individually,

27
00:02:48,290 --> 00:02:55,450
independently, and write its 4 bit extension
instead of the digit.

28
00:02:55,450 --> 00:03:06,150
So, for example 9 is 1001, and that what will
have instead of the 9. b is 1011, that's what

29
00:03:06,150 --> 00:03:11,799
we'll have instead of the b. 3 is 0011, that's
what would have instead of the 3. So, we have

30
00:03:11,799 --> 00:03:21,019
3b9, each one extended to 4 bits. All of these
together gives us the binary equivalent of

31
00:03:21,019 --> 00:03:28,200
that number. So, it's kind of simple if we
memorize this table, and it's kind of surprising

32
00:03:28,200 --> 00:03:36,819
because we are actually translating the hexadecimal
number digit by digit, individually and independently.

33
00:03:36,819 --> 00:03:41,160
We didn't do that when we wanted to convert
75 decimal to its binary presentation; we

34
00:03:41,160 --> 00:03:46,830
didn't convert 7 on its own and 5 on its own
and together it was 75, we had to do something

35
00:03:46,830 --> 00:03:55,889
that is much more global in order to convert
a decimal number into a binary one. But hexadecimal,

36
00:03:55,889 --> 00:04:04,760
maybe because it's 2 to the 4, it’s a power
of two, allows us to have a much easier process

37
00:04:04,760 --> 00:04:06,870
to make these conversions.

38
00:04:06,870 --> 00:04:11,209
By the way, the other way around taking a
binary number and convert it into hexadecimal,

39
00:04:11,209 --> 00:04:19,129
would be very similar. We'll have split the
numbers into groups of four and each one to

40
00:04:19,129 --> 00:04:26,599
match to its hexadecimal digit. Just one thing
to note when we group the numbers by fours:

41
00:04:26,599 --> 00:04:32,360
we need to start from right to left, because
if one of the groups or if the number of digits

42
00:04:32,360 --> 00:04:39,100
doesn't divide evenly by four, it is good
to add a 0 to its left without changing the

43
00:04:39,100 --> 00:04:47,170
value of the number. And then we would get
like a whole number of groups of fours. In

44
00:04:47,170 --> 00:04:52,540
this case, the first group is a 3, the second
group is a d, the third group is a 6, and

45
00:04:52,540 --> 00:04:53,509
all together we get 6d3.

