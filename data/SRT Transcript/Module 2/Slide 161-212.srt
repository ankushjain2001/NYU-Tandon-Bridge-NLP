1
00:00:00,570 --> 00:00:06,900
Okay, so we know how to take a number in an
arbitrary number system in base.

2
00:00:06,900 --> 00:00:09,379
B. and figure out it's decimal value.

3
00:00:09,379 --> 00:00:15,110
Now, let's try to do the other way around:
take a decimal number and try to find its

4
00:00:15,110 --> 00:00:20,030
representation in base B, an arbitrary number
system.

5
00:00:20,030 --> 00:00:27,420
Actually, I want to demonstrate it only on
base 2, on the binary number system, basically

6
00:00:27,420 --> 00:00:30,480
to convert the decimal number into a binary
number.

7
00:00:30,480 --> 00:00:39,110
We can then generalize this method, translating
decimal into other number systems as well.

8
00:00:39,110 --> 00:00:45,980
Let's take, for example 75, the decimal 75,
and try to find its representation, its binary

9
00:00:45,980 --> 00:00:48,710
equivalent representation.

10
00:00:48,710 --> 00:00:52,899
So let's think how we can get started here,
so obviously the binary number is going to

11
00:00:52,899 --> 00:00:57,489
be a sequence of digits, each one is going
to be a zero or one.

12
00:00:57,489 --> 00:01:03,010
We just have to figure out which digits is
a zero and which one is the one, since it's

13
00:01:03,010 --> 00:01:07,580
going to be a binary number, each digit has
its own weight.

14
00:01:07,580 --> 00:01:13,780
So, we have the 1s, 2 to the zero, 2 to the
1s (the 10s), 2 to the 2s (the hundreds),

15
00:01:13,780 --> 00:01:16,450
2 to the 3, to the 4, and so on.

16
00:01:16,450 --> 00:01:25,290
Just to be more explicit, let's write these
powers of two with their decimal value: so,

17
00:01:25,290 --> 00:01:35,149
2 to the 0 is 1, 2 to the 1 is 2, 2 to the
2 is 4, and so on, 8, 16,32, 64, 128, and

18
00:01:35,149 --> 00:01:36,149
so on.

19
00:01:36,149 --> 00:01:41,549
So, each digit here has this weight and we
need to figure out for each position, whether

20
00:01:41,549 --> 00:01:45,200
it's going to be a zero or a one.

21
00:01:45,200 --> 00:01:51,659
Let's start with this position here, with
the digit in with the weight 256.

22
00:01:51,659 --> 00:01:54,670
Should that be a zero or a one?

23
00:01:54,670 --> 00:01:57,700
I believe most of you said that it must be
a 0.

24
00:01:57,700 --> 00:02:05,890
Let's try to argue why this is indeed right,
or the only possible value for this digit.

25
00:02:05,890 --> 00:02:11,950
Actually, it makes a lot of sense because
if we would put a 1 here, only this digit

26
00:02:11,950 --> 00:02:17,550
would give us the weight of 256 which is greater
than the total weight we're trying to represent,

27
00:02:17,550 --> 00:02:19,790
the total value of 75.

28
00:02:19,790 --> 00:02:22,940
So, there can't be a one in this position.

29
00:02:22,940 --> 00:02:25,880
This position, therefore, must be a 0.

30
00:02:25,880 --> 00:02:33,000
Actually, not only this position of 256, but
all digits that their weight is greater than

31
00:02:33,000 --> 00:02:37,600
75: the 128, 256, 512, and so on.

32
00:02:37,600 --> 00:02:40,970
All of these digits must be a zero, right?

33
00:02:40,970 --> 00:02:46,320
The real question is what would be the value
with the rest of the digits.

34
00:02:46,320 --> 00:02:52,840
So, all of them together should represent
or should add up to the value of seventy five.

35
00:02:52,840 --> 00:02:58,230
And, let's try to go over them one by one
and figure out whether they should be a 1

36
00:02:58,230 --> 00:02:59,230
or a 0.

37
00:02:59,230 --> 00:03:05,350
Weâ€™ll go over them from left to right, starting
with this digit here, with a 64.

38
00:03:05,350 --> 00:03:11,080
What do you think, should this digit here
be a 0 or a 1?

39
00:03:11,080 --> 00:03:15,110
I believe most of you said that it should
be a 1, and by the way I agree it would be

40
00:03:15,110 --> 00:03:20,730
a 1, but I want to argue why it must be a
1, why it can't be 0?

41
00:03:20,730 --> 00:03:28,080
Because my concern is that maybe this digit
would be a 0 and the rest of the digits, some

42
00:03:28,080 --> 00:03:33,310
way, would add up to 75, even though this
digit here is a 0.

43
00:03:33,310 --> 00:03:36,500
So, this is not possible but maybe it is.

44
00:03:36,500 --> 00:03:41,230
How can we argue that this scenario here is
not valid?

45
00:03:41,230 --> 00:03:48,710
So, a good argument would say that the rest
of the digits, or using the rest of the digits,

46
00:03:48,710 --> 00:03:55,550
the largest value that they can represent
all together is having them all be ones, right?

47
00:03:55,550 --> 00:04:01,500
Taking all of their weights, that would be
the greatest value we can have using only

48
00:04:01,500 --> 00:04:02,990
these digits.

49
00:04:02,990 --> 00:04:09,970
And then, when we add 1 plus 2 plus 4 plus
8 to 16 plus 32, it add up to 63, which is

50
00:04:09,970 --> 00:04:11,800
by the way even less than 64.

51
00:04:11,800 --> 00:04:13,940
It's obviously less than 75.

52
00:04:13,940 --> 00:04:23,411
So, having the 0 at 64 won't allow us to add
up to 75 as total, which means that this digit

53
00:04:23,411 --> 00:04:25,060
would have to be a 1.

54
00:04:25,060 --> 00:04:32,820
But, before we say that, I just want to you
to note a very important thing regarding the

55
00:04:32,820 --> 00:04:35,000
sum of geometrical progression.

56
00:04:35,000 --> 00:04:44,560
So, if you add up the geometric progression
of 2, for example 1 plus 2 plus 4 plus 8,

57
00:04:44,560 --> 00:04:48,680
up to for example, 2 to the power of K., you
know what this sum adds up to?

58
00:04:48,680 --> 00:04:54,510
So, this sum adds up to 2 to the power of
K. plus 1 minus 1.

59
00:04:54,510 --> 00:05:00,470
Basically, 1 less than the next power of 2
in that sum.

60
00:05:00,470 --> 00:05:08,510
So, in this case, 1 plus 2 plus 4 plus 8 up
to 32, is one less than the next power of

61
00:05:08,510 --> 00:05:11,850
2, one less than 64, which is exactly 63.

62
00:05:11,850 --> 00:05:18,070
So, there is a very important property, we're
going to use it a lot in computer science,

63
00:05:18,070 --> 00:05:22,370
so just make sure you know the sum and memorize
it.

64
00:05:22,370 --> 00:05:30,460
So, in this case we agree that this digit
here with the weight of 64, must be a 1.

65
00:05:30,460 --> 00:05:38,850
After having a 1 here, out of this 75, we
already used 64, we already represented 64,

66
00:05:38,850 --> 00:05:40,810
which leaves us with 11.

67
00:05:40,810 --> 00:05:45,660
So, the rest of the digits must add up to
11.

68
00:05:45,660 --> 00:05:51,390
If we need to add up to 11, 32 must obviously
be a 0 and so is 16.

69
00:05:51,390 --> 00:05:54,550
The weight of 16 is greater than 11 itself,
right?

70
00:05:54,550 --> 00:06:00,150
The question again comes when we are in a
weight that is less than 11.

71
00:06:00,150 --> 00:06:06,260
8, in this case, should this be a 0 or 1?

72
00:06:06,260 --> 00:06:10,240
I believe most of you said 1, but let's give
this argument again.

73
00:06:10,240 --> 00:06:15,440
If for some odd reason, we have a 0 here,
the greatest value we can have with the rest

74
00:06:15,440 --> 00:06:18,200
of the digits would be 7, right?

75
00:06:18,200 --> 00:06:22,590
1 less than this 8, which is obviously less
than 11.

76
00:06:22,590 --> 00:06:25,540
So this bit here, must be a 1.

77
00:06:25,540 --> 00:06:30,790
Having the 1 in this position out of the 11,
we already represented 8, which leaves us

78
00:06:30,790 --> 00:06:33,600
with 3 for the rest of the bits.

79
00:06:33,600 --> 00:06:43,400
So, the four must be a 0, and the 2 must be
a 1, which leaves us 3 minus 2 with the 1

80
00:06:43,400 --> 00:06:45,430
for the rest of the bits.

81
00:06:45,430 --> 00:06:49,980
And that is exactly the value that we're going
to put for the 1 digit.

82
00:06:49,980 --> 00:06:55,480
So, you see that this method here figures
out the 75.

83
00:06:55,480 --> 00:07:03,620
Now that we can copy these bits up there and
see that it is 1001011, whatever, and more

84
00:07:03,620 --> 00:07:09,680
importantly, this method exposed the bits
from left to right.

85
00:07:09,680 --> 00:07:14,250
There is an alternative method that would
expose the bits from right to left, and won't

86
00:07:14,250 --> 00:07:17,550
talk about it now but you can look it up on
Wikipedia.

